<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tshepang logs</title>
        <link>http://tshepang.net</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="http://tshepang.net/tags/non-python/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 07 Oct 2014 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>links 2014-10-07</title>
                <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2014-10-07/</link>
                <guid>http://tshepang.net/links-2014-10-07/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.enricozini.org&#x2F;2014&#x2F;debian&#x2F;on-responsibilities&quot;&gt;A nice article&lt;&#x2F;a&gt; on the need for people with different roles in a
single project: manager and craftsman&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;grodola.blogspot.com&#x2F;2014&#x2F;01&#x2F;psutil-20-porting.html&quot;&gt;A nice article&lt;&#x2F;a&gt; on revamping psutil API; it&#x27;s a Python
library that provides easy and cross-platform process control&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.spacemonkey.com&#x2F;blog&#x2F;posts&#x2F;go-space-monkey&quot;&gt;A thorough (and satisfying) article&lt;&#x2F;a&gt; on why Go rocks, as compared
to Python... perhaps the best I&#x27;ve read&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;richardhartmann.de&#x2F;blog&#x2F;posts&#x2F;2013&#x2F;12&#x2F;14-SteamOS&quot;&gt;SteamOS is based on Debian 7 &amp;quot;wheezy&amp;quot;&lt;&#x2F;a&gt;; a Debian win&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-devel-announce&#x2F;2014&#x2F;01&#x2F;msg00006.html&quot;&gt;Debian Developers and Maintainers&lt;&#x2F;a&gt; are given gratis access to play
Valve games; another Debian win&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>a better Python</title>
                <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/a-better-python/</link>
                <guid>http://tshepang.net/a-better-python/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;neverworkintheory.org&#x2F;2014&#x2F;01&#x2F;29&#x2F;stefik-siebert-syntax&quot;&gt;This post&lt;&#x2F;a&gt; led me to an interesting paper titled &lt;em&gt;An Empirical
Investigation into Programming Language Syntax&lt;&#x2F;em&gt;. Now, since I&#x27;m a
Python sucker, here is what I would change in Python in order to follow
advice from &lt;a href=&quot;http:&#x2F;&#x2F;dl.acm.org&#x2F;authorize?6968137&quot;&gt;that paper&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    before       after
    ------       -----
     !=          not=
      %          mod
   string        text
  try-except  check-error
   finally       always
    raise        alert
     def       procedure
    print       output
   import        use
  int&#x2F;float     number
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The most surprising finding is that both programmers and non-programmers
found &lt;em&gt;while&lt;&#x2F;em&gt; and &lt;em&gt;for&lt;&#x2F;em&gt; not intuitive for looping constructs. The
preferred alternatives are &lt;em&gt;repeat&lt;&#x2F;em&gt; and &lt;em&gt;loop&lt;&#x2F;em&gt;. Of these, I prefer
&lt;em&gt;loop&lt;&#x2F;em&gt;, but it does not read as well as &lt;em&gt;while&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
while count &amp;lt; 3:
    count = action()

loop count &amp;lt; 3:
    count = action()
&lt;&#x2F;pre&gt;
&lt;p&gt;Quorum, the language by those responsible for this paper, went with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
repeat while (count &amp;lt; 3)
    count = action()
end
&lt;&#x2F;pre&gt;
&lt;p&gt;To mimic that in Python, any of the following two sound fine (I prefer
&lt;em&gt;if&lt;&#x2F;em&gt; to &lt;em&gt;while&lt;&#x2F;em&gt;; less syntax is better):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
repeat if count &amp;lt; 3:
    count = action()

loop if count &amp;lt; 3:
    count = action()
&lt;&#x2F;pre&gt;
&lt;p&gt;That means an infinite loop would be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
loop if True:
    action()
&lt;&#x2F;pre&gt;
&lt;p&gt;Or for that special case, a shortcut can just be this simple:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
loop:
    action()
&lt;&#x2F;pre&gt;
&lt;p&gt;I wonder what cycling through items in a container would look like. In
Python, it looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
for item in container:
    action(item)
&lt;&#x2F;pre&gt;
&lt;p&gt;This feels as natural as anything, but then again I been doing Python
for a number of years, so the bias could be heavy. Following is an
attempt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
loop in range(3):
    action()
&lt;&#x2F;pre&gt;
&lt;p&gt;It mimics this Python syntax, which I actually don&#x27;t like, since we
don&#x27;t always need the items of the container:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
for _ in range(3):
    action()
&lt;&#x2F;pre&gt;
&lt;p&gt;Quorum, the academic language mentioned above, does it like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
repeat 3 times
    action()
end
&lt;&#x2F;pre&gt;
&lt;p&gt;I don&#x27;t like that either; feels contrived. The Python way strikes me as
a good compromise, especially given how general it is. I will try again
with the &lt;em&gt;loop&lt;&#x2F;em&gt; syntax:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
loop item in container:
    action(item)
&lt;&#x2F;pre&gt;
&lt;p&gt;You have to admit it doesn&#x27;t read as nice as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
for item in container:
    action(item)
&lt;&#x2F;pre&gt;
&lt;p&gt;It should be flexible to accommodate more than just one value on each
iteration, so should have an equivalent for this Python code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
for index, item in enumerate(container):
    action(index, item)
&lt;&#x2F;pre&gt;
&lt;p&gt;Here goes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
loop index, item in enumerate(container):
    action(index, item)
&lt;&#x2F;pre&gt;
&lt;p&gt;Now, for the much-loved Python list comprehensions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[procedure(item) for item in container]
&lt;&#x2F;pre&gt;
&lt;p&gt;We would instead have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[procedure(item) loop item in container]
&lt;&#x2F;pre&gt;
&lt;p&gt;So, apart from being highly-rated for being intuitive, &lt;em&gt;loop&lt;&#x2F;em&gt; also
provides a consistent looping construct, whereas Python has 2, &lt;em&gt;while&lt;&#x2F;em&gt;
and &lt;em&gt;for&lt;&#x2F;em&gt;, both of which received low points in the study. Interesting.&lt;&#x2F;p&gt;
&lt;p&gt;If someone (me?) were to implement these changes to Python, the result
would not be named a Python variant (they are just too drastic), but
more a Python descendent... &lt;strong&gt;a better Python&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>project of note: Valgrind</title>
                <pubDate>Wed, 25 Sep 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/project-of-note-valgrind/</link>
                <guid>http://tshepang.net/project-of-note-valgrind/</guid>
                <description>&lt;p&gt;I have, since using Valgrind (and reading a bit of its documentation)
some years ago, developed much respect for it. It is quite an advanced
tool, and though its primary use is detecting memory leaks, I am here
going to explore its other functionality... calculating the cost of
each line of code in the CPU. This is useful when tuning programs for
performance.&lt;&#x2F;p&gt;
&lt;p&gt;Following is example code; it accepts 2 arguments, a filename and text
that will be written to that file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;errno.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fcntl.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; path[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; content[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; fd;
    ssize_t written;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(argc &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;usage: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;lt;filename&amp;gt; &amp;lt;content&amp;gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strcpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path, argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sprintf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(content, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, argv[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);

    fd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;creat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path, S_IRWXU);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(fd == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;open error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;)n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strerror &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(errno), path);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    }

    written = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(fd, content, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strlen &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(content));
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(written == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fprintf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stderr, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;write error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;)n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strerror &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(errno), path);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Build command (using GCC 4.8.1):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
gcc -Wall -pedantic -g play.c -o play
&lt;&#x2F;pre&gt;
&lt;p&gt;System details:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
$ uname --all
Linux thome 3.11-trunk-amd64 #1 SMP Debian 3.11-1~exp1 (2013-09-12) x86_64 GNU&#x2F;Linux
$ sudo lshw -class processor
*-cpu
     description: CPU
     product: Intel(R) Core(TM) i5-2410M CPU @ 2.30GHz
     vendor: Intel Corp.
     physical id: 4
     bus info: cpu@0
     version: Intel(R) Core(TM) i5-2410M CPU @ 2.30GHz
     serial: To Be Filled By O.E.M.
     slot: CPU 1
     size: 2300MHz
     capacity: 4GHz
     width: 64 bits
     clock: 100MHz
     capabilities: x86-64 fpu fpu_exception wp vme de pse tsc msr
     pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts
     acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp
     constant_tsc arch_perfmon pebs bts rep_good nopl xtopology
     nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor
     ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2
     x2apic popcnt tsc_deadline_timer xsave avx lahf_lm ida arat epb
     xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid
     aes cpufreq
     configuration: cores=2 enabledcores=1 threads=2
&lt;&#x2F;pre&gt;
&lt;p&gt;Running the resulting binary with &lt;strong&gt;Callgrind&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
$ valgrind --tool=callgrind --callgrind-out-file=out .&#x2F;play filename
filecontent
==5308== Callgrind, a call-graph generating cache profiler
==5308== Copyright (C) 2002-2012, and GNU GPL&#x27;d, by Josef Weidendorfer
et al.
==5308== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright
info
==5308== Command: .&#x2F;play filename filecontent
==5308==
==5308== For interactive control, run &#x27;callgrind_control -h&#x27;.
==5308==
==5308== Events    : Ir
==5308== Collected : 107520
==5308==
==5308== I   refs:      107,520
$ cat filename
filecontent
&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, seeing closely the cost of each function call, where &lt;strong&gt;Ir&lt;&#x2F;strong&gt;
stands for &lt;strong&gt;Instruction cache reads&lt;&#x2F;strong&gt;, which you can read as &lt;em&gt;number of
CPU instructions&lt;&#x2F;em&gt;. I have used &lt;code&gt;tree=calling&lt;&#x2F;code&gt; option so that I can see
the cost of all operations called by a parent (marked with a &lt;code&gt;*&lt;&#x2F;code&gt;) :&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
$ callgrind_annotate --tree=calling out play.c
---++++++--
Profile data file &#x27;out&#x27; (creator: callgrind-3.8.1)
---++++++--
I1 cache:
D1 cache:
LL cache:
Timerange: Basic block 0 - 22326
Trigger: Program termination
Profiled target:  .&#x2F;play filename filecontent (PID 5308, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:
User annotated:   play.c
Auto-annotation:  off

---++++++--
Ir
---++++++--
107,520  PROGRAM TOTALS

---++++++--
Ir  file:function
---++++++--

24,113  *  &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;dl-lookup.c:do_lookup_x [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]
1,053  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;dl-misc.c:_dl_name_match_p (25x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]
13,423  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;dl-lookup.c:check_match.9345 (88x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]

18,264  *  &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;dl-lookup.c:_dl_lookup_symbol_x [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]
38,589  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;dl-lookup.c:do_lookup_x (94x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]

15,836  *  &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;dl-machine.h:_dl_relocate_object
13  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;memmove.c:memcpy@GLIBC_2.2.5 (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
81  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;strcmp.S:strcasecmp (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
6  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;strcmp.S:strncasecmp (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
7  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;memset.S:memset (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
51,501  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;dl-lookup.c:_dl_lookup_symbol_x (86x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]
18  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;..&#x2F;memcpy.S:memcpy (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.17.so]
67  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;time&#x2F;..&#x2F;sysdeps&#x2F;unix&#x2F;sysv&#x2F;linux&#x2F;x86_64&#x2F;time.c:time (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
67  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;time&#x2F;..&#x2F;sysdeps&#x2F;unix&#x2F;sysv&#x2F;linux&#x2F;x86_64&#x2F;gettimeofday.c:gettimeofday (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
6  &amp;gt;   &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;strnlen.S:strnlen (1x) [&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.17.so]
[snip; to be continued]
&lt;&#x2F;pre&gt;
&lt;p&gt;I have trimmed the output to bring focus to the most interesting output
of all, which is the total cost for each line of my code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[continued]
---++++++--
-- User-annotated source: play.c
---++++++--
Ir

.  #include &amp;lt;string.h&amp;gt;
.  #include &amp;lt;errno.h&amp;gt;
.  #include &amp;lt;stdio.h&amp;gt;
.  #include &amp;lt;fcntl.h&amp;gt;
.  #include &amp;lt;unistd.h&amp;gt;
.
.  int
.  main (int argc, char **argv)
5  {
.      char path[0xFF];
.      char content[0xFF];
.      int fd;
.      ssize_t written;
.
2      if (argc &amp;lt; 3) {
.     fprintf (stderr, &amp;quot;usage: %s &amp;lt;filename&amp;gt; &amp;lt;content&amp;gt;n&amp;quot;, argv[0]);
.     return 1;
.      }
.
7      strcpy (path, argv[1]);
21  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;strcpy-sse2-unaligned.S:__strcpy_sse2_unaligned (1x)
799  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;dl-trampoline.S:_dl_runtime_resolve (1x)
8      sprintf (content, &amp;quot;%sn&amp;quot;, argv[2]);
1,188  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;stdio-common&#x2F;sprintf.c:sprintf (1x)
805  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;dl-trampoline.S:_dl_runtime_resolve (1x)
.
5      fd = creat (path, S_IRWXU);
766  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;dl-trampoline.S:_dl_runtime_resolve (1x)
7  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;io&#x2F;..&#x2F;sysdeps&#x2F;unix&#x2F;syscall-template.S:creat (1x)
2      if (fd == -1) {
.     fprintf (stderr, &amp;quot;open error: %s (&#x27;%s&#x27;)n&amp;quot;, strerror (errno), path);
.     return 1;
.      }
.
10      written = write (fd, content, strlen (content));
7  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;io&#x2F;..&#x2F;sysdeps&#x2F;unix&#x2F;syscall-template.S:write (1x)
14  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;string&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;multiarch&#x2F;strlen-sse2-pminub.S:__strlen_sse2_pminub (1x)
1,567  =&amp;gt; &#x2F;build&#x2F;eglibc-TepTGA&#x2F;eglibc-2.17&#x2F;elf&#x2F;..&#x2F;sysdeps&#x2F;x86_64&#x2F;dl-trampoline.S:_dl_runtime_resolve (2x)
2      if (written == -1) {
.     fprintf (stderr, &amp;quot;write error: %s (&#x27;%s&#x27;)n&amp;quot;, strerror (errno), path);
.     return 1;
.      }
1      return 0;
2  }

---++++++--
Ir
---++++++--
0  percentage of events annotated
&lt;&#x2F;pre&gt;
&lt;p&gt;As an aside, note that the indentation is messed up a bit.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Since I normally work at too high a level to care about CPU instructions
cycles at this detail, I found the exercise eye-opening.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>packaging my first Qt app</title>
                <pubDate>Tue, 27 Aug 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/packaging-my-first-qt-app/</link>
                <guid>http://tshepang.net/packaging-my-first-qt-app/</guid>
                <description>&lt;p&gt;Someone asked me to try get some KDE package into Debian. I estimated
that it would take me around 10 hours to get it into good enough shape
before asking some Debian Developer to upload it for me. Here goes some
rough estimates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hour 1&lt;&#x2F;strong&gt;: Find documentation on the subject; I got a few after a
quick search, which include the following:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;developer.ubuntu.com&#x2F;packaging&#x2F;html&quot;&gt;Ubuntu Packaging Guide&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Debian Packaging Tutorial (from Debian package,
&lt;code&gt;packaging-tutorial&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;hour 2-3&lt;&#x2F;strong&gt;: Reading the Debian Packaging Tutorial which led me to
reading &lt;code&gt;dpkg-source&lt;&#x2F;code&gt; manpage, using &lt;code&gt;dh_make&lt;&#x2F;code&gt; to create a &lt;code&gt;debian&#x2F;&lt;&#x2F;code&gt;
skeleton, and modifying the contents of that directory.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;hour 4-6&lt;&#x2F;strong&gt;: Struggling to kill the lintian complaint,
&lt;code&gt;binary-without-manpage&lt;&#x2F;code&gt;. I went as far as reading the source code
(Perl) that performs the check, but that didn&#x27;t help much. I could
have saved hours by looking at the &lt;a href=&quot;http:&#x2F;&#x2F;www.debian.org&#x2F;doc&#x2F;manuals&#x2F;maint-guide&quot;&gt;Debian New Maintainers&#x27; Guide&lt;&#x2F;a&gt;
earlier. I also added &lt;code&gt;export LDFLAGS=-Wl,-z,relro&lt;&#x2F;code&gt; to
&lt;code&gt;debian&#x2F;rules&lt;&#x2F;code&gt; file to kill &lt;code&gt;hardening-no-relro&lt;&#x2F;code&gt; lintian warning.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;hour 7-8&lt;&#x2F;strong&gt;: Determine what dependencies would be needed by
building from a clean chroot (pbuilder). This was with the help of
Debian New Maintainers&#x27; Guide, again.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;hour 9-10&lt;&#x2F;strong&gt;: Reading &lt;a href=&quot;https:&#x2F;&#x2F;wiki.debian.org&#x2F;Hardening&quot;&gt;Debian wiki page on Hardening&lt;&#x2F;a&gt; let me
simplify my packaging further... removing the need to specify
hardening flags explicitly (&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;ksig&#x2F;commits&#x2F;f4c7b60157b79847f918e3d8b24a74e6c5bec929&quot;&gt;commit&lt;&#x2F;a&gt;). I also uploaded the package
to &lt;a href=&quot;http:&#x2F;&#x2F;mentors.debian.net&quot;&gt;http:&#x2F;&#x2F;mentors.debian.net&lt;&#x2F;a&gt;, with the help of &lt;a href=&quot;https:&#x2F;&#x2F;wiki.debian.org&#x2F;DebianMentorsFaq&quot;&gt;DebianMentorsFaq&lt;&#x2F;a&gt;.
(&lt;strong&gt;2014.03 update&lt;&#x2F;strong&gt;: it has since been removed due to lack of
activity)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The resulting package now lives at
&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;ksig&#x2F;src&quot;&gt;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;ksig&#x2F;src&lt;&#x2F;a&gt;. The changes I made, the
actual packaging work, are in &lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;ksig&#x2F;src&#x2F;f4c7b60157b79847f918e3d8b24a74e6c5bec929&#x2F;debian&quot;&gt;this directory&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>challenges facing Python from other languages</title>
                <pubDate>Tue, 23 Jul 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/challenges-facing-python-from-other-languages/</link>
                <guid>http://tshepang.net/challenges-facing-python-from-other-languages/</guid>
                <description>&lt;p&gt;The following four points were made in &lt;a href=&quot;http:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;558172&quot;&gt;this article&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript has become a fairly big competitor in the desktop and
server spaces, and particularly in mobile.&lt;&#x2F;li&gt;
&lt;li&gt;Lua is increasingly used as an embeddable extension language&lt;&#x2F;li&gt;
&lt;li&gt;Go&#x27;s concurrency and ability to create easily deployable binaries
that you can just drop on a system and run.&lt;&#x2F;li&gt;
&lt;li&gt;R&#x27;s statistical and graphic abilities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>project of note: Discourse</title>
                <pubDate>Sat, 11 May 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/project-of-note-discourse/</link>
                <guid>http://tshepang.net/project-of-note-discourse/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.codinghorror.com&#x2F;blog&#x2F;2013&#x2F;02&#x2F;civilized-discourse-construction-kit.html&quot;&gt;The announcement&lt;&#x2F;a&gt; by project lead, Jeff Atwood, sold me. This is one
rather incredible guy, a game changer of sorts, most notable for helping
create what is likely &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&quot;&gt;the most important programming resource on the
web&lt;&#x2F;a&gt;. So whenever he goes and creates something else, I naturally do pay
attention, and this &lt;a href=&quot;http:&#x2F;&#x2F;www.discourse.org&quot;&gt;Discourse&lt;&#x2F;a&gt; thing looks amazing, at least from by
limited usage so far.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>project of note: M cross environment</title>
                <pubDate>Sat, 20 Apr 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/project-of-note-m-cross-environment/</link>
                <guid>http://tshepang.net/project-of-note-m-cross-environment/</guid>
                <description>&lt;p&gt;I spend several hours researching how to build a Qt app (written in C++)
on Debian for users who will run it on Windows. I also wanted it be just
one binary at the end so that deployment is just a matter of copying and
running the one executable. This means I needed to statically-link the
app, and the sad news is that I first needed a statically-linked Qt.&lt;&#x2F;p&gt;
&lt;p&gt;If I had actually known of &lt;a href=&quot;http:&#x2F;&#x2F;mxe.cc&quot;&gt;M cross environment&lt;&#x2F;a&gt; (MXE), I would have
shaved nearly all of those &#x27;wasted&#x27; hours. I am very grateful to the
developers, especially because building Qt was mainly a matter of
installing &lt;a href=&quot;http:&#x2F;&#x2F;mxe.cc&#x2F;#requirements-debian&quot;&gt;a few build dependencies&lt;&#x2F;a&gt; and running &lt;code&gt;make qt&lt;&#x2F;code&gt;. An hour or
two later, I had a newly cross-compiled Qt waiting for my use. It was
also pleasant that the app, in a form of a &lt;code&gt;.exe&lt;&#x2F;code&gt; file, just worked on
Windows 7.&lt;&#x2F;p&gt;
&lt;p&gt;Having a look around, the build system actually looks elegant, and is a
lot simpler than the scary mess that is &lt;a href=&quot;https:&#x2F;&#x2F;live.gnome.org&#x2F;Jhbuild&quot;&gt;JHBuild&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I have published two guides on Stack Overflow on how this works, &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;13211922&#x2F;321731&quot;&gt;one
for Qt 4&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;14170591&#x2F;321731&quot;&gt;another for Qt 5&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-04-05</title>
                <pubDate>Fri, 05 Apr 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-04-05/</link>
                <guid>http://tshepang.net/links-2013-04-05/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I don&#x27;t care much for C#, but &lt;a href=&quot;http:&#x2F;&#x2F;msmvps.com&#x2F;blogs&#x2F;jon_skeet&#x2F;archive&#x2F;2011&#x2F;12&#x2F;05&#x2F;book-review-fluent-c-rebecca-riordan-sams.aspx&quot;&gt;this &#x27;negative&#x27; book review&lt;&#x2F;a&gt; by
&lt;a href=&quot;http:&#x2F;&#x2F;www.yoda.arachsys.com&#x2F;csharp&#x2F;&quot;&gt;a luminary&lt;&#x2F;a&gt; in the .NET community is worthy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;pycon.blip.tv&#x2F;file&#x2F;4880330&#x2F;&quot;&gt;a video&lt;&#x2F;a&gt; on the awesome Disqus commenting system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;people.gnome.org&#x2F;%7Emichael&#x2F;blog&#x2F;2011-06-03-libreoffice-3-4-0.html&quot;&gt;LibreOffice progress&lt;&#x2F;a&gt; is quite impressive.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;journal.dedasys.com&#x2F;2011&#x2F;07&#x2F;25&#x2F;why-i-prefer-text-to-video&quot;&gt;pros of text over video&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.curiousefficiency.org&#x2F;posts&#x2F;2011&#x2F;08&#x2F;scripting-languages-and-suitable.html&quot;&gt;going from simple to complex in teaching&#x2F;learning programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-01-02</title>
                <pubDate>Wed, 02 Jan 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-01-02/</link>
                <guid>http://tshepang.net/links-2013-01-02/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;Go language looks good for web apps:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.kowalczyk.info&#x2F;article&#x2F;4dep&#x2F;Go-vs-Python-for-a-simple-web-server.html&quot;&gt;comparison with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.kowalczyk.info&#x2F;article&#x2F;uvw2&#x2F;Thoughts-on-Go-after-writing-3-websites.html&quot;&gt;evaluation after writing some important apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tech.t9i.in&#x2F;2013&#x2F;01&#x2F;why-program-in-go&#x2F;&quot;&gt;combines elegance of Python with speed of C&#x2F;C++&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The Python import system can be &lt;a href=&quot;http:&#x2F;&#x2F;python-notes.boredomandlaziness.org&#x2F;en&#x2F;latest&#x2F;python_concepts&#x2F;import_traps.html&quot;&gt;a scary beast&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I appreciate this &lt;a href=&quot;http:&#x2F;&#x2F;womble.decadent.org.uk&#x2F;blog&#x2F;whats-in-the-linux-kernel-for-debian-70-wheezy-part-1.html&quot;&gt;summary of the differences&lt;&#x2F;a&gt; between upstream
kernel and one included in Debian; would be nice to get more of
this, and also on other major software included in Debian&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;superuser.com&#x2F;a&#x2F;236605&#x2F;34953&quot;&gt;highest-voted answer&lt;&#x2F;a&gt; I ever gave on &lt;a href=&quot;http:&#x2F;&#x2F;stackexchange.com&#x2F;&quot;&gt;Stack Exchange&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>errors resulting from setting named pipes to be non-blocking</title>
                <pubDate>Sun, 18 Nov 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/errors-resulting-from-setting-named-pipes-to-be-non-blocking/</link>
                <guid>http://tshepang.net/errors-resulting-from-setting-named-pipes-to-be-non-blocking/</guid>
                <description>&lt;p&gt;Using C, I have been writing to named pipes in a non-blocking way and
have been getting a whole bunch of EAGAIN errors. I have spent way too
long on the web trying to find out why, and bumped onto &lt;a href=&quot;http:&#x2F;&#x2F;developerweb.net&#x2F;viewtopic.php?pid=25967#p25967&quot;&gt;this excellent
answer&lt;&#x2F;a&gt;. Looking at the manpage, I see that this would give the same
value as EWOULDBLOCK, which is a far more meaningful name in this case.&lt;&#x2F;p&gt;
&lt;p&gt;This is what will display those errors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;if (write(fd, buffer, strlen(buffer)) == -1)
    fprintf (stderr, &amp;quot;error writing to file &amp;#39;%s&amp;#39;: %s (errno %d)&amp;quot;,
             path, strerror(errno), fd);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is how to avoid them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;if ((write(fd, buffer, strlen(buffer)) == -1) &amp;amp;&amp;amp; (errno != EWOULDBLOCK)) {
    fprintf( stderr, &amp;quot;error writing to file &amp;#39;%s&amp;#39;: %s (errno %d)&amp;quot;,
             path, strerror(errno), fd);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To avoid this kind of confusion, I just wish these two variables did not
refer to the same errno value.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>attachment can lead to irrational behaviour</title>
                <pubDate>Wed, 01 Feb 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/attachment-can-lead-to-irrational-behaviour/</link>
                <guid>http://tshepang.net/attachment-can-lead-to-irrational-behaviour/</guid>
                <description>&lt;p&gt;In &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;me-got-meself-a-coding-job&quot;&gt;my previous job&lt;&#x2F;a&gt;, we used to use some Java framework, &lt;a href=&quot;http:&#x2F;&#x2F;www.mulesoft.org&#x2F;&quot;&gt;Mule ESB&lt;&#x2F;a&gt;,
for our clients. The project is distributed with a lot of jar files,
supposedly for the convenience of users. When we work on a project, we
just add all those jars to the classpath (we use Eclipse, an excessively
powerful and ugly IDE). Now, me being a sucker for the Debian way of
doing things, I&#x27;d install packages providing all those jars from a
Debian repository, then remove those Mule-distributed files, then add
symlinks in place of them pointing back to the actualy files. Imagine
how much time it took! Either that, or even easier (but still
time-consuming), skip the symlink thing entirely and just add those jars
(found in &lt;strong&gt;&#x2F;usr&#x2F;share&#x2F;java&lt;&#x2F;strong&gt; directory) directly.&lt;&#x2F;p&gt;
&lt;p&gt;Beyond just wasting time, the are other potential problems with my
approach:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Debian&#x27;s jar versions did tend to be different to Mule-supplied
versions. You can imagine what problems this can cause, especially
because the versions included there are most likely the ones used
for testing Mule.&lt;&#x2F;li&gt;
&lt;li&gt;Even if the versions were the same, what if there are slight changes
from Debian&#x27;s side. Debian&#x27;s strict &lt;a href=&quot;http:&#x2F;&#x2F;www.debian.org&#x2F;social_contract#guidelines&quot;&gt;software guidelines&lt;&#x2F;a&gt; implies
that they&#x27;ll strip out some stuff that doesn&#x27;t adhere. The good
thing is that Debian appends &lt;code&gt;dfsg&lt;&#x2F;code&gt; to the version number, but &lt;a href=&quot;http:&#x2F;&#x2F;askubuntu.com&#x2F;q&#x2F;11592&#x2F;2591&quot;&gt;not
everybody knows that&lt;&#x2F;a&gt;. And even if they did, they would then need to
spend time checking exactly what changed.&lt;&#x2F;li&gt;
&lt;li&gt;Debian doesn&#x27;t merely re-distribute the jar files. They actually
rebuild them, with Debian-supplied compilers. Maybe this isn&#x27;t an
issue for Java projects, but who knows.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is not to knock the Debian way of doing things. It&#x27;s actually
quite excellent (hence my love), but it can&#x27;t fit all scenarios. See
Matt Zimmerman&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;mdzlog.alcor.net&#x2F;2010&#x2F;07&#x2F;06&#x2F;weve-packaged-all-of-the-free-software-what-now&#x2F;&quot;&gt;excellent post&lt;&#x2F;a&gt;, where he touches on this issue.&lt;&#x2F;p&gt;
&lt;p&gt;I did wise up a bit by simply doing things the way the makers of Mule
intended.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Java gripes</title>
                <pubDate>Wed, 02 Nov 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/java-gripes/</link>
                <guid>http://tshepang.net/java-gripes/</guid>
                <description>&lt;p&gt;Okay, so Java sucks &#x27;a bit&#x27;, but the following surprised me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I struggled to find a way to count the number of elements in an
array. In a string it&#x27;s done thus: &lt;code&gt;&amp;quot;four&amp;quot;.length()&lt;&#x2F;code&gt;. Given that, I
expected that &lt;code&gt;{&#x27;f&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;}.length()&lt;&#x2F;code&gt; would gimme the same
result. Nah! I found that I had to do
&lt;code&gt;new char [] {&#x27;f&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;}.length&lt;&#x2F;code&gt;, and yes, without the
brackets after length. WTF! There might be a good reason for such
(seeming) inconsistency of course, but I&#x27;ve been spoilt by
Python&#x27;s elegant equivalents: &lt;code&gt;len(&amp;quot;four&amp;quot;)&lt;&#x2F;code&gt; and
&lt;code&gt;len([&#x27;f&#x27;,&#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;])&lt;&#x2F;code&gt; which all give the same result.
(sidenote: &lt;code&gt;len()&lt;&#x2F;code&gt; is a Python built-in function, which explains why
there&#x27;s no dot notation there).&lt;&#x2F;li&gt;
&lt;li&gt;The standard library doesn&#x27;t have CSV handling! I had to find an
external library for that!&lt;&#x2F;li&gt;
&lt;li&gt;Given 2 strings, I can&#x27;t do &lt;code&gt;str1==str2&lt;&#x2F;code&gt; for comparison, but am
forced to use the string method, equals: &lt;code&gt;str1.equals(str2)&lt;&#x2F;code&gt;. This
bit me a few times, and am sure am not the only one.&lt;&#x2F;li&gt;
&lt;li&gt;The standard library doesn&#x27;t have &lt;code&gt;.INI&lt;&#x2F;code&gt; file handling (&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;3728823&quot;&gt;Someone
pointed to a 3rd party library&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>cat, Python, and Perl</title>
                <pubDate>Tue, 15 Mar 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/cat-python-and-perl/</link>
                <guid>http://tshepang.net/cat-python-and-perl/</guid>
                <description>&lt;p&gt;I came across &lt;a href=&quot;http:&#x2F;&#x2F;greenteapress.com&#x2F;perl&#x2F;perl.pdf&quot;&gt;a tutorial&lt;&#x2F;a&gt; that showes how to implement a simple cat in
Perl. I&#x27;ve modified their example for the sake of simplicity:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sub cat {
    foreach my $filename (@_) {
        open FILE, $filename;
        while (my $line = &amp;lt;FILE&amp;gt;) {
            print $line;
        }
    }
}
cat @ARGV;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this script (e.g. &lt;code&gt;perl cat.pl file&lt;&#x2F;code&gt;) will display those files
as if you ran &lt;code&gt;cat file&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to see how the Python example would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import sys
def cat(files):
    for filename in files:
        with open(filename) as FILE:
            for line in FILE:
                print(line, end=&amp;quot;&amp;quot;)
cat(sys.argv[1:])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this script (e.g. &lt;code&gt;python3 cat.py file1 file2&lt;&#x2F;code&gt;) will give
exactly the same result as above.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;notes&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;The Perl keyword, &lt;code&gt;my&lt;&#x2F;code&gt;, indicates that the variabe it refers to is
local. Without that, it&#x27;s taken to be global. As for Python, this
is implicit, and depends on where the variable is placed (scope).&lt;&#x2F;li&gt;
&lt;li&gt;Perl has special ways of identifying data types. In our example, &lt;code&gt;$&lt;&#x2F;code&gt;
is used to identify a variable that has a single value, and is known
as a scalar in Perl talk. This can be tedious of course (so much
typing!). In Python, the data fed into the variable is the only
thing that determines what type of the variable it is. I see this as
noise from Perl. It results in some badness, as in you can have two
variables names be the same, but given different types (e.g.
&lt;code&gt;my $var; my @var;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;The upper case file handler, &lt;code&gt;FILE&lt;&#x2F;code&gt;, is a matter of convention for
Perl, and can be named &#x27;anything&#x27;. I used it in the Python sample
only for the sake of clarity.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;&amp;gt;&lt;&#x2F;code&gt; operator is special syntax that means a file is being
manipulated. Python has no such.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;@_&lt;&#x2F;code&gt; is an argument list (&lt;code&gt;@ARGV&lt;&#x2F;code&gt;) from the function call,
&lt;code&gt;cat&lt;&#x2F;code&gt;. This is one other thing that is implicit about Perl, where
you have to learn extra syntax (and concepts), where a simple
argument list should have been provided during the function
declaration, as in Python&#x27;s &lt;code&gt;cat(files)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Note that I didn&#x27;t need to import anything to get Perl to work with
command line arguments. With Python, I need to explicitly do so, and
that&#x27;s via the &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;sys&quot;&gt;sys module&lt;&#x2F;a&gt;, which is part of its standard library.&lt;&#x2F;li&gt;
&lt;li&gt;The Python &lt;code&gt;with&lt;&#x2F;code&gt; statement is meant to make our lives easier, but
also adds syntax to the language. What it does is close a file for
us so we don&#x27;t have to do it.&lt;&#x2F;li&gt;
&lt;li&gt;The Python &lt;code&gt;print()&lt;&#x2F;code&gt; function adds a newline by default, and that
would results in ugly output from our code, that&#x27;s why we used the
&lt;code&gt;end=&amp;quot;&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;[1:]&lt;&#x2F;code&gt; from the last statement in the Python example means that
we are slicing the list, removing the first element (element 0), and
keeping everything else. We do this because the current running
script is considered by Python as element 0, while in Perl, the 1st
element is actually the first thing that appears on the command line
after the script name. One would say that Perl does this more
elegantly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;reference&#x2F;executionmodel&quot;&gt;Python scope&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions#print&quot;&gt;Python print function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;compound_stmts#the-with-statement&quot;&gt;Python with statement&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>splitting strings</title>
                <pubDate>Tue, 01 Feb 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/splitting-strings/</link>
                <guid>http://tshepang.net/splitting-strings/</guid>
                <description>&lt;p&gt;If I have a string with spaces, and wanted to split it into a
list&#x2F;array, I would use this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;a b c&amp;quot;.split()
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]
&lt;&#x2F;pre&gt;
&lt;p&gt;I can go ahead and specify a delimiter (which character the string must
split on):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;string with spaces&amp;quot;.split(&amp;quot; &amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I get the same result:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]
&lt;&#x2F;pre&gt;
&lt;p&gt;But what if my string wasn&#x27;t so forgiving?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;a b  c&amp;quot;.split(&amp;quot; &amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;&#x27;, &#x27;c&#x27;]
&lt;&#x2F;pre&gt;
&lt;p&gt;Not exactly what we want. Leaving the delimiter out gives us the exact
same list as when we had this with a forgiving string.&lt;&#x2F;p&gt;
&lt;p&gt;Anyways, the point is that for a lot of cases, probably a majority, when
one wants to perform a string split, it&#x27;s because they want to delimit
it with spaces. So, Python covers for that common use-case. That&#x27;s a
bit of &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;stdtypes.html#str.split&quot;&gt;magic&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;bugs.python.org&#x2F;issue1367936&quot;&gt;justification&lt;&#x2F;a&gt;) one might take for granted, because
it&#x27;s not available in PHP and Java. I&#x27;m here only going to show Java
examples. PHP examples aren&#x27;t that much different though.&lt;&#x2F;p&gt;
&lt;p&gt;Here goes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import java.util.Arrays;
String[] splitString = &amp;quot;a b  c&amp;quot;.split(&amp;quot; &amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[a, b, , c]
&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s not what we want, so in order to cover for my unforgiving
string, I get to use regular expressions (regexp)?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import java.util.Arrays;
String[] splitString = &amp;quot;string with spaces&amp;quot;.split(&amp;quot; +&amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[a, b, c]
&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;+&lt;&#x2F;code&gt; in the &lt;code&gt;split()&lt;&#x2F;code&gt; method indicates that the match can either be
one or more consecutive spaces.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s not what we want, so in order to cover for my unforgiving
string, I get to use regular expressions (regexp)?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;String[] splitString = &amp;quot;string with spaces&amp;quot;.split(&amp;quot; +&amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[a, b, c]
&lt;&#x2F;pre&gt;
&lt;p&gt;But what if the string was even less forgiving. In this case, having
tabs as well? We need some more regexp help:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import java.util.Arrays;
String[] splitString = &amp;quot;a    bnc&amp;quot;.split(&amp;quot;s+&amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[a, b, c]
&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;s&lt;&#x2F;code&gt; matches any white space.&lt;&#x2F;p&gt;
&lt;p&gt;With Python, I expected the default way to work but it didn&#x27;t, but came
back disappointed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;a    bnc&amp;quot;.split(&amp;quot; &amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[&#x27;at&#x27;, &#x27;bnc&#x27;]
&lt;&#x2F;pre&gt;
&lt;p&gt;Perhaps it&#x27;s a philosophical difference, but it&#x27;s harder to do this
with Python. This is the only thing so that I found easier to achieve in
Java than in Python:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import re
split_string = re.split(&amp;quot;s+&amp;quot;, &amp;quot;a    bnc&amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;...and we finally get what we want:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]
&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>nice review of &#x27;Perl Best Practices&#x27;</title>
                <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/nice-review-of-perl-best-practices/</link>
                <guid>http://tshepang.net/nice-review-of-perl-best-practices/</guid>
                <description>&lt;p&gt;I&#x27;m a sucker for humorous religious allegories:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I always punctuate its disclosure with an outraged &amp;quot;preposterous!&amp;quot;.
Around mid-section, the initial refutation unavoidly [sic] morphs
into a &amp;quot;hmmm, I can see his point.. but it ain&#x27;t for me. It just
doesn&#x27;t jive with my vibes&amp;quot;. By the time I&#x27;ve made it to the end,
however, it is rare indeed that I haven&#x27;t seen the light, donned the
ritual sackcloth and ashes, sworn to atone for my sins and to walk the
straight and narrow [path] from now on.&lt;&#x2F;p&gt;
&lt;p&gt;-- &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20090302221932&#x2F;http:&#x2F;&#x2F;www.oreillynet.com&#x2F;cs&#x2F;catalog&#x2F;view&#x2F;cs_msg&#x2F;79971&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
            </item>
        
            <item>
                <title>Python people vs. Java people</title>
                <pubDate>Tue, 04 May 2010 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/python-people-vs-java-people/</link>
                <guid>http://tshepang.net/python-people-vs-java-people/</guid>
                <description>&lt;p&gt;Now this is one heck of a controversial quote by the best computer
programming blogger in my memory:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;...when you choose a language, you&#x27;re also choosing a community. The
programmers you&#x27;ll be able to hire to work on a Java project won&#x27;t
be as &lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;pypar.html&quot;&gt;smart&lt;&#x2F;a&gt; as the ones you could get to work on a project written
in Python.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
            </item>
        
            <item>
                <title>Python, Perl, and now Java</title>
                <pubDate>Tue, 05 May 2009 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/python-perl-and-now-java/</link>
                <guid>http://tshepang.net/python-perl-and-now-java/</guid>
                <description>&lt;p&gt;I&#x27;m grateful that there&#x27;s so much I&#x27;m learning at &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;me-got-meself-a-coding-job&quot;&gt;my new job&lt;&#x2F;a&gt;, stuff
I wouldn&#x27;t really learn on my own, like Perl (this one out of
curiosity, especially because it&#x27;s a major competitor of my favorite,
Python).&lt;&#x2F;p&gt;
&lt;p&gt;I write this post in response to the fact that now I will be learning
Java, what I secretly swore I&#x27;d stay away from, not because it&#x27;s bad,
but because it&#x27;s hard to find anyone favouring it in my world (Debian,
GNOME, Python), a world that proclaim it to be a disgusting pile of
shit. Anyways let&#x27;s see how the ride will pan out.&lt;&#x2F;p&gt;
&lt;p&gt;As for Perl, I found its string-handling capabilities exceedingly
powerful but its syntax ugly and over-varied +++ too much of a free-form
language. That&#x27;s bad for someone used to the gracious elegance of
mighty Python. If I could stay away from it, I would!&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
