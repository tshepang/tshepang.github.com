<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tshepang logs</title>
        <link>http://tshepang.net</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="http://tshepang.net/tags/python/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 07 Oct 2014 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>links 2014-10-07</title>
                <pubDate>Tue, 07 Oct 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2014-10-07/</link>
                <guid>http://tshepang.net/links-2014-10-07/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.enricozini.org&#x2F;2014&#x2F;debian&#x2F;on-responsibilities&quot;&gt;A nice article&lt;&#x2F;a&gt; on the need for people with different roles in a
single project: manager and craftsman&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;grodola.blogspot.com&#x2F;2014&#x2F;01&#x2F;psutil-20-porting.html&quot;&gt;A nice article&lt;&#x2F;a&gt; on revamping psutil API; it&#x27;s a Python
library that provides easy and cross-platform process control&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.spacemonkey.com&#x2F;blog&#x2F;posts&#x2F;go-space-monkey&quot;&gt;A thorough (and satisfying) article&lt;&#x2F;a&gt; on why Go rocks, as compared
to Python... perhaps the best I&#x27;ve read&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;richardhartmann.de&#x2F;blog&#x2F;posts&#x2F;2013&#x2F;12&#x2F;14-SteamOS&quot;&gt;SteamOS is based on Debian 7 &amp;quot;wheezy&amp;quot;&lt;&#x2F;a&gt;; a Debian win&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-devel-announce&#x2F;2014&#x2F;01&#x2F;msg00006.html&quot;&gt;Debian Developers and Maintainers&lt;&#x2F;a&gt; are given gratis access to play
Valve games; another Debian win&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>discovering Python @decorators</title>
                <pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/discovering-python-decorators/</link>
                <guid>http://tshepang.net/discovering-python-decorators/</guid>
                <description>&lt;p&gt;There is a project at work where I needed to do the same action on
various functions. It&#x27;s basically a checkpoint system where I&#x27;d write
some state to a file, but only when all the functionality in the given
functions executed successfully. It was a one-line change but I thought
it was a good excuse to create decorators for the first time in my life.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example of a decorator function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;def checkpoint(function):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    wrapper(*args, **kwargs):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        with open(PATH) as f:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            for line in f:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                if function.__name__ in line:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                    return
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        value = function(*args, **kwargs)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        with open(PATH, &amp;#39;a+&amp;#39;) as f:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            f.write(function.__name__)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        return value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    return wrapper
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All it does is write some text to a file, and avoid running whatever
function will be &lt;em&gt;decorated&lt;&#x2F;em&gt; by it if there is a match in that file.
This would be an indicator that the function had already been executed
(in a previous run).&lt;&#x2F;p&gt;
&lt;p&gt;The following snippet sees the use of this decorator:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;@checkpoint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;def do_this(some_argument):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    # exit(1) on error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    ...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;@checkpoint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;def do_that(some_other_argument, some_optional_argument=None):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    # exit(1) on error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    ...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;if __name__ == &amp;#39;__main__&amp;#39;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    do_this(&amp;#39;some value&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    do_that(&amp;#39;some other value&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Without the decorator syntax, the same functionality would be achieved
with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;def do_this(some_argument):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    # exit(1) on error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;do_this = checkpoint(do_this)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;def do_that(some_other_argument, some_optional_argument=None):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    # exit(1) on error
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;do_that = checkpoint(do_that)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;if __name__ == &amp;#39;__main__&amp;#39;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    do_this(&amp;#39;some value&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    do_that(&amp;#39;some other value&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The latter format, though it presents less of a cognitive burden, feels
less of an obvious solution, and it&#x27;s a bit uglier as well. &lt;a href=&quot;http:&#x2F;&#x2F;legacy.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0318&quot;&gt;PEP 380&lt;&#x2F;a&gt;
is a detailed discussion written over 10 years ago when the syntax was
first added to the language.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>a better Python</title>
                <pubDate>Sat, 10 May 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/a-better-python/</link>
                <guid>http://tshepang.net/a-better-python/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;neverworkintheory.org&#x2F;2014&#x2F;01&#x2F;29&#x2F;stefik-siebert-syntax&quot;&gt;This post&lt;&#x2F;a&gt; led me to an interesting paper titled &lt;em&gt;An Empirical
Investigation into Programming Language Syntax&lt;&#x2F;em&gt;. Now, since I&#x27;m a
Python sucker, here is what I would change in Python in order to follow
advice from &lt;a href=&quot;http:&#x2F;&#x2F;dl.acm.org&#x2F;authorize?6968137&quot;&gt;that paper&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    before       after
    ------       -----
     !=          not=
      %          mod
   string        text
  try-except  check-error
   finally       always
    raise        alert
     def       procedure
    print       output
   import        use
  int&#x2F;float     number
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The most surprising finding is that both programmers and non-programmers
found &lt;em&gt;while&lt;&#x2F;em&gt; and &lt;em&gt;for&lt;&#x2F;em&gt; not intuitive for looping constructs. The
preferred alternatives are &lt;em&gt;repeat&lt;&#x2F;em&gt; and &lt;em&gt;loop&lt;&#x2F;em&gt;. Of these, I prefer
&lt;em&gt;loop&lt;&#x2F;em&gt;, but it does not read as well as &lt;em&gt;while&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;while count &amp;lt; 3:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    count = action()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop count &amp;lt; 3:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    count = action()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quorum, the language by those responsible for this paper, went with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;repeat while (count &amp;lt; 3)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    count = action()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To mimic that in Python, any of the following two sound fine (I prefer
&lt;em&gt;if&lt;&#x2F;em&gt; to &lt;em&gt;while&lt;&#x2F;em&gt;; less syntax is better):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;repeat if count &amp;lt; 3:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    count = action()

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop if count &amp;lt; 3:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    count = action()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That means an infinite loop would be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop if True:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or for that special case, a shortcut can just be this simple:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I wonder what cycling through items in a container would look like. In
Python, it looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for item in container:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action(item)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This feels as natural as anything, but then again I been doing Python
for a number of years, so the bias could be heavy. Following is an
attempt:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop in range(3):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It mimics this Python syntax, which I actually don&#x27;t like, since we
don&#x27;t always need the items of the container:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for _ in range(3):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quorum, the academic language mentioned above, does it like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;repeat 3 times
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I don&#x27;t like that either; feels contrived. The Python way strikes me as
a good compromise, especially given how general it is. I will try again
with the &lt;em&gt;loop&lt;&#x2F;em&gt; syntax:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop item in container:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action(item)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You have to admit it doesn&#x27;t read as nice as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for item in container:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action(item)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It should be flexible to accommodate more than just one value on each
iteration, so should have an equivalent for this Python code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for index, item in enumerate(container):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action(index, item)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here goes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;loop index, item in enumerate(container):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    action(index, item)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, for the much-loved Python list comprehensions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[procedure(item) for item in container]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We would instead have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[procedure(item) loop item in container]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, apart from being highly-rated for being intuitive, &lt;em&gt;loop&lt;&#x2F;em&gt; also
provides a consistent looping construct, whereas Python has 2, &lt;em&gt;while&lt;&#x2F;em&gt;
and &lt;em&gt;for&lt;&#x2F;em&gt;, both of which received low points in the study. Interesting.&lt;&#x2F;p&gt;
&lt;p&gt;If someone (me?) were to implement these changes to Python, the result
would not be named a Python variant (they are just too drastic), but
more a Python descendent... &lt;strong&gt;a better Python&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>where I live on the web</title>
                <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/where-i-live-on-the-web/</link>
                <guid>http://tshepang.net/where-i-live-on-the-web/</guid>
                <description>&lt;p&gt;I spend perhaps too much of my time online, and these are among the
greatest culprits:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Debian&lt;&#x2F;strong&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;planet.debian.org&#x2F;&quot;&gt;planet Debian&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-devel&quot;&gt;debian-devel&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;&#x2F;strong&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;planet.python.org&#x2F;&quot;&gt;planet Python&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;mail.python.org&#x2F;mailman&#x2F;listinfo&#x2F;python-dev&quot;&gt;python-dev&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tshepang&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;misc&lt;&#x2F;strong&gt;: &lt;a href=&quot;http:&#x2F;&#x2F;stackexchange.com&#x2F;users&#x2F;125744&#x2F;tshepang&quot;&gt;Stack Exchange&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: Brett Cannon</title>
                <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-brett-cannon/</link>
                <guid>http://tshepang.net/developer-of-note-brett-cannon/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sayspy.blogspot.ca&#x2F;2013&#x2F;04&#x2F;a-decade-of-commits.html&quot;&gt;A core CPython developer&lt;&#x2F;a&gt;, Dr. Brett Cannon is among the key people
pushing Python 3 forward, examples being:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;He once developed &lt;a href=&quot;http:&#x2F;&#x2F;py3ksupport.appspot.com&quot;&gt;a site&lt;&#x2F;a&gt; that displayed progress of support by
major Python projects.&lt;&#x2F;li&gt;
&lt;li&gt;He repeatedly gives talks on the topic.&lt;&#x2F;li&gt;
&lt;li&gt;Most recently, he has developed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brettcannon&#x2F;caniusepython3&quot;&gt;a tool that checks which
dependencies of a project lack Python 3 support&lt;&#x2F;a&gt;. It&#x27;s weird that a
tool like this is only available now, over 5 years since Python 3.0
was released.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In addition to that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sayspy.blogspot.ca&#x2F;2012&#x2F;02&#x2F;how-i-bootstrapped-importlib.html&quot;&gt;He keeps improving the Python import system&lt;&#x2F;a&gt;, which is reportedly a
complex beast.&lt;&#x2F;li&gt;
&lt;li&gt;I am grateful that &lt;a href=&quot;http:&#x2F;&#x2F;sayspy.blogspot.ca&#x2F;2009&#x2F;03&#x2F;why-python-is-switching-to-mercurial.html&quot;&gt;he championed the move from Subversion to
Mercurial for CPython development&lt;&#x2F;a&gt;. I held back participating in
CPython development until this move was complete... Subversion is
that painful to use.&lt;&#x2F;li&gt;
&lt;li&gt;He created &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;devguide&quot;&gt;Python Developer&#x27;s Guide&lt;&#x2F;a&gt;, a great guide for those
wishing to help out with core CPython development.&lt;&#x2F;li&gt;
&lt;li&gt;Personally, &lt;a href=&quot;http:&#x2F;&#x2F;sayspy.blogspot.ca&#x2F;2013&#x2F;04&#x2F;why-im-signing-up-for-gittip.html&quot;&gt;he inspired me to take a serious look at Gittip&lt;&#x2F;a&gt;,
resulting in my participation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s a lot more stuff he been doing for Python. Busy, busy guy.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-11-18</title>
                <pubDate>Mon, 18 Nov 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-11-18/</link>
                <guid>http://tshepang.net/links-2013-11-18/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;joey.hess.usesthis.com&quot;&gt;an impressively modest computing (and living) setup&lt;&#x2F;a&gt; - this is
probably the most respected of Debian Developers&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;bugs.debian.org&#x2F;cgi-bin&#x2F;bugreport.cgi?msg=66;att=0;bug=718323&quot;&gt;a nice explanation&lt;&#x2F;a&gt; of why a specific Creative Commons license
isn&#x27;t suitable for Debian (&lt;a href=&quot;http:&#x2F;&#x2F;bugs.debian.org&#x2F;718323&quot;&gt;source&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;since &lt;a href=&quot;http:&#x2F;&#x2F;www.etla.fi&#x2F;en&#x2F;columns&#x2F;worth-brand&quot;&gt;it&#x27;s hard to trust any one of the major brand valuators&lt;&#x2F;a&gt;, I
will have to rely on &lt;a href=&quot;http:&#x2F;&#x2F;www.rankingthebrands.com&quot;&gt;an aggregator&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;rhodesmill.org&#x2F;brandon&#x2F;2012&#x2F;reading-planet-python&quot;&gt;on the limitations of Planet Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;jessenoller.com&#x2F;blog&#x2F;2009&#x2F;02&#x2F;05&#x2F;ssh-programming-with-paramiko-completely-different&quot;&gt;nice paramiko tutorial&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>a bit of benchmarking</title>
                <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/a-bit-of-benchmarking/</link>
                <guid>http://tshepang.net/a-bit-of-benchmarking/</guid>
                <description>&lt;p&gt;I was curious how my home machine performs compared to my work machine.
Each of these have 4 logical processors (and 8GB of RAM), so are sort of
comparable. I also added the &lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;?refcode=25b4887810cc&quot;&gt;DigitalOcean&lt;&#x2F;a&gt; VPS with those specs
(&lt;a href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;pricing&quot;&gt;currently $80 per month&lt;&#x2F;a&gt;) because... why not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;machine-specs&quot;&gt;Machine Specs&lt;&#x2F;h2&gt;
&lt;p&gt;Each machine runs Debian testing (codename &amp;quot;jessie&amp;quot;). Following is the
output of these commands for each machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;uname --all
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;cat &#x2F;proc&#x2F;cpuinfo | sed --quiet &amp;#39;5p&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Home machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Linux thome 3.11-trunk-amd64 #1 SMP Debian 3.11-1~exp1 (2013-09-12) x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;model name      : Intel(R) Core(TM) i5-2410M CPU @ 2.30GHz
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Work machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Linux twork 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;model name      : AMD Phenom(tm) II X4 970 Processor
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;DigitalOcean VPS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Linux tcloud 3.11-1-amd64 #1 SMP Debian 3.11.5-1 (2013-10-17) x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;model name      : QEMU Virtual CPU version 1.0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;cpython-benchmarks&quot;&gt;CPython benchmarks&lt;&#x2F;h2&gt;
&lt;p&gt;I ran two benchmarks, both from the latest VCS version of CPython,
development branch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ hg identify --id --branch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;b6a1a78818fe default
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;build&quot;&gt;Build&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s the command I used:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;make distclean; time (.&#x2F;configure &amp;amp;&amp;amp; make --silent --jobs=4)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;results&quot;&gt;Results&lt;&#x2F;h3&gt;
&lt;p&gt;Home machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    2m11.687s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    3m18.104s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m9.964s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Work machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    2m2.707s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    2m24.200s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m12.280s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;VPS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    2m30.931s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    3m7.272s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m16.592s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;test-suite&quot;&gt;Test suite&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s the command I used:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;time .&#x2F;python -m test --multiprocess=0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;--multiprocess=0&lt;&#x2F;strong&gt; means that there will be 6 tests run in parallel;
that is the number logical cores (4 in my case) + 2 (to avoid waiting
too long for tests which are largely idle)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;results-1&quot;&gt;Results&lt;&#x2F;h3&gt;
&lt;p&gt;Home machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    3m42.571s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    7m13.124s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m33.320s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Work machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    2m29.957s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    4m9.052s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m27.364s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;VPS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    2m19.174s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    5m5.444s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m40.008s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;linux-kernel-build&quot;&gt;Linux kernel build&lt;&#x2F;h2&gt;
&lt;p&gt;Just for kicks, I decided to check how long building Linux would take;
for this, I used latest &#x27;final&#x27; release from Linus&#x27; git tree:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ git log -1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;commit 6e4664525b1db28f8c4e1130957f70a94c19213e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Author: Linus Torvalds &amp;lt;torvalds@linux-foundation.org&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Date:   Mon Sep 2 13:46:10 2013 -0700

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Linux 3.11
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the commands I used:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;make distclean &amp;amp;&amp;amp; make defconfig &amp;amp;&amp;amp; time make
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;results-2&quot;&gt;Results&lt;&#x2F;h3&gt;
&lt;p&gt;Home machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    6m11.622s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    21m2.664s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     1m15.324s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Work machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    2m40.275s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    8m55.624s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     0m42.860s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;VPS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;real    3m41.240s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;user    12m21.120s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sys     1m17.844s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;My work machine is faster than the DigitalOcean offering of comparable
specs, and much faster than my home machine, a laptop.&lt;&#x2F;p&gt;
&lt;p&gt;(&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;556411&#x2F;321731&quot;&gt;detailed explanation of the output&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>projects with excellent documentation</title>
                <pubDate>Sat, 19 Oct 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/projects-with-excellent-documentation/</link>
                <guid>http://tshepang.net/projects-with-excellent-documentation/</guid>
                <description>&lt;p&gt;Here is a list of projects whose documentation I found to be
highly-detailed and well-written.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;big&quot;&gt;big&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;cmgm.stanford.edu&#x2F;classes&#x2F;unix&#x2F;emacs.html&quot;&gt;introductory tutorial of GNU Emacs&lt;&#x2F;a&gt; (looks a lot better when
run from within Emacs), is written in a very gentle and careful way;
it&#x27;s among the best tutorials I&#x27;ve seen. Same applies to &lt;a href=&quot;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;emacs&#x2F;manual&#x2F;html_node&#x2F;emacs&quot;&gt;the
Emacs manual&lt;&#x2F;a&gt;, which I&#x27;m tempted to call the best I&#x27;ve read yet.
It really, really goes into painstaking detail, and seems to have
been written by professional technical writers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&quot;&gt;CPython&lt;&#x2F;a&gt; - this is quite massive, so although quality is generally
high, it varies depending on where you are; &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;collections&quot;&gt;an example of
excellence&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.sqlite.org&#x2F;docs.html&quot;&gt;sqlite3&lt;&#x2F;a&gt; - quite extensive, especially for an embeddable DBMS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;small&quot;&gt;small&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fedorahosted.org&#x2F;suds&#x2F;wiki&#x2F;Documentation&quot;&gt;Suds&lt;&#x2F;a&gt; - multiple, well-written examples&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.nongnu.org&#x2F;rdiff-backup&#x2F;examples.html&quot;&gt;rdiff-backup usage examples&lt;&#x2F;a&gt; - much smaller than the others listed
here, but nevertheless deserves mention because it&#x27;s both gentle
and thorough&lt;&#x2F;li&gt;
&lt;li&gt;While working on giving a product of ours &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;me-got-meself-another-coding-job&quot;&gt;at work&lt;&#x2F;a&gt; the ability to
speak &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Socketcan&quot;&gt;SocketCAN&lt;&#x2F;a&gt;, I really appreciated its &lt;a href=&quot;http:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;Documentation&#x2F;networking&#x2F;can.txt&quot;&gt;official
documentation&lt;&#x2F;a&gt;. It is very well-written and thorough (though it
assumes prior knowledge of working with Linux sockets).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>easing switching between Git and Mercurial</title>
                <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/easing-switching-between-git-and-mercurial/</link>
                <guid>http://tshepang.net/easing-switching-between-git-and-mercurial/</guid>
                <description>&lt;p&gt;Each chance I get, I use Mercurial (e.g. personal stuff), and use Git
when I don&#x27;t have much of a choice (e.g. FLOSS and work). That is, I
use both quite a lot, and too often I find myself running commands for
one while on another&#x27;s repository... error. I therefore decided to
ease the pain my creating &lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;scripts&#x2F;src&#x2F;tip&#x2F;vcs.py&quot;&gt;a script&lt;&#x2F;a&gt; which checks which VCS system I&#x27;m
on, and displays the relevant command.&lt;&#x2F;p&gt;
&lt;p&gt;Some examples of usage:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cd &amp;lt;hg repo&amp;gt;
$ .&#x2F;vcs.py --log
hg log --no-merges --patch --stat --verbose
$ cd &amp;lt;git repo&amp;gt;
$ .&#x2F;vcs.py --log
git log --no-merges --patch --stat
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here are the relevant BASH aliases:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;alias vb=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --branch)&amp;#39;
alias vd=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --diff)&amp;#39;
alias vl=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --log)&amp;#39;
alias vp=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --push)&amp;#39;
alias vs=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --status)&amp;#39;
alias vu=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --pull)&amp;#39;
alias vc=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --commit)&amp;#39;
alias vo=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --checkout)&amp;#39;
alias vr=&amp;#39;$(~&#x2F;scripts&#x2F;vcs.py --revert)&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes my life so much easier, since I no longer have to care which
VCS I&#x27;m on, at least for the most common of commands. I am pleased with
self.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As a sidenote, if you want to cycle between the changesets (Mercurial
term) or Commits (Git term), use the following search term on your pager
(tested with &lt;a href=&quot;http:&#x2F;&#x2F;www.greenwoodsoftware.com&#x2F;less&quot;&gt;less&lt;&#x2F;a&gt;, which is Debian&#x2F;Ubuntu default pager):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(^changeset)|(^commit)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>developer of note: Armin Rigo</title>
                <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-armin-rigo/</link>
                <guid>http://tshepang.net/developer-of-note-armin-rigo/</guid>
                <description>&lt;p&gt;Co-founder and lead developer of arguably the most exciting project in
the Python ecosystem, &lt;a href=&quot;http:&#x2F;&#x2F;pypy.org&quot;&gt;PyPy&lt;&#x2F;a&gt;. He is also credited with doing the bulk of
the work in building its &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;great-praise-for-the-rpython-translation-toolchain&quot;&gt;legendary RPython translation framework&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What inspired this post (originally published 2013-03-31) is the
incredible honor given by the great Raymond Hettinger in &lt;a href=&quot;http:&#x2F;&#x2F;pyvideo.org&#x2F;video&#x2F;1669&#x2F;keynote-3&quot;&gt;one of his
PyCon US 2013 talks&lt;&#x2F;a&gt;, where he deems him &amp;quot;probably the smartest person
I have ever met&amp;quot;. Given that there isn&#x27;t a shortage of brilliance in
the Python community, that&#x27;s some serious kudos.&lt;&#x2F;p&gt;
&lt;p&gt;Also, here is what one of speakers at that conferences said:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;... Armin Rigo is awesome - he&#x27;s perhaps the only incredibly
intelligent person involved with programming I&#x27;ve met who seemed
genuinely happy about life (and not grumpy at all).&lt;&#x2F;p&gt;
&lt;p&gt;-- &lt;a href=&quot;http:&#x2F;&#x2F;ashfall.github.io&#x2F;blog&#x2F;2013&#x2F;03&#x2F;23&#x2F;pycon-2013-down-the-rabbit-hole&quot;&gt;source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-10-04</title>
                <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-10-04/</link>
                <guid>http://tshepang.net/links-2013-10-04/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-project&#x2F;2013&#x2F;08&#x2F;msg00011.html&quot;&gt;a nicely summarised survey of fresh Debian contributors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lists.debian.org&#x2F;debian-gtk-gnome&#x2F;2013&#x2F;09&#x2F;msg00014.html&quot;&gt;excellent response to an unpleasant reply&lt;&#x2F;a&gt; - &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;developer-of-note-michael-biebl&quot;&gt;I admire Michael
Biebl&lt;&#x2F;a&gt;, but don&#x27;t remember him be this harsh&lt;&#x2F;li&gt;
&lt;li&gt;I enjoyed watching &lt;a href=&quot;http:&#x2F;&#x2F;pyvideo.org&#x2F;video&#x2F;2325&#x2F;skyfield-and-15-years-of-bad-apis&quot;&gt;Skyfield and 15 Years of Bad APIs&lt;&#x2F;a&gt;, a far more
interesting talk than the earlier &lt;a href=&quot;http:&#x2F;&#x2F;pyvideo.org&#x2F;video&#x2F;1705&#x2F;api-design-for-library-authors&quot;&gt;API Design for Library Authors&lt;&#x2F;a&gt;.
The former covers API design only in its 2nd half, and the latter is
exclusively all API talk. The former is also more polished than the
latter, both in terms of video editing, and how presentable the
presentation is.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tech.dropbox.com&#x2F;2012&#x2F;12&#x2F;welcome-guido&#x2F;&quot;&gt;great kudos for (the great) Guido van Rossum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.kalzumeus.com&#x2F;2010&#x2F;06&#x2F;17&#x2F;falsehoods-programmers-believe-about-names&quot;&gt;Falsehoods Programmers Believe About Names&lt;&#x2F;a&gt; - interesting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>project of note: Sphinx</title>
                <pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/project-of-note-sphinx/</link>
                <guid>http://tshepang.net/project-of-note-sphinx/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sphinx-doc.org&quot;&gt;Sphinx&lt;&#x2F;a&gt; is a tool that is used to generate documentation from
&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ReStructuredText&quot;&gt;reStructuredText&lt;&#x2F;a&gt; (rST) markup language, and is mainly used in the
Python ecosystem. I honor it much for it is a really powerful system,
and I have come to appreciate it a lot recently, with my work on
documentation of software that falls under the Pylons project.&lt;&#x2F;p&gt;
&lt;p&gt;It is a pity that the markup is not as simple as that of the more
popular &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markdown&quot;&gt;Markdown&lt;&#x2F;a&gt;, but maybe that was out of necessity, since it is far
more advanced: it was initially built as a replacement for the tools
that build CPython documentation, which is quite extensive and needs
lots of rails.&lt;&#x2F;p&gt;
&lt;p&gt;As an example of that power, have a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Pylons&#x2F;pyramid_tutorials&#x2F;commit&#x2F;134190&quot;&gt;these changes I made&lt;&#x2F;a&gt; for
&lt;a href=&quot;http:&#x2F;&#x2F;docs.pylonsproject.org&#x2F;projects&#x2F;pyramid_tutorials&#x2F;en&#x2F;latest&#x2F;&quot;&gt;pyramid_tutorials&lt;&#x2F;a&gt;. In that commit, the feature I used allows you to
include code snippets directly from files, instead of doing the
copy-paste dance, avoiding duplication and rot. This feature is known as
&lt;a href=&quot;http:&#x2F;&#x2F;sphinx-doc.org&#x2F;markup&#x2F;code.html#directive-literalinclude&quot;&gt;literalinclude&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Another feature I recently worked with in the recent past is
&lt;a href=&quot;http:&#x2F;&#x2F;sphinx-doc.org&#x2F;ext&#x2F;intersphinx.html#confval-intersphinx_mapping&quot;&gt;intersphinx_mapping&lt;&#x2F;a&gt;. It allows one to generate references in rST as
if those reference were local. For example, if you wanted to generate a
link to the CPython &lt;code&gt;open()&lt;&#x2F;code&gt; built-in function, you would need only
specify it as &lt;code&gt;:func:open&lt;&#x2F;code&gt;. This is as opposed to finding the actual
link and specifying it normally.&lt;&#x2F;p&gt;
&lt;p&gt;One other feature I discovered (but haven&#x27;t used yet) is &lt;a href=&quot;http:&#x2F;&#x2F;sphinx-doc.org&#x2F;domains.html#info-field-lists&quot;&gt;Info field
lists&lt;&#x2F;a&gt; feature. To see it in action, visit &lt;a href=&quot;https:&#x2F;&#x2F;postgres-py.readthedocs.org&#x2F;en&#x2F;latest&#x2F;#postgres.Postgres.run&quot;&gt;this link&lt;&#x2F;a&gt;, and then look at
&lt;a href=&quot;https:&#x2F;&#x2F;postgres-py.readthedocs.org&#x2F;en&#x2F;latest&#x2F;_modules&#x2F;postgres.html#Postgres.run&quot;&gt;its markup&lt;&#x2F;a&gt;. It&#x27;s gorgeous!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>challenges facing Python from other languages</title>
                <pubDate>Tue, 23 Jul 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/challenges-facing-python-from-other-languages/</link>
                <guid>http://tshepang.net/challenges-facing-python-from-other-languages/</guid>
                <description>&lt;p&gt;The following four points were made in &lt;a href=&quot;http:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;558172&quot;&gt;this article&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript has become a fairly big competitor in the desktop and
server spaces, and particularly in mobile.&lt;&#x2F;li&gt;
&lt;li&gt;Lua is increasingly used as an embeddable extension language&lt;&#x2F;li&gt;
&lt;li&gt;Go&#x27;s concurrency and ability to create easily deployable binaries
that you can just drop on a system and run.&lt;&#x2F;li&gt;
&lt;li&gt;R&#x27;s statistical and graphic abilities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: Barry Warsaw</title>
                <pubDate>Tue, 28 May 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-barry-warsaw/</link>
                <guid>http://tshepang.net/developer-of-note-barry-warsaw/</guid>
                <description>&lt;p&gt;This guy, both an official Ubuntu developer and a core &lt;a href=&quot;http:&#x2F;&#x2F;python.org&quot;&gt;CPython&lt;&#x2F;a&gt;
developer, is a great example of a FLOSS collaborator. He is always
polite on mailing list discussions, kindly and &lt;a href=&quot;https:&#x2F;&#x2F;lists.debian.org&#x2F;debian-devel&#x2F;2013&#x2F;05&#x2F;msg01357.html&quot;&gt;patiently helps foster
collaboration between Debian and Ubuntu&lt;&#x2F;a&gt; (there&#x27;s been some conflicts
between the two camps). This is on top of his superb technical efforts
demonstrated by his highly-detailed guides on various things, like
upgrading various Python projects to run on Python 3 (&lt;a href=&quot;http:&#x2F;&#x2F;www.wefearchange.org&#x2F;2012&#x2F;01&#x2F;debian-package-for-python-2-and-3.html&quot;&gt;example 1&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;www.wefearchange.org&#x2F;2012&#x2F;01&#x2F;python-3-porting-fun-redux.html&quot;&gt;example 2&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;www.wefearchange.org&#x2F;2011&#x2F;12&#x2F;lessons-in-porting-to-python-3.html&quot;&gt;example 3&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: Nick Coghlan</title>
                <pubDate>Tue, 28 May 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-nick-coghlan/</link>
                <guid>http://tshepang.net/developer-of-note-nick-coghlan/</guid>
                <description>&lt;p&gt;This is easily among the most active of all core CPython developers. His
productivity is ridiculous, and I seriously wonder how he manages to do
all he does, especially since &lt;a href=&quot;http:&#x2F;&#x2F;mail.python.org&#x2F;pipermail&#x2F;python-ideas&#x2F;2012-February&#x2F;014139.html&quot;&gt;he does it in his free time&lt;&#x2F;a&gt;. He also
tends to be quite stern, which is extra kool since he does it while
displaying &lt;a href=&quot;http:&#x2F;&#x2F;mail.python.org&#x2F;pipermail&#x2F;python-ideas&#x2F;2012-February&#x2F;013835.html&quot;&gt;great depth of knowledge&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;hg.python.org&#x2F;peps&#x2F;rev&#x2F;8a6e3b28dbef&quot;&gt;maturity&lt;&#x2F;a&gt;. Also, his great
work has been &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;community&#x2F;awards&#x2F;psf-awards&#x2F;#september-2011&quot;&gt;officially recognized by the Python Software Foundation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The first work that prompted this recognition as &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;tags&#x2F;developer-of-note&quot;&gt;developer of note&lt;&#x2F;a&gt; is
the proposal, &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0413&#x2F;&quot;&gt;PEP 413&lt;&#x2F;a&gt;. The idea is that the Python standard library
(stdlib) should release at a quicker rate than the Python language
itself. This is a nice balance between two camps: those favoring
&lt;em&gt;stability&lt;&#x2F;em&gt; over quicker availability of features, and those favoring
the opposite. The PEP (Python Enhancement Proposal) is quite thorough,
and is partly in opposition to the earlier &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0407&quot;&gt;PEP 407&lt;&#x2F;a&gt;, which proposes
that all of CPython (the language and its stdlib) should release faster.
Nick Coghlan outlines the disadvantages with that approach in PEP 413 as
well.&lt;&#x2F;p&gt;
&lt;p&gt;Another PEP he is working on is &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0432&quot;&gt;PEP 432&lt;&#x2F;a&gt;. Titled &lt;em&gt;Simplifying the
CPython startup sequence&lt;&#x2F;em&gt;, it&#x27;s a highly detailed proposal to
re-organise some of CPython code to ease maintenance. His deep knowledge
on the project&#x27;s internals is also on display.&lt;&#x2F;p&gt;
&lt;p&gt;Nick also builds and maintains a collection of notes known simply as
&lt;a href=&quot;http:&#x2F;&#x2F;python-notes.boredomandlaziness.org&#x2F;en&#x2F;latest&#x2F;index.html&quot;&gt;Nick Coghlan&#x27;s Python Notes&lt;&#x2F;a&gt;. There is much wisdom there (complete
with high quality clear writing), favorite of which is the just-updated
&lt;a href=&quot;http:&#x2F;&#x2F;python-notes.boredomandlaziness.org&#x2F;en&#x2F;latest&#x2F;pep_ideas&#x2F;core_packaging_api.html#incremental-plans-to-improve-python-packaging&quot;&gt;Incremental Plans to Improve Python Packaging&lt;&#x2F;a&gt;, a thorough write-up on
the history, current state, and future plans regarding the story of
packaging (and installation) in the Python ecosystem. He also happens to
be a great champion in pushing for progress on that front.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>my current plans for wajig</title>
                <pubDate>Mon, 27 May 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/my-current-plans-for-wajig/</link>
                <guid>http://tshepang.net/my-current-plans-for-wajig/</guid>
                <description>&lt;p&gt;Some stuff I might work on in future:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I want to start using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kislyuk&#x2F;argcomplete&quot;&gt;argcomplete&lt;&#x2F;a&gt; at some point, a more dynamic
shell completion tool, replacing the current hand-rolled solution. I
find shell programming hard, and argcomplete, which is inspired by
&lt;a href=&quot;http:&#x2F;&#x2F;furius.ca&#x2F;optcomplete&#x2F;&quot;&gt;optcomplete&lt;&#x2F;a&gt;, is a brilliant workaround.&lt;&#x2F;li&gt;
&lt;li&gt;Someone asked me to restore gjig, the GUI tool that &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;wajig-2-1-released&quot;&gt;I removed from
wajig&lt;&#x2F;a&gt; some releases ago. This will be an opportunity to learn GTK+
again. I did a bit of it, even contributing patches (&lt;a href=&quot;http:&#x2F;&#x2F;projects.gnome.org&#x2F;tracker&#x2F;&quot;&gt;Tracker
project&lt;&#x2F;a&gt;), but was never quite confident. It&#x27;s very likely that I
won&#x27;t work on this... too much work.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But ultimately, I would love for the standard Debian packaging tools to
get the point where they make wajig irrelevant. After all, wajig was
created to be a wrapper that helps ease the mess.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Here&#x27;s the work I did in the past working on wajig, have a look at &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;tags&#x2F;wajig&quot;&gt;its
tag&lt;&#x2F;a&gt;. Off the top of my head:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;improved, simplified packaging&lt;&#x2F;li&gt;
&lt;li&gt;port to Python 3&lt;&#x2F;li&gt;
&lt;li&gt;port to argparse (from getopt), which also meant proper handling of
subcommands&lt;&#x2F;li&gt;
&lt;li&gt;increased usage of python-apt, instead of hand-crafted (and ugly)
code&lt;&#x2F;li&gt;
&lt;li&gt;a few feature additions&lt;&#x2F;li&gt;
&lt;li&gt;(lots of) modernising the code&lt;&#x2F;li&gt;
&lt;li&gt;(lots of) cleaning up&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And over 800 commits later, I am glad.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>shutil.which() rocks</title>
                <pubDate>Sun, 26 May 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/shutil-which-rocks/</link>
                <guid>http://tshepang.net/shutil-which-rocks/</guid>
                <description>&lt;p&gt;Unix&#x2F;Linux systems have a simple (but useful) tool named which, whose
main purpose is to indicate where in the filesystem a particular
executable is installed. This functionality was added in Python 3.3, and
though simple, I was looking forward to its availability in Debian, just
so I could replace wajig&#x27;s own equivalent functionality, which only
checked for file presence, and was hard-coded and therefore inflexible.
&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;shutil#shutil.which&quot;&gt;shutil.which()&lt;&#x2F;a&gt;, OTOH, looks for the given executable name in user&#x27;s
PATH and is more thorough, since it also checks if the executable name
points to something that is actually executable. So, making use of this
new function resulted in code that is both more robust and &lt;a href=&quot;https:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;wajig&#x2F;source&#x2F;detail?r=e419e439e47f880ab17f6394e3faaa8ce3b15fe1&quot;&gt;cleaner&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As a sidenote, this functionality &lt;a href=&quot;http:&#x2F;&#x2F;bugs.python.org&#x2F;issue444582&quot;&gt;was first proposed in 2001&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-05-11</title>
                <pubDate>Sat, 11 May 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-05-11/</link>
                <guid>http://tshepang.net/links-2013-05-11/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hg.python.org&#x2F;cpython&#x2F;rev&#x2F;d5ef330bac50&quot;&gt;Python interpreter finally gets tab completion by default&lt;&#x2F;a&gt;; to see
wide use, this will have to wait for 3.4 release, &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0429&quot;&gt;which will only
arrive early 2014&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I submitted &lt;a href=&quot;http:&#x2F;&#x2F;debbugs.gnu.org&#x2F;cgi&#x2F;bugreport.cgi?bug=14355&quot;&gt;my first bug report for Emacs&lt;&#x2F;a&gt;, perhaps my first ever
to a pure GNU project; I say this because GNOME claims to be one,
but it&#x27;s really only by name.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.pypy.org&#x2F;performance.html&quot;&gt;Excellent guide on improving Python performance&lt;&#x2F;a&gt;; it&#x27;s written
with PyPy in mind, but has excellent generic advice.&lt;&#x2F;li&gt;
&lt;li&gt;I enjoyed &lt;a href=&quot;http:&#x2F;&#x2F;thechangelog.com&#x2F;86&quot;&gt;this podcast&lt;&#x2F;a&gt; where Jeff Atwood talks about his new
project, &lt;a href=&quot;http:&#x2F;&#x2F;www.discourse.org&quot;&gt;Discourse&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>am joining Gittip</title>
                <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/am-joining-gittip/</link>
                <guid>http://tshepang.net/am-joining-gittip/</guid>
                <description>&lt;p&gt;In &lt;a href=&quot;http:&#x2F;&#x2F;sayspy.blogspot.com&#x2F;2013&#x2F;04&#x2F;why-im-signing-up-for-gittip.html&quot;&gt;Why I&#x27;m signing up for Gittip&lt;&#x2F;a&gt;, a core CPython commiter, Brett
Cannon, mentions a great reason to reward FLOSS contributors
financially:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;... a way for the community to thank someone&#x27;s family for letting
them share their loved one with open source. For instance, tips for me
would be a way of thanking my wife for letting me spend the hours I do
contributing to Python in my various ways by letting me treat my wife
to a night out so neither of us has to cook.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;He inspired me to actually go find a bit more about this &lt;a href=&quot;https:&#x2F;&#x2F;www.gittip.com&quot;&gt;Gittip&lt;&#x2F;a&gt; thing,
after which &lt;a href=&quot;https:&#x2F;&#x2F;www.gittip.com&#x2F;tshepang&quot;&gt;I decided to participate&lt;&#x2F;a&gt; as well.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of money, I previously fooled around with &lt;a href=&quot;http:&#x2F;&#x2F;flattr.com&quot;&gt;flattr&lt;&#x2F;a&gt; too, but
stopped along the way for some reason (after a few months), so will see
how long this one relationship lasts.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>me likes subprocess.DEVNULL</title>
                <pubDate>Thu, 11 Apr 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/me-likes-subprocess-devnull/</link>
                <guid>http://tshepang.net/me-likes-subprocess-devnull/</guid>
                <description>&lt;p&gt;If you want to run an external process from within Python, and are not
interested in any errors that process may emit, there are a few ways you
can go about it. I will demonstrate this by opening a Python shell in a
directory that isn&#x27;t version-controlled by &lt;a href=&quot;http:&#x2F;&#x2F;mercurial.selenic.com&quot;&gt;Mercurial&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;So, we don&#x27;t want to see this ugliness:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;from subprocess import call &amp;gt;&amp;gt;&amp;gt; call(&#x27;hg
status&#x27;.split()) abort: no repository found in
&#x27;&#x2F;home&#x2F;tshepang&#x2F;projects&#x2F;pyramid&#x27; (.hg not found)! 255&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;So, here&#x27;s the simplest solution:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os &amp;gt;&amp;gt;&amp;gt; from subprocess import call &amp;gt;&amp;gt;&amp;gt; call(&#x27;hg
status&#x27;.split(), stderr=open(os.devnull)) 255&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Problem: it leaves the file descriptor open... not good.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We fix:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os &amp;gt;&amp;gt;&amp;gt; from subprocess import call &amp;gt;&amp;gt;&amp;gt; DEVNULL =
open(os.devnull) &amp;gt;&amp;gt;&amp;gt; call(&#x27;hg status&#x27;.split(), stderr=DEVNULL)
255 &amp;gt;&amp;gt;&amp;gt; DEVNULL.close()&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Much better, much uglier. (&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;scripts&#x2F;src&#x2F;tip&#x2F;vcs.py&quot;&gt;example usage&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Something better:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os &amp;gt;&amp;gt;&amp;gt; from subprocess import call &amp;gt;&amp;gt;&amp;gt; with
open(os.devnull) as DEVNULL: ... call(&#x27;hg status&#x27;.split(),
stderr=DEVNULL) 255&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Looks much nicer, and is more convenient, unless we wanted to do
something similar multiple times, in which case the previous example
would be preferable.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Best solution:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;import os &amp;gt;&amp;gt;&amp;gt; from subprocess import call, DEVNULL &amp;gt;&amp;gt;&amp;gt;
call(&#x27;hg status&#x27;.split(), stderr=DEVNULL) 255&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This &lt;a href=&quot;http:&#x2F;&#x2F;hg.python.org&#x2F;cpython&#x2F;rev&#x2F;eaf93e156dff&quot;&gt;small and wonderful feature&lt;&#x2F;a&gt; is &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;whatsnew&#x2F;3.3.html#subprocess&quot;&gt;new as of Python 3.3&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-04-05</title>
                <pubDate>Fri, 05 Apr 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-04-05/</link>
                <guid>http://tshepang.net/links-2013-04-05/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I don&#x27;t care much for C#, but &lt;a href=&quot;http:&#x2F;&#x2F;msmvps.com&#x2F;blogs&#x2F;jon_skeet&#x2F;archive&#x2F;2011&#x2F;12&#x2F;05&#x2F;book-review-fluent-c-rebecca-riordan-sams.aspx&quot;&gt;this &#x27;negative&#x27; book review&lt;&#x2F;a&gt; by
&lt;a href=&quot;http:&#x2F;&#x2F;www.yoda.arachsys.com&#x2F;csharp&#x2F;&quot;&gt;a luminary&lt;&#x2F;a&gt; in the .NET community is worthy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;pycon.blip.tv&#x2F;file&#x2F;4880330&#x2F;&quot;&gt;a video&lt;&#x2F;a&gt; on the awesome Disqus commenting system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;people.gnome.org&#x2F;%7Emichael&#x2F;blog&#x2F;2011-06-03-libreoffice-3-4-0.html&quot;&gt;LibreOffice progress&lt;&#x2F;a&gt; is quite impressive.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;journal.dedasys.com&#x2F;2011&#x2F;07&#x2F;25&#x2F;why-i-prefer-text-to-video&quot;&gt;pros of text over video&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.curiousefficiency.org&#x2F;posts&#x2F;2011&#x2F;08&#x2F;scripting-languages-and-suitable.html&quot;&gt;going from simple to complex in teaching&#x2F;learning programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: Vinay Sajip</title>
                <pubDate>Sun, 31 Mar 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-vinay-sajip/</link>
                <guid>http://tshepang.net/developer-of-note-vinay-sajip/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;plumberjack.blogspot.com&#x2F;&quot;&gt;Vinay Sajip&lt;&#x2F;a&gt; is the maintainer of &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;logging&quot;&gt;logging&lt;&#x2F;a&gt;, a Python logging
library&#x2F;module, available in the standard library. What prompted this
post is his tireless improvements, not just to the software itself, but
also the documentation surrounding it (&lt;a href=&quot;http:&#x2F;&#x2F;plumberjack.blogspot.com&#x2F;2011&#x2F;04&#x2F;logging-documentation-for-python-27.html&quot;&gt;example&lt;&#x2F;a&gt;). It&#x27;s all the more
impressive that he continuously blogs about various ways to use the
module, and maintains &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;howto&#x2F;logging-cookbook&quot;&gt;a bunch of nuggets on advanced usage&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One early event, which is likely the first time I noticed him, is the
time when he rebutted some apparently inaccurate claims against the
module, at which he responded in a &lt;a href=&quot;http:&#x2F;&#x2F;plumberjack.blogspot.com&#x2F;2010&#x2F;09&#x2F;python-logging-functionality-facts-vs.html&quot;&gt;highly-detailed post&lt;&#x2F;a&gt;, which that
lent credence to the module. This inspired me to give it a try, and
&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;howto&#x2F;logging.html&quot;&gt;it&#x27;s not that hard&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s one other project he works on, &lt;a href=&quot;http:&#x2F;&#x2F;sarge.readthedocs.org&quot;&gt;sarge&lt;&#x2F;a&gt;, which is like
&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;subprocess&quot;&gt;subprocess&lt;&#x2F;a&gt; on steroids. Have a look at &lt;a href=&quot;http:&#x2F;&#x2F;sarge.readthedocs.org&#x2F;en&#x2F;latest&#x2F;overview.html#why-not-just-use-subprocess&quot;&gt;why he created it&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Lately, he is working on &lt;a href=&quot;https:&#x2F;&#x2F;distlib.readthedocs.org&#x2F;en&#x2F;latest&#x2F;&quot;&gt;distlib&lt;&#x2F;a&gt;, a library which implements low-level
functions that relate to packaging and distribution of Python software.
This excites me a lot since it&#x27;s a key piece in the latest attempt at
fixing Python packaging once and for all.&lt;&#x2F;p&gt;
&lt;p&gt;On top of all this, he is very active on Stack Overflow, having answered
&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;users&#x2F;118903&#x2F;vinay-sajip?tab=answers&quot;&gt;hundreds of questions&lt;&#x2F;a&gt; there. Amazing!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-03-24</title>
                <pubDate>Sun, 24 Mar 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-03-24/</link>
                <guid>http://tshepang.net/links-2013-03-24/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.bash.org&#x2F;?244321&quot;&gt;great IRC humor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.impressivewebs.com&#x2F;css-white-space&#x2F;&quot;&gt;nice CSS white-space explanation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;an &lt;a href=&quot;http:&#x2F;&#x2F;simeonfranklin.com&#x2F;blog&#x2F;2013&#x2F;mar&#x2F;17&#x2F;my-pycon-2013-poster&#x2F;&quot;&gt;interesting chart&lt;&#x2F;a&gt; on the pain beginners may feel when trying to
use Python for particular tasks&lt;&#x2F;li&gt;
&lt;li&gt;writing a solid feed reader &lt;a href=&quot;http:&#x2F;&#x2F;inessential.com&#x2F;2013&#x2F;03&#x2F;18&#x2F;brians_stupid_feed_tricks&quot;&gt;is not a joke&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;www.marco.org&#x2F;2013&#x2F;03&#x2F;19&#x2F;free-works&quot;&gt;via&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;I got deeply excited as I read about &lt;a href=&quot;http:&#x2F;&#x2F;www.linuxfromscratch.org&#x2F;hints&#x2F;downloads&#x2F;files&#x2F;more_control_and_pkg_man.txt&quot;&gt;a nice scheme of manual
package management&lt;&#x2F;a&gt;, one of the many &lt;a href=&quot;http:&#x2F;&#x2F;www.linuxfromscratch.org&#x2F;hints&#x2F;list.html&quot;&gt;LFS hints&lt;&#x2F;a&gt;. I am looking
forward to the challenge (which may result in me ditching Debian for
home use).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-03-14</title>
                <pubDate>Thu, 14 Mar 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-03-14/</link>
                <guid>http://tshepang.net/links-2013-03-14/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;each feature release of Python comes with a great amount of changes,
but I was particularly impressed by &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;whatsnew&#x2F;3.2&quot;&gt;those of 3.2&lt;&#x2F;a&gt;; the latest such
release &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;whatsnew&#x2F;3.3&quot;&gt;isn&#x27;t too shabby either&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the all-important factor of success in business... &lt;a href=&quot;http:&#x2F;&#x2F;blog.kowalczyk.info&#x2F;article&#x2F;ahcj&#x2F;Easy-vs-probable-or-how-to-make-money-with-softw.html&quot;&gt;luck&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;one interesting way of measuring Python 3 adoption is download
numbers: &lt;a href=&quot;http:&#x2F;&#x2F;blog.briancurtin.com&#x2F;posts&#x2F;the-year-of-the-snake.html&quot;&gt;0.8 million out of a total of 2 million&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;another sad case of Ubuntu diverging from GNOME... &lt;a href=&quot;http:&#x2F;&#x2F;debarshiray.wordpress.com&#x2F;2012&#x2F;10&#x2F;06&#x2F;goa-why-it-is-the-way-it-is&#x2F;&quot;&gt;Online
Accounts&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;blog.yorba.org&#x2F;jim&#x2F;2013&#x2F;02&#x2F;the-garden-of-the-forking-paths.html&quot;&gt;via&lt;&#x2F;a&gt;); as the author of that quality post says, they may
have good reasons for this; it&#x27;s just that it looks bad on the
surface&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;meta.stackoverflow.com&#x2F;a&#x2F;67891&#x2F;147166&quot;&gt;a detailed defense&lt;&#x2F;a&gt; on the choice of technology for Stack Exchange
chat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>on growing up</title>
                <pubDate>Fri, 01 Mar 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/on-growing-up/</link>
                <guid>http://tshepang.net/on-growing-up/</guid>
                <description>&lt;p&gt;Enjoyed this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Martijn Faassen used to ask us &amp;quot;how fast is PyPy&amp;quot; so we decided to
name an option enabling all optimizations &amp;quot;--faassen&amp;quot;. Then
&amp;quot;--no-faassen&amp;quot; was naturally added too. Later we decided to grow up
and renamed it to &amp;quot;-O2&amp;quot;, and now &amp;quot;-Ojit&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;-- &lt;a href=&quot;http:&#x2F;&#x2F;morepypy.blogspot.com&#x2F;2013&#x2F;02&#x2F;10-years-of-pypy.html&quot;&gt;a summary of 10 years of PyPy history&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Amazing energy and intellectual prowess the project participants
possess, and &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;great-praise-for-the-rpython-translation-toolchain&quot;&gt;a very respectable project&lt;&#x2F;a&gt; at that.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>great praise for the RPython translation toolchain</title>
                <pubDate>Tue, 12 Feb 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/great-praise-for-the-rpython-translation-toolchain/</link>
                <guid>http://tshepang.net/great-praise-for-the-rpython-translation-toolchain/</guid>
                <description>&lt;p&gt;The highly-detailed article is about the adventures of building a
language VM using the &lt;a href=&quot;http:&#x2F;&#x2F;tratt.net&#x2F;laurie&#x2F;blog&#x2F;entries&#x2F;fast_enough_vms_in_fast_enough_time&quot;&gt;RPython toolchain&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: Jeff Forcier</title>
                <pubDate>Tue, 15 Jan 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-jeff-forcier/</link>
                <guid>http://tshepang.net/developer-of-note-jeff-forcier/</guid>
                <description>&lt;p&gt;The strength of character that &lt;a href=&quot;http:&#x2F;&#x2F;bitprophet.org&#x2F;about&#x2F;index.html&quot;&gt;Jeff &#x27;bitprophet&#x27; Forcier&lt;&#x2F;a&gt; possesses
is admirable. He is the lead developer of &lt;a href=&quot;http:&#x2F;&#x2F;fabfile.org&quot;&gt;fabric&lt;&#x2F;a&gt;, the most popular
deployment tool written in Python. I honor him here due to how he
handled the issues with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;paramiko&#x2F;paramiko&quot;&gt;paramiko&lt;&#x2F;a&gt;, the library that fabric uses
heavily. He had to make tough decisions, like embedding that library in
fabric source (due to various issues), and even forking it. All of this
of course involved a lot of work and discussing, and thankfully at the
end, the original &#x27;owner&#x27; of that indispensable piece of software
relented and transferred it to this bitprophet character. This means
Jeff now runs 2 of the most important tools in all of the Python
world... &lt;a href=&quot;http:&#x2F;&#x2F;bitprophet.org&#x2F;blog&#x2F;2012&#x2F;09&#x2F;29&#x2F;paramiko-and-ssh&#x2F;&quot;&gt;more of the gory details&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2013-01-02</title>
                <pubDate>Wed, 02 Jan 2013 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2013-01-02/</link>
                <guid>http://tshepang.net/links-2013-01-02/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;Go language looks good for web apps:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.kowalczyk.info&#x2F;article&#x2F;4dep&#x2F;Go-vs-Python-for-a-simple-web-server.html&quot;&gt;comparison with Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.kowalczyk.info&#x2F;article&#x2F;uvw2&#x2F;Thoughts-on-Go-after-writing-3-websites.html&quot;&gt;evaluation after writing some important apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tech.t9i.in&#x2F;2013&#x2F;01&#x2F;why-program-in-go&#x2F;&quot;&gt;combines elegance of Python with speed of C&#x2F;C++&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;The Python import system can be &lt;a href=&quot;http:&#x2F;&#x2F;python-notes.boredomandlaziness.org&#x2F;en&#x2F;latest&#x2F;python_concepts&#x2F;import_traps.html&quot;&gt;a scary beast&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I appreciate this &lt;a href=&quot;http:&#x2F;&#x2F;womble.decadent.org.uk&#x2F;blog&#x2F;whats-in-the-linux-kernel-for-debian-70-wheezy-part-1.html&quot;&gt;summary of the differences&lt;&#x2F;a&gt; between upstream
kernel and one included in Debian; would be nice to get more of
this, and also on other major software included in Debian&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;superuser.com&#x2F;a&#x2F;236605&#x2F;34953&quot;&gt;highest-voted answer&lt;&#x2F;a&gt; I ever gave on &lt;a href=&quot;http:&#x2F;&#x2F;stackexchange.com&#x2F;&quot;&gt;Stack Exchange&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>links 2012-10-23</title>
                <pubDate>Tue, 23 Oct 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2012-10-23/</link>
                <guid>http://tshepang.net/links-2012-10-23/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I did not expect &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;11942654&#x2F;321731&quot;&gt;this question of mine&lt;&#x2F;a&gt; to be loved so much. In
fact, I thought it would see some resistance, due to so many
Python-related threading&#x2F;multiprocessing questions on Stack
Overflow, such that it might be closed as a duplicate.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;people.gnome.org&#x2F;%7Emichael&#x2F;blog&#x2F;2012-08-08-libreoffice-3-6-0.html&quot;&gt;This blog post&lt;&#x2F;a&gt; makes me wanna contribute to LibreOffice, which is
made even more appealing by fact that I&#x27;m using the language a lot
&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;me-got-meself-another-coding-job&quot;&gt;at work&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It is a sad fact that for large Python codebases, the pain of
porting to Python 3 is quite high. Here&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;vperic.blogspot.com&#x2F;2012&#x2F;08&#x2F;bootstrapping-trial-in-python-3.html&quot;&gt;an example for Twisted&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I am a fan of &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;dev&#x2F;library&#x2F;argparse&quot;&gt;argparse&lt;&#x2F;a&gt;, but &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;docopt&#x2F;docopt&quot;&gt;this specific CLI parsing library&lt;&#x2F;a&gt;
takes an interesting direction.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.codinghorror.com&#x2F;blog&#x2F;2012&#x2F;10&#x2F;judging-websites.html&quot;&gt;great web app design advice&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>matplotlib rocks</title>
                <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/matplotlib-rocks/</link>
                <guid>http://tshepang.net/matplotlib-rocks/</guid>
                <description>&lt;p&gt;Have a look at this code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;matplotlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pyplot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;random

x_axis = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x_axis, random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;))
pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x_axis, random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;))
pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.org&quot;&gt;matplolib&lt;&#x2F;a&gt; installed, running the code above should resulted in
the following image:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;matplotlib-1.png&quot; alt=&quot;image resulting from running the code above&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You will notice that there&#x27;s 2 graphs drawn over the same axis, nothing
special. What I really loved about matplotlib is that I did not need to
specify what colors to use for any of the graphs (&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;plotting-with-matplotlib&quot;&gt;as I did
previously&lt;&#x2F;a&gt;). The colors were chosen automatically. It was helpful
especially in my case because I needed a way to specify an arbitrary
number of graphs. Without this magical feature, the code would be a lot
uglier.&lt;&#x2F;p&gt;
&lt;p&gt;Here goes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;matplotlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pyplot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;argparse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;random

parser = argparse.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ArgumentParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
parser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number_of_graphs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=int)
args = parser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()

x_axis = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(args.number_of_graphs):
pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;plot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(x_axis, random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(n))
pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;legend&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If I provide 3 as command line argument, I get this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;matplotlib-2.png&quot; alt=&quot;image resulting from running the code above&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This feature left me pleasantly surprised.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>sorting dictionary items by value</title>
                <pubDate>Tue, 26 Jun 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/sorting-dictionary-items-by-value/</link>
                <guid>http://tshepang.net/sorting-dictionary-items-by-value/</guid>
                <description>&lt;p&gt;Following should be self-explanatory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ python
&amp;gt;&amp;gt;&amp;gt; numbers = dict(zero=0, one=1, two=2, three=3)
&amp;gt;&amp;gt;&amp;gt; numbers
{&amp;#39;three&amp;#39;: 3, &amp;#39;zero&amp;#39;: 0, &amp;#39;two&amp;#39;: 2, &amp;#39;one&amp;#39;: 1}
&amp;gt;&amp;gt;&amp;gt; sorted(numbers)
[&amp;#39;one&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;zero&amp;#39;]
&amp;gt;&amp;gt;&amp;gt; sorted(numbers, key=numbers.get)
[&amp;#39;zero&amp;#39;, &amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second-last command sorts by keys, but that&#x27;s easy. Sorting by
value, as shown by the last command above, is what trips many novices,
and I had to spend too much time on the web finding how to do it, and I
still don&#x27;t really understand how it works, except that it works :)&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: Victor Stinner</title>
                <pubDate>Sat, 09 Jun 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-victor-stinner/</link>
                <guid>http://tshepang.net/developer-of-note-victor-stinner/</guid>
                <description>&lt;p&gt;Depending on the change, contributing to open source software can be
intensely challenging. Referring specifically to CPython, the reference
implementation of my favorite programming language, you can have
hundreds of messages on the mailing lists, and at times, many more in
the issue tracking system, all discussing the change in mind. Such
changes are most often accompanied with a &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0001&#x2F;&quot;&gt;PEP&lt;&#x2F;a&gt; (Python Enhancement
Proposal), a document which is basically a design spec for such a
change. It also, helpfully, summarises the arguments against the change,
and addresses them while at it.&lt;&#x2F;p&gt;
&lt;p&gt;Given all that, it can be quite challenging for any one individual to
champion such important changes, and an example of one such heroic
individual is &lt;a href=&quot;http:&#x2F;&#x2F;www.haypocalc.com&#x2F;wiki&#x2F;Accueil&quot;&gt;Victor Stinner&lt;&#x2F;a&gt;, a core CPython developer. He is the most
visible of the guys who helped ensure acceptance of &lt;a href=&quot;http:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0418&#x2F;&quot;&gt;PEP 418&lt;&#x2F;a&gt;, which
proposes some time-related additions and improvements to the standard
library&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;doc.python.org&#x2F;library&#x2F;time&quot;&gt;time module&lt;&#x2F;a&gt;. The sheer amount of discussion that went
around this particular PEP was ridiculous. The mailing list discussions
were practically endless, and so were the updates to the PEP, not to
mention the amount of research involved, which was needed in order to
have CPython expose this functionality in a cross-platform manner. Now,
that&#x27;s some serious perseverance.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to this work, the guy has done a heck of a lot of work in
cleaning up, re-factoring, and optimizing the string-handling code. I
can&#x27;t imagine that this stuff is easy, especially since a large portion
of it is in C! There&#x27;s a whole lot more work he has done... he&#x27;s
among the most prolific of all core CPython developers.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>my Argparse tutorial now part of official Python documentation</title>
                <pubDate>Mon, 07 May 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/my-argparse-tutorial-now-part-of-official-python-documentation/</link>
                <guid>http://tshepang.net/my-argparse-tutorial-now-part-of-official-python-documentation/</guid>
                <description>&lt;p&gt;I am very glad that &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;howto&#x2F;argparse&quot;&gt;a tutorial&lt;&#x2F;a&gt; I started writing over 2 months ago has
finally been added to &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;howto&quot;&gt;the howto section&lt;&#x2F;a&gt; of CPython documentation. It
took a lot of iteration (over 7) in total before finally being accepted.
But even then, it&#x27;s still not fully satisfactory for me, and I really
hope that someone else with fresh eyes is going to go through all of it
and offer improvements. Even better, I hope people will find it useful.
I know I would have when I started doing argument parsing. I found &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;argparse&quot;&gt;the
main module documention&lt;&#x2F;a&gt; overwhelming, and &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;argparse#example&quot;&gt;the very first example&lt;&#x2F;a&gt; is
in fact why I even started writing this tutorial at all, as is evident
on &lt;a href=&quot;http:&#x2F;&#x2F;bugs.python.org&#x2F;issue14034&quot;&gt;the relevant issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2012-04-12</title>
                <pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2012-04-12/</link>
                <guid>http://tshepang.net/links-2012-04-12/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.billthelizard.com&#x2F;2008&#x2F;12&#x2F;books-programmers-dont-really-read.html&quot;&gt;Books Programmers Don&#x27;t Really Read&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.b-list.org&#x2F;weblog&#x2F;2006&#x2F;oct&#x2F;28&#x2F;python-tips-dont-be-too-concise&#x2F;&quot;&gt;avoid being too concise&lt;&#x2F;a&gt; -- a Python example&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;inventwithpython.com&#x2F;blog&#x2F;2010&#x2F;09&#x2F;27&#x2F;i-want-to-teach-my-kid-how-to-program&#x2F;&quot;&gt;excellent review of a book that uses Python to teach kids
programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tech.blog.aknin.name&#x2F;2010&#x2F;05&#x2F;29&#x2F;mailing-list-debates-considered-harmful&#x2F;&quot;&gt;mailing lists are less than ideal for debate&#x2F;extended discussion&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>David Beazley&#x27;s PyCon US 2012 Keynote</title>
                <pubDate>Mon, 09 Apr 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/david-beazley-s-pycon-us-2012-keynote/</link>
                <guid>http://tshepang.net/david-beazley-s-pycon-us-2012-keynote/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;pyvideo.org&#x2F;video&#x2F;659&#x2F;keynote-david-beazley&quot;&gt;David Beazley&#x27;s PyCon 2012 key note talk&lt;&#x2F;a&gt; is among the best I&#x27;ve seen
in the field of software development. It&#x27;s not even the content (the
complexity and hackability of PyPy), but rather the presentation itself.
The guy must have put a lot of effort in his slides, and what&#x27;s better
is that he was also doing live demonstrations. From those, you could
gather that this isn&#x27;t a mere mortal. He&#x27;s brilliant (and humorous).
And I&#x27;ve never even heard of him before, but he appears to be some sort
of legend in the Python community.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2012-04-08</title>
                <pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2012-04-08/</link>
                <guid>http://tshepang.net/links-2012-04-08/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.alistapart.com&#x2F;articles&#x2F;neveruseawarning&quot;&gt;a great post&lt;&#x2F;a&gt; about the advantages of undo over warning dialogs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.stackoverflow.com&#x2F;2011&#x2F;01&#x2F;state-of-the-stack-2010-a-message-from-your-ceo&#x2F;&quot;&gt;the great success of Stack Overflow, and the associated Stack
Exchange network&lt;&#x2F;a&gt; -- lots of light humor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.comp.leeds.ac.uk&#x2F;nde&#x2F;papers&#x2F;teachpy3.html&quot;&gt;why Python 3 is more suitable for teaching programming&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;diveintohtml5.info&#x2F;past.html&quot;&gt;history of HTML&lt;&#x2F;a&gt; -- the research and presentation is impressive&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.alistapart.com&#x2F;articles&#x2F;neveruseawarning&quot;&gt;a look&lt;&#x2F;a&gt; at the high fragmentation of programming
languages&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>links 2012-03-27</title>
                <pubDate>Tue, 27 Mar 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2012-03-27/</link>
                <guid>http://tshepang.net/links-2012-03-27/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;A highly detailed demonstration of &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;1711631&#x2F;321731&quot;&gt;SQLite performance&lt;&#x2F;a&gt;, which also
goes through various ways of tuning it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;prog21.dadgum.com&#x2F;80.html&quot;&gt;Advice to Aimless, Excited Programmers&lt;&#x2F;a&gt;; this sort of advice is not
nothing new but the writer is so good and the site design so clean
that it oughta be kinda canonical.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;inventwithpython.com&#x2F;blog&#x2F;2012&#x2F;03&#x2F;03&#x2F;nobody-wants-to-learn-how-to-program&#x2F;&quot;&gt;Nobody Wants to Learn How to Program&lt;&#x2F;a&gt;; interesting advice on
teaching programming.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;eli.thegreenplace.net&#x2F;2012&#x2F;03&#x2F;15&#x2F;processing-xml-in-python-with-elementtree&#x2F;&quot;&gt;a gentle tutorial&lt;&#x2F;a&gt; on Python&#x27;s &lt;code&gt;xml.etree.ElementTree&lt;&#x2F;code&gt; module&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s very interesting to see &lt;a href=&quot;http:&#x2F;&#x2F;blogs.gnome.org&#x2F;xan&#x2F;2012&#x2F;03&#x2F;26&#x2F;web-its-whats-for-dinner&#x2F;&quot;&gt;a browser with relatively little use&lt;&#x2F;a&gt;
continue getting developed, while monsters like Firefox,
Chrome&#x2F;Chromium, and Safari have (almost) taken over the world.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>wajig 2.3 released</title>
                <pubDate>Sun, 25 Mar 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/wajig-2-3-released/</link>
                <guid>http://tshepang.net/wajig-2-3-released/</guid>
                <description>&lt;p&gt;It&#x27;s been many months since wajig was released, but this was about as
good as any since I probably did far more work on it than on any other
release so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The most user-visible change is that I changed the UI to feel more
standard&#x2F;natural, where each of the wajig COMMANDS are 1st-class
citizens. Let me give an example of user wanting to install a
package named nautilus, but avoid installing its Recommends
depencencies:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# ole
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;wajig —norecommends INSTALL nautilus
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;# new
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;wajig INSTALL —norecommends nautilus
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I call this natural because it makes more sense to have the
&lt;code&gt;--norecommends&lt;&#x2F;code&gt; command line option to be specified &lt;em&gt;after&lt;&#x2F;em&gt; the
(wajig) subcommand it modifies. Also, the way it was implemented
previously, the option would silently be ignored if it was used in a
case where it was irrelevant. That&#x27;s not good, and it links to the
next user-visible change.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There is less magic and more strictness. Previously, these commands
resulted in the same outcome:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;wajig REMOVEORPHANS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;wajig REMOVE-ORPHANS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;wajig R-____EMOVE-ORPH+++-___AN_S
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What wajig did was simply sanitise the commands, getting rid of the
junk. Well, I don&#x27;t like that, but since I didn&#x27;t want to break
people&#x27;s commands&#x2F;aliases&#x2F;scripts I actually tried to preserve that
functionality, but argparse didn&#x27;t let me do that, and messing
around with &lt;code&gt;sys.argv&lt;&#x2F;code&gt; before argparse jumped in was an error-prone
mess, which links us to the next change, this time
behind-the-scenes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I replaced the archaic &lt;code&gt;getopt&lt;&#x2F;code&gt; CLI parser with a far more powerful
&lt;code&gt;argparse&lt;&#x2F;code&gt;. This change alone, when I truly embraced it, using its
subcommand methods (see point 1 above), resulting in a ridiculous
work that involved mainly unfun work and resulted in changing
(adding and removing) thousands of lines code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The output of command &lt;code&gt;wajig COMMANDS&lt;&#x2F;code&gt; is now generated dynamically,
instead of simply being read from a separate file. Advantage is that
it should now remain more up-to-date.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The usage info for each COMMAND was store on its own file, and the
aliases were symblic links to them. Now that&#x27;s ugly, but I did it
that was some time ago because I could not think of a better, quick
way. The ugly solution is simple, but it added over a 100 files in
user machines, which is just bad design. Well, modern Linux-based
package management makes such invisible to all but the most
avid&#x2F;curious users, but I never liked it anyways. Now, all of that
help info is auto-generated by &lt;code&gt;argparse&lt;&#x2F;code&gt; (you can imagine I&#x27;m a
big fan of that module by now).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There&#x27;s bunch of other changes, though most was code stuff. As for
the user-visible stuff, a few COMMANDS were removed, a few options
added&#x2F;removed. &lt;a href=&quot;http:&#x2F;&#x2F;packages.qa.debian.org&#x2F;w&#x2F;wajig&#x2F;news&#x2F;20120322T223441Z.html&quot;&gt;Here&#x27;s &#x27;all&#x27; the gory details&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>links 2012-02-15</title>
                <pubDate>Wed, 15 Feb 2012 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2012-02-15/</link>
                <guid>http://tshepang.net/links-2012-02-15/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.sqlite.org&#x2F;testing.html&quot;&gt;The amount of testing&lt;&#x2F;a&gt; SQLite goes through before each release is
impressive.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mail.python.org&#x2F;pipermail&#x2F;python-ideas&#x2F;2012-February&#x2F;013835.html&quot;&gt;A stern slap on the wrist&lt;&#x2F;a&gt; of noisy people; it&#x27;s a well-informed
rebuttal against the famous &amp;quot;the CPython GIL sucketh&amp;quot; complaint.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;sarge.readthedocs.org&#x2F;en&#x2F;latest&#x2F;index.html&quot;&gt;This subprocess wrapper&lt;&#x2F;a&gt; looks immensely powerful; I haven&#x27;t
needed its extra features yet, but I love the elegance and seeming
ease-of-use.&lt;&#x2F;li&gt;
&lt;li&gt;A superb, highly-detailed &lt;a href=&quot;http:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;a&#x2F;9003&#x2F;&quot;&gt;code review&lt;&#x2F;a&gt; by &lt;a href=&quot;http:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;users&#x2F;1659&#x2F;winston-ewert&quot;&gt;Winston Ewert&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;users&#x2F;1659&#x2F;winston-ewert&quot;&gt;This guy&lt;&#x2F;a&gt; (same one mentioned above) exposed &lt;a href=&quot;http:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;a&#x2F;9009&#x2F;1346&quot;&gt;my
sloppiness&lt;&#x2F;a&gt; as a programmer; I was nearly embarassed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>project of note: Requests</title>
                <pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/project-of-note-requests/</link>
                <guid>http://tshepang.net/project-of-note-requests/</guid>
                <description>&lt;p&gt;Requests is a Python module that makes it real easy to deal with HTTP.
As an example, something as scary as fetching a web page that needs
authentication requires only a single line of code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;requests.get(&amp;quot;https:&#x2F;&#x2F;example.com&amp;quot;, auth=(&amp;quot;user&amp;quot;, &amp;quot;pass&amp;quot;))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s capable of &lt;a href=&quot;http:&#x2F;&#x2F;docs.python-requests.org&#x2F;en&#x2F;latest&#x2F;index.html#feature-support&quot;&gt;a lot more&lt;&#x2F;a&gt; of course (&lt;a href=&quot;http:&#x2F;&#x2F;docs.python-requests.org&#x2F;en&#x2F;latest&#x2F;user&#x2F;quickstart&#x2F;&quot;&gt;tutorial&lt;&#x2F;a&gt;), and it&#x27;s weird
that something this nice hasn&#x27;t been around for ages. There is another
that is much simpler to use and more advanced than Python&#x27;s standard
library named &lt;a href=&quot;http:&#x2F;&#x2F;code.google.com&#x2F;p&#x2F;httplib2&#x2F;&quot;&gt;httplib2&lt;&#x2F;a&gt;, but it&#x27;s not quite as simple&#x2F;elegant:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;h = httplib2.Http(&amp;quot;.cache&amp;quot;)  &#x2F;&#x2F; ugly
h.add_credentials(&amp;quot;user&amp;quot;, &amp;quot;pass&amp;quot;)
resp, content = h.request(&amp;quot;https:&#x2F;&#x2F;example.com&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An example for achieving the same with only the standard library is far
messier.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Java gripes</title>
                <pubDate>Wed, 02 Nov 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/java-gripes/</link>
                <guid>http://tshepang.net/java-gripes/</guid>
                <description>&lt;p&gt;Okay, so Java sucks &#x27;a bit&#x27;, but the following surprised me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I struggled to find a way to count the number of elements in an
array. In a string it&#x27;s done thus: &lt;code&gt;&amp;quot;four&amp;quot;.length()&lt;&#x2F;code&gt;. Given that, I
expected that &lt;code&gt;{&#x27;f&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;}.length()&lt;&#x2F;code&gt; would gimme the same
result. Nah! I found that I had to do
&lt;code&gt;new char [] {&#x27;f&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;}.length&lt;&#x2F;code&gt;, and yes, without the
brackets after length. WTF! There might be a good reason for such
(seeming) inconsistency of course, but I&#x27;ve been spoilt by
Python&#x27;s elegant equivalents: &lt;code&gt;len(&amp;quot;four&amp;quot;)&lt;&#x2F;code&gt; and
&lt;code&gt;len([&#x27;f&#x27;,&#x27;o&#x27;, &#x27;u&#x27;, &#x27;r&#x27;])&lt;&#x2F;code&gt; which all give the same result.
(sidenote: &lt;code&gt;len()&lt;&#x2F;code&gt; is a Python built-in function, which explains why
there&#x27;s no dot notation there).&lt;&#x2F;li&gt;
&lt;li&gt;The standard library doesn&#x27;t have CSV handling! I had to find an
external library for that!&lt;&#x2F;li&gt;
&lt;li&gt;Given 2 strings, I can&#x27;t do &lt;code&gt;str1==str2&lt;&#x2F;code&gt; for comparison, but am
forced to use the string method, equals: &lt;code&gt;str1.equals(str2)&lt;&#x2F;code&gt;. This
bit me a few times, and am sure am not the only one.&lt;&#x2F;li&gt;
&lt;li&gt;The standard library doesn&#x27;t have &lt;code&gt;.INI&lt;&#x2F;code&gt; file handling (&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;3728823&quot;&gt;Someone
pointed to a 3rd party library&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>developer of note: John Palmieri</title>
                <pubDate>Tue, 20 Sep 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/developer-of-note-john-palmieri/</link>
                <guid>http://tshepang.net/developer-of-note-john-palmieri/</guid>
                <description>&lt;p&gt;Every so often, there appears a developer who pressures me away from my
lazy, unfocused, and undisciplined ass to go do some useful programming.
This time around it&#x27;s John Palmieri, the most visible of the developers
of &lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Projects&#x2F;PyGObject&quot;&gt;PyGObject&lt;&#x2F;a&gt; (Python bindings for GTK+ and GLib). The old way of using
GTK+ with Python has for years been PyGTK and this guy has been
tirelessly working to move the world to the more modern PyGObject, and
has led at least one coding sprint to help achieve this goal. He also
appears friendly and humble. He rocks!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>my first code contribution to the CPython project</title>
                <pubDate>Fri, 10 Jun 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/my-first-code-contribution-to-the-cpython-project/</link>
                <guid>http://tshepang.net/my-first-code-contribution-to-the-cpython-project/</guid>
                <description>&lt;p&gt;Looking at &lt;a href=&quot;http:&#x2F;&#x2F;hg.python.org&#x2F;cpython&#x2F;file&#x2F;default&#x2F;Misc&#x2F;ACKS&quot;&gt;the long list&lt;&#x2F;a&gt; of people who have contributed to Python, you
will notice that my name is somewhere. This moment excites me,
considering my deep respect for the project (the only other mega FLOSS
project I have comparable respect for is Debian).&lt;&#x2F;p&gt;
&lt;p&gt;Interestinly, &lt;a href=&quot;http:&#x2F;&#x2F;bugs.python.org&#x2F;issue12246&quot;&gt;my patch&lt;&#x2F;a&gt; went through a few iterations before it was
accepted, and even then, with some modifications. It was an eye-opening
experience, and made me learn a little more than I thought I needed to.
Now, I just need to do a few more of these.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>cleansing multiple build directories</title>
                <pubDate>Sat, 26 Mar 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/cleansing-multiple-build-directories/</link>
                <guid>http://tshepang.net/cleansing-multiple-build-directories/</guid>
                <description>&lt;p&gt;In my adventures of &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;my-jhbuild-setup&quot;&gt;building GNOME with JHBuild&lt;&#x2F;a&gt;, it often happens that
when I tweak something that affects the build environment (e.g. use
system Python instead of JHBuild-built one), I get a heck of a lot of
build failures. This will happen even after I run jhbuild clean (which
runs &lt;code&gt;make clean&lt;&#x2F;code&gt; on the modules), testimony to the weakness ofthe GNOME
build infrastructure (autotools, ...). This means that I need to run
&lt;code&gt;make distclean&lt;&#x2F;code&gt; or better still (where applicable) &lt;code&gt;git clean -dfx&lt;&#x2F;code&gt;.
Note that I sometimes even have to uninstall one or two modules (on
JHBuild path) to get a build failure fixe
(&lt;code&gt;jhbuild uninstall modulename&lt;&#x2F;code&gt;). This is laborious work, so I sometimes
just wipe out the entire installation.&lt;&#x2F;p&gt;
&lt;p&gt;Note that there&#x27;s dozens of modules to build, so I wrote this little
script to take care of it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import os
import subprocess
top_level = os.path.expanduser(&amp;quot;~&#x2F;src&#x2F;gnome&amp;quot;)
for filename in os.listdir(top_level):
    full_path = &amp;quot;{}&#x2F;{}&amp;quot;.format(top_level, filename)
    if os.path.isdir(full_path):
        cmd = &amp;quot;cd ~&#x2F;src&#x2F;gnome&#x2F;{} &amp;amp;&amp;amp; git clean -dfx&amp;quot;.format(filename)
        if subprocess.call(cmd, shell=True) != 0:
            cmd = &amp;quot;cd ~&#x2F;src&#x2F;gnome&#x2F;{} &amp;amp;&amp;amp; make distclean&amp;quot;.format(filename)
            if subprocess.call(cmd, shell=True) != 0:
                cmd = &amp;quot;cd ~&#x2F;src&#x2F;gnome&#x2F;{} &amp;amp;&amp;amp; make clean&amp;quot;.format(filename)
                subprocess.call(cmd, shell=True)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;update&quot;&gt;update&lt;&#x2F;h1&gt;
&lt;p&gt;Someone very kind guy made &lt;a href=&quot;http:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;questions&#x2F;1476&#x2F;cleansing-multiple-build-directories&#x2F;1477#1477&quot;&gt;a bunch of suggestions&lt;&#x2F;a&gt;, making my code much
better:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import os
import subprocess
top_level = os.path.expanduser(&amp;quot;~&#x2F;src&#x2F;gnome&amp;quot;)
for filename in os.listdir(top_level):
    full_path = os.path.join(top_level, filename)
    if os.path.isdir(full_path):
        os.chdir(full_path)
        if subprocess.call(&amp;quot;git clean -dfx&amp;quot;.split()) != 0:
            if subprocess.call(&amp;quot;make distclean&amp;quot;.split()) != 0:
                subprocess.call(&amp;quot;make clean&amp;quot;.split())
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;p&gt;modules: &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;&#x2F;library&#x2F;os&quot;&gt;os&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;&#x2F;library&#x2F;os.path&quot;&gt;os.path&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;&#x2F;library&#x2F;subprocess&quot;&gt;subprocess&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>cat, Python, and Perl</title>
                <pubDate>Tue, 15 Mar 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/cat-python-and-perl/</link>
                <guid>http://tshepang.net/cat-python-and-perl/</guid>
                <description>&lt;p&gt;I came across &lt;a href=&quot;http:&#x2F;&#x2F;greenteapress.com&#x2F;perl&#x2F;perl.pdf&quot;&gt;a tutorial&lt;&#x2F;a&gt; that showes how to implement a simple cat in
Perl. I&#x27;ve modified their example for the sake of simplicity:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sub cat {
    foreach my $filename (@_) {
        open FILE, $filename;
        while (my $line = &amp;lt;FILE&amp;gt;) {
            print $line;
        }
    }
}
cat @ARGV;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this script (e.g. &lt;code&gt;perl cat.pl file&lt;&#x2F;code&gt;) will display those files
as if you ran &lt;code&gt;cat file&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to see how the Python example would look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import sys
def cat(files):
    for filename in files:
        with open(filename) as FILE:
            for line in FILE:
                print(line, end=&amp;quot;&amp;quot;)
cat(sys.argv[1:])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this script (e.g. &lt;code&gt;python3 cat.py file1 file2&lt;&#x2F;code&gt;) will give
exactly the same result as above.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;notes&quot;&gt;notes&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;The Perl keyword, &lt;code&gt;my&lt;&#x2F;code&gt;, indicates that the variabe it refers to is
local. Without that, it&#x27;s taken to be global. As for Python, this
is implicit, and depends on where the variable is placed (scope).&lt;&#x2F;li&gt;
&lt;li&gt;Perl has special ways of identifying data types. In our example, &lt;code&gt;$&lt;&#x2F;code&gt;
is used to identify a variable that has a single value, and is known
as a scalar in Perl talk. This can be tedious of course (so much
typing!). In Python, the data fed into the variable is the only
thing that determines what type of the variable it is. I see this as
noise from Perl. It results in some badness, as in you can have two
variables names be the same, but given different types (e.g.
&lt;code&gt;my $var; my @var;&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;The upper case file handler, &lt;code&gt;FILE&lt;&#x2F;code&gt;, is a matter of convention for
Perl, and can be named &#x27;anything&#x27;. I used it in the Python sample
only for the sake of clarity.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;&amp;gt;&lt;&#x2F;code&gt; operator is special syntax that means a file is being
manipulated. Python has no such.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;@_&lt;&#x2F;code&gt; is an argument list (&lt;code&gt;@ARGV&lt;&#x2F;code&gt;) from the function call,
&lt;code&gt;cat&lt;&#x2F;code&gt;. This is one other thing that is implicit about Perl, where
you have to learn extra syntax (and concepts), where a simple
argument list should have been provided during the function
declaration, as in Python&#x27;s &lt;code&gt;cat(files)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Note that I didn&#x27;t need to import anything to get Perl to work with
command line arguments. With Python, I need to explicitly do so, and
that&#x27;s via the &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;sys&quot;&gt;sys module&lt;&#x2F;a&gt;, which is part of its standard library.&lt;&#x2F;li&gt;
&lt;li&gt;The Python &lt;code&gt;with&lt;&#x2F;code&gt; statement is meant to make our lives easier, but
also adds syntax to the language. What it does is close a file for
us so we don&#x27;t have to do it.&lt;&#x2F;li&gt;
&lt;li&gt;The Python &lt;code&gt;print()&lt;&#x2F;code&gt; function adds a newline by default, and that
would results in ugly output from our code, that&#x27;s why we used the
&lt;code&gt;end=&amp;quot;&amp;quot;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;[1:]&lt;&#x2F;code&gt; from the last statement in the Python example means that
we are slicing the list, removing the first element (element 0), and
keeping everything else. We do this because the current running
script is considered by Python as element 0, while in Perl, the 1st
element is actually the first thing that appears on the command line
after the script name. One would say that Perl does this more
elegantly.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;reference&#x2F;executionmodel&quot;&gt;Python scope&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions#print&quot;&gt;Python print function&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;compound_stmts#the-with-statement&quot;&gt;Python with statement&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>plotting with matplotlib</title>
                <pubDate>Thu, 17 Feb 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/plotting-with-matplotlib/</link>
                <guid>http://tshepang.net/plotting-with-matplotlib/</guid>
                <description>&lt;p&gt;Here&#x27;s drawing a simple graph:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;from matplotlib import pyplot
x = range(10)  # a list of 10 integers, 0-9
y = range(10)
pyplot.plot(x, y)
pyplot.show()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now for something a little more interesting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import random
from matplotlib import pyplot
x = range(10)
y = random.sample(range(10), 10)
pyplot.plot(x, y)
pyplot.show()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can have more than one graph on a single figure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import random
from matplotlib import pyplot
x = range(10)
y1 = random.sample(range(10), 10)
y2 = random.sample(range(10), 10)
pyplot.plot(x, y1, x, y2)
pyplot.show()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What if the two graphs have much differing ranges:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import random
from matplotlib import pyplot
x = range(10)
y1 = random.sample(range(10), 10)
y2 = random.sample(range(100, 110), 10)
pyplot.plot(x, y1, x, y2)
pyplot.show()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Depending on need, that might not be ideal. So let&#x27;s create two
separate y-axes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import random
from matplotlib import pyplot
x = range(10)
y1 = random.sample(range(10), 10)
y2 = random.sample(range(100, 110), 10)
pyplot.plot(x, y1)
pyplot.twinx()
pyplot.plot(x, y2)
pyplot.show()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yeah, not exactly ideal. We lost the automatic coloring, and we don&#x27;t
even know which graph is which. Let&#x27;s do better:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import random
from matplotlib import pyplot
x = range(10)
y1 = random.sample(range(10), 10)
y2 = random.sample(range(100, 110), 10)
pyplot.plot(x, y1, &amp;quot;red&amp;quot;)
pyplot.ylabel(&amp;quot;y1&amp;quot;, color=&amp;quot;red&amp;quot;)
pyplot.twinx()
pyplot.plot(x, y2, &amp;quot;blue&amp;quot;)
pyplot.ylabel(&amp;quot;y2&amp;quot;, color=&amp;quot;blue&amp;quot;)
pyplot.show()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was done with the help of &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;examples&#x2F;api&#x2F;two_scales.html&quot;&gt;this example&lt;&#x2F;a&gt;. There&#x27;s a heck of a
&lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;examples&#x2F;index.html&quot;&gt;lot&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;gallery.html&quot;&gt;more&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;built-in function: &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;functions#range&quot;&gt;range&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;module: &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;random&quot;&gt;random&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;3rd-party module: &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;api&#x2F;pyplot_api.html&quot;&gt;matplotlib.pyplot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;contents.html&quot;&gt;matplotlib documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>project of note: matplotlib</title>
                <pubDate>Thu, 17 Feb 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/project-of-note-matplotlib/</link>
                <guid>http://tshepang.net/project-of-note-matplotlib/</guid>
                <description>&lt;p&gt;I believe &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;&quot;&gt;matplotlib&lt;&#x2F;a&gt; is THE plotting library for Python. It happens to
be highly advanced too, and has &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;contents.html&quot;&gt;extensive documentation&lt;&#x2F;a&gt; to show up for
it, including a large collection &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;examples&#x2F;index.html&quot;&gt;examples&lt;&#x2F;a&gt; and a &lt;a href=&quot;http:&#x2F;&#x2F;matplotlib.sourceforge.net&#x2F;gallery.html&quot;&gt;gallery&lt;&#x2F;a&gt; of plots
(and the code used to produce them).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;plotting-with-matplotlib&quot;&gt;I played a bit with it&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;matplotlib-rocks&quot;&gt;was later on impressed by its
versatility&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>comparing Debian repositories</title>
                <pubDate>Wed, 09 Feb 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/comparing-debian-repositories/</link>
                <guid>http://tshepang.net/comparing-debian-repositories/</guid>
                <description>&lt;p&gt;If you got two Debian repositories, it&#x27;s quite easy to check the
differences in package versions between them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import os
import gzip
import apt_pkg

repo1 = &amp;quot;~&#x2F;.repo_custom&#x2F;dists&#x2F;cache&#x2F;main&#x2F;binary-i386&#x2F;Packages.gz&amp;quot;
repo1 = os.path.expanduser(repo1)
repo1 = apt_pkg.TagFile(gzip.open(repo1, &amp;quot;rb&amp;quot;))
repo1 = dict([(pkg[&amp;quot;Package&amp;quot;], pkg[&amp;quot;Version&amp;quot;]) for pkg in repo1])

repo2 = &amp;quot;~&#x2F;.repo_bin&#x2F;dists&#x2F;squeeze&#x2F;main&#x2F;binary-i386&#x2F;Packages.gz&amp;quot;
repo2 = os.path.expanduser(repo2)
repo2 = apt_pkg.TagFile(gzip.open(repo2, &amp;quot;rb&amp;quot;))
repo2 = dict([(pkg[&amp;quot;Package&amp;quot;], pkg[&amp;quot;Version&amp;quot;]) for pkg in repo2])

apt_pkg.init_system()
for pkg in repo1:
    if pkg in repo2:
        vc = apt_pkg.version_compare(repo1[pkg], repo2[pkg])
        if vc &amp;gt; 0:
            print(&amp;quot;{0}t{1}t({2})&amp;quot;.format(repo1[pkg], repo2[pkg], pkg))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The line &lt;code&gt;import apt_pkg&lt;&#x2F;code&gt; implies that &lt;strong&gt;python3-apt&lt;&#x2F;strong&gt; is installed.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a snippet of what the output will look like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;2.32.1-2    2.28.1-6    (gconf-defaults-service)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0.23.0-1    0.21.1-1    (pylint)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;2.91.5-2    2.30.2-2    (libgnomekbd-common)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0.21.2-1    0.16.4-1    (libpixman-1-dev)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;2.91.7-1    2.30.1-2    (nautilus)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0.9.22-1    0.9.21-3    (pulseaudio-utils)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here, we get a display of package versions where the repo1 (custom repo
in this case) is greater than repo2 version. To do it the other way
around, use the &lt;code&gt;&amp;lt;&lt;&#x2F;code&gt; character in the comparison line, &lt;code&gt;if vc &amp;gt; 0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;modules: &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;gzip&quot;&gt;gzip&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;os&quot;&gt;os&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;3rd party library: &lt;a href=&quot;http:&#x2F;&#x2F;apt.alioth.debian.org&#x2F;python-apt-doc&#x2F;library&#x2F;apt_pkg.html&quot;&gt;apt_pkg&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>links 2011-02-07</title>
                <pubDate>Mon, 07 Feb 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2011-02-07/</link>
                <guid>http://tshepang.net/links-2011-02-07/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;articles&#x2F;LeakyAbstractions.html&quot;&gt;The Law of Leaky Abstractions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tirania.org&#x2F;blog&#x2F;archive&#x2F;2010&#x2F;Dec-31.html&quot;&gt;Open Source Contribution Etiquette&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;jimmyg.org&#x2F;blog&#x2F;2009&#x2F;working-with-python-subprocess.html&quot;&gt;a gentle intro&lt;&#x2F;a&gt; to Unix processes, and the Python &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;subprocess&quot;&gt;subprocess
module&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;4861803&#x2F;321731&quot;&gt;How does one make Java ignore the number of spaces in a string when
splitting?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lukeplant.me.uk&#x2F;blog&#x2F;posts&#x2F;docs-or-it-doesnt-exist&#x2F;&quot;&gt;on the importance of decent documentation&lt;&#x2F;a&gt; -- a great post&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>splitting strings</title>
                <pubDate>Tue, 01 Feb 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/splitting-strings/</link>
                <guid>http://tshepang.net/splitting-strings/</guid>
                <description>&lt;p&gt;If I have a string with spaces, and wanted to split it into a
list&#x2F;array, I would use this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;a b c&amp;quot;.split()
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I can go ahead and specify a delimiter (which character the string must
split on):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;string with spaces&amp;quot;.split(&amp;quot; &amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I get the same result:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But what if my string wasn&#x27;t so forgiving?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;a b  c&amp;quot;.split(&amp;quot; &amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;c&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not exactly what we want. Leaving the delimiter out gives us the exact
same list as when we had this with a forgiving string.&lt;&#x2F;p&gt;
&lt;p&gt;Anyways, the point is that for a lot of cases, probably a majority, when
one wants to perform a string split, it&#x27;s because they want to delimit
it with spaces. So, Python covers for that common use-case. That&#x27;s a
bit of &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;stdtypes.html#str.split&quot;&gt;magic&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;bugs.python.org&#x2F;issue1367936&quot;&gt;justification&lt;&#x2F;a&gt;) one might take for granted, because
it&#x27;s not available in PHP and Java. I&#x27;m here only going to show Java
examples. PHP examples aren&#x27;t that much different though.&lt;&#x2F;p&gt;
&lt;p&gt;Here goes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import java.util.Arrays;
String[] splitString = &amp;quot;a b  c&amp;quot;.split(&amp;quot; &amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[a, b, , c]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s not what we want, so in order to cover for my unforgiving
string, I get to use regular expressions (regexp)?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import java.util.Arrays;
String[] splitString = &amp;quot;string with spaces&amp;quot;.split(&amp;quot; +&amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[a, b, c]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;+&lt;&#x2F;code&gt; in the &lt;code&gt;split()&lt;&#x2F;code&gt; method indicates that the match can either be
one or more consecutive spaces.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s not what we want, so in order to cover for my unforgiving
string, I get to use regular expressions (regexp)?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;String[] splitString = &amp;quot;string with spaces&amp;quot;.split(&amp;quot; +&amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[a, b, c]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But what if the string was even less forgiving. In this case, having
tabs as well? We need some more regexp help:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import java.util.Arrays;
String[] splitString = &amp;quot;a    bnc&amp;quot;.split(&amp;quot;s+&amp;quot;);
System.out.println(Arrays.asList(splitString));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[a, b, c]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;s&lt;&#x2F;code&gt; matches any white space.&lt;&#x2F;p&gt;
&lt;p&gt;With Python, I expected the default way to work but it didn&#x27;t, but came
back disappointed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;split_string = &amp;quot;a    bnc&amp;quot;.split(&amp;quot; &amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;#39;at&amp;#39;, &amp;#39;bnc&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perhaps it&#x27;s a philosophical difference, but it&#x27;s harder to do this
with Python. This is the only thing so that I found easier to achieve in
Java than in Python:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import re
split_string = re.split(&amp;quot;s+&amp;quot;, &amp;quot;a    bnc&amp;quot;)
print(split_string)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;...and we finally get what we want:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>basic ConfigParser usage</title>
                <pubDate>Fri, 28 Jan 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/basic-configparser-usage/</link>
                <guid>http://tshepang.net/basic-configparser-usage/</guid>
                <description>&lt;p&gt;Reading &lt;code&gt;.INI&lt;&#x2F;code&gt; files is very easy with Python. Say you had a file,
&amp;quot;&lt;em&gt;config.cfg&lt;&#x2F;em&gt;&amp;quot;, with this content:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[numbers]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;one: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;two: 2
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code to read that content is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import configparser
conf = configparser.ConfigParser()
conf.read(&amp;quot;config.cfg&amp;quot;)
items = conf.items(&amp;quot;numbers&amp;quot;)
print(items)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[(&amp;#39;one&amp;#39;, &amp;#39;1&amp;#39;), (&amp;#39;two&amp;#39;, &amp;#39;2&amp;#39;)]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s a list of tuples, each tuple a key-value pair.&lt;&#x2F;p&gt;
&lt;p&gt;Even better, since these are key-value pairs, why not use a more
suitable data type? Here goes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import configparser
conf = configparser.ConfigParser()
conf.read(&amp;quot;config.cfg&amp;quot;)
items = dict(conf.items(&amp;quot;numbers&amp;quot;))
print(items)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{&amp;#39;two&amp;#39;: &amp;#39;2&amp;#39;, &amp;#39;one&amp;#39;: &amp;#39;1&amp;#39;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s the &lt;strong&gt;dict&lt;&#x2F;strong&gt; function, which takes a list of tuples, and
converts them to a dictionary. You might also have noticed that the
ordering is now a bit off. That&#x27;s because the dict type doesn&#x27;t care
about ordering. Remember that in order to access dictionary content, you
use a key and not an index:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; d = {1: &amp;#39;one&amp;#39;}
&amp;gt;&amp;gt;&amp;gt; d[0]
Traceback (most recent call last):
  File &amp;quot;&amp;quot;, line 1, in
KeyError: 0
&amp;gt;&amp;gt;&amp;gt; d[1]
&amp;#39;one&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;configparser&quot;&gt;configparser module&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;stdtypes#mapping-types-dict&quot;&gt;dict mapping type&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>basic usage of Python with Oracle DB, in Debian</title>
                <pubDate>Thu, 27 Jan 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/basic-usage-of-python-with-oracle-db-in-debian/</link>
                <guid>http://tshepang.net/basic-usage-of-python-with-oracle-db-in-debian/</guid>
                <description>&lt;p&gt;What if you wanted to access Oracle using Python? Once you are &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;accessing-oracle-db-using-python-in-debian&quot;&gt;set up&lt;&#x2F;a&gt;,
it&#x27;s real easy. We use &lt;a href=&quot;http:&#x2F;&#x2F;cx-oracle.sourceforge.net&#x2F;html&#x2F;index.html&quot;&gt;cx_Oracle&lt;&#x2F;a&gt;, the most popular Python library to
read Oracle DBs.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start by simply reading the DB:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import cx_Oracle
conn = cx_Oracle.connect(&amp;quot;usr&amp;quot;, &amp;quot;pwd&amp;quot;, &amp;quot;tns&amp;quot;)
cursor = conn.cursor()
cursor.execute(&amp;quot;SELECT * TABLE_NAME&amp;quot;)
for item in cursor.fetchall()[0]:
    print(item)
conn.close()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;cx-oracle.sourceforge.net&#x2F;html&#x2F;index.html&quot;&gt;cx_Oracle&lt;&#x2F;a&gt; explain exactly what each of these means.&lt;&#x2F;p&gt;
&lt;p&gt;If we wanted instead to modify stuff in there, we only add one extra
line, which is &lt;code&gt;cursor.commit&lt;&#x2F;code&gt;, like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import cx_Oracle
conn = cx_Oracle.connect(&amp;quot;usr&amp;quot;, &amp;quot;pwd&amp;quot;, &amp;quot;tns&amp;quot;)
cursor = conn.cursor()
cursor.execute(&amp;quot;SELECT * TABLE_NAME&amp;quot;)
cursor.commit()
conn.close()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For real-world code, you are of course going to add exception handling
for all this, something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import cx_Oracle
try:
    conn = cx_Oracle.connect(&amp;quot;usr&amp;quot;, &amp;quot;pwd&amp;quot;, &amp;quot;tns&amp;quot;)
    cursor = conn.cursor()
    cursor.execute(&amp;quot;SELECT * TABLE_NAME&amp;quot;)
    for item in cursor.fetchall()[0]:
        print(item)
    conn.close()
except Exception as e:
    print(e)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That exception handling is rather oversimplified though, but is good
enough for illustrative purposes. Also, note that there is no timeout
set in case of problematic&#x2F;slow network access, so my code will just sit
there waiting to connect.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>using Python&#x27;s subprocess module</title>
                <pubDate>Wed, 26 Jan 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/using-python-s-subprocess-module/</link>
                <guid>http://tshepang.net/using-python-s-subprocess-module/</guid>
                <description>&lt;p&gt;There are at least 2 ways to run a simple command like &lt;code&gt;echo test&lt;&#x2F;code&gt; in
Python: via the shell, or directly (via the kernel).&lt;&#x2F;p&gt;
&lt;p&gt;This is via the shell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import subprocess
subprocess.Popen(&amp;quot;echo test&amp;quot;, shell=True)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is via the kernel:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import subprocess
p = subprocess.Popen([&amp;quot;echo&amp;quot;, &amp;quot;test&amp;quot;], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output = p.communicate()
print(output)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(b&amp;#39;testn&amp;#39;, b&amp;#39;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not exactly what we want. The output is actually a tuple (&lt;strong&gt;stdout&lt;&#x2F;strong&gt;,
&lt;strong&gt;stderr&lt;&#x2F;strong&gt;). Note that by default, &lt;code&gt;shell=False&lt;&#x2F;code&gt;, and that&#x27;s why it&#x27;s
not stated here.&lt;&#x2F;p&gt;
&lt;p&gt;To get the equivalent of what we get from the first example, we have to
do a bit more work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import subprocess
p = subprocess.Popen([&amp;quot;echo&amp;quot;, &amp;quot;test&amp;quot;], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output = p.communicate()
print(output[0].decode(), end=&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;b&lt;&#x2F;code&gt; thing indicates that the string is in bytes format. To get a
normal string from that, just run the string&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;stdtypes.html?highlight=encode#str.decode&quot;&gt;decode method&lt;&#x2F;a&gt;. Also,
that I had to use the &lt;code&gt;end&lt;&#x2F;code&gt; argument on the &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;functions.html#print&quot;&gt;print function&lt;&#x2F;a&gt;, was to
avoid an empty line on the terminal output.&lt;&#x2F;p&gt;
&lt;p&gt;As can be seen, this means we do much of the work ourself, but the
benefit is that we now have finer-grained control (e.g. we get to
control when to display the output). Another benefit is that it is more
secure to do it this way (I don&#x27;t know the details, so see &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shell_injection#Shell_injection&quot;&gt;shell
injection&lt;&#x2F;a&gt; for the argument).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;further reading&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;There is a whole wealth of info on this from &lt;a href=&quot;http:&#x2F;&#x2F;jimmyg.org&#x2F;blog&#x2F;2009&#x2F;working-with-python-subprocess.html&quot;&gt;a gentle tutorial&lt;&#x2F;a&gt;
where I learned this stuff. It also explains what pipes are
(&lt;code&gt;subprocess.PIPE&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Also, take a look at &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;subprocess.html#subprocess.Popen.communicate&quot;&gt;the official doc for the Popen.communicate()
method&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;diveintopython3.net&#x2F;strings.html&quot;&gt;a great explanation&lt;&#x2F;a&gt; of what strings really are, and how they
relate to Python 3&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>shlex and subprocess</title>
                <pubDate>Tue, 25 Jan 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/shlex-and-subprocess/</link>
                <guid>http://tshepang.net/shlex-and-subprocess/</guid>
                <description>&lt;p&gt;I learned about a module called &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;shlex.html&quot;&gt;shlex&lt;&#x2F;a&gt;. It&#x27;s stated to be a simple
lexical analyzer, and I don&#x27;t really know what this means, but I found
at least one of its uses. It provides a convenience method that lets me
split a command line string, to feed into &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;library&#x2F;subprocess.html&quot;&gt;subprocess&lt;&#x2F;a&gt; module.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say I want to run the command &lt;code&gt;&#x2F;bin&#x2F;cat &#x27;file with spaces&#x27;&lt;&#x2F;code&gt; from
within &lt;code&gt;python&lt;&#x2F;code&gt;. A normal &lt;code&gt;split&lt;&#x2F;code&gt; won&#x27;t work, because it uses white
space as a delimiter (by default). To test, I will create a file named
&amp;quot;&lt;strong&gt;file with spaces&lt;&#x2F;strong&gt;&amp;quot; and add text (&lt;code&gt;content of &#x27;file with spaces&#x27;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ echo &amp;#39;content of file with spaces&amp;#39; &amp;gt; &amp;#39;file with spaces&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here&#x27;s the code, using the normal split method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import subprocess
cmd = &amp;quot;&#x2F;bin&#x2F;cat &amp;#39;file with spaces&amp;#39;&amp;quot;
formatted_cmd = cmd.split()
subprocess.Popen(formatted_cmd)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;bin&#x2F;cat: &amp;#39;file: No such file or directory
&#x2F;bin&#x2F;cat: with: No such file or directory
&#x2F;bin&#x2F;cat: spaces&amp;#39;: No such file or directory
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s when &lt;code&gt;shlex&lt;&#x2F;code&gt; module gets to be useful.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;import shlex, subprocess
cmd = &amp;quot;&#x2F;bin&#x2F;cat &amp;#39;file with spaces&amp;#39;&amp;quot;
formatted_cmd = shlex.split(cmd)
subprocess.Popen(formatted_cmd)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;content of &amp;#39;file with spaces&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>accessing Oracle DB using Python, in Debian</title>
                <pubDate>Sat, 15 Jan 2011 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/accessing-oracle-db-using-python-in-debian/</link>
                <guid>http://tshepang.net/accessing-oracle-db-using-python-in-debian/</guid>
                <description>&lt;p&gt;The following instructions assume that you are using &lt;a href=&quot;http:&#x2F;&#x2F;www.debian.org&#x2F;releases&#x2F;squeeze&#x2F;&quot;&gt;Debian Squeeze&lt;&#x2F;a&gt;,
the current &#x27;stable&#x27; release. The instructions here are very specific,
so look &lt;a href=&quot;http:&#x2F;&#x2F;agiletesting.blogspot.com&#x2F;2005&#x2F;05&#x2F;installing-and-using-cxoracle-on-unix.html&quot;&gt;elsewhere&lt;&#x2F;a&gt; for something more generic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;downloads&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Get registered on Oracle website, and download
oracle-instantclient11.2-basic*.rpm (~40MB).&lt;&#x2F;li&gt;
&lt;li&gt;Get &lt;a href=&quot;http:&#x2F;&#x2F;cx-oracle.sourceforge.net&#x2F;&quot;&gt;cx-Oracle&lt;&#x2F;a&gt; rpm for your specific Python version and your
specific processor (in my case, 3.1 and i386 respectively).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;installation and setup&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;sudo apt-get install libpython3.1 libaio1 alien
sudo alien --install oracle-instantclient11.2-basic*rpm cx_Oracle*rpm
sudo ln -s &#x2F;usr&#x2F;lib&#x2F;python3.1&#x2F;site-packages&#x2F;cx_Oracle.so &#x2F;usr&#x2F;lib&#x2F;python3.1&#x2F;lib-dynload
sudo ln -s &#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;11.2&#x2F;client&#x2F;lib&#x2F;libnnz11.so &#x2F;usr&#x2F;lib
sudo ln -s &#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;11.2&#x2F;client&#x2F;lib&#x2F;libclntsh.so.11.1 &#x2F;usr&#x2F;lib
echo export LD_LIBRARY_PATH=&#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;11.2&#x2F;client&#x2F;lib &amp;gt;&amp;gt; ~&#x2F;.bashrc
source ~&#x2F;.bashrc
python3 -c &amp;#39;import cx_Oracle&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If that last line executes without printing a message to the screen, the
install is most likely successful.&lt;&#x2F;p&gt;
&lt;p&gt;For basic usage, see &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;basic-usage-of-python-with-oracle-db-in-debian&quot;&gt;this tiny tutorial&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>my pet project</title>
                <pubDate>Wed, 09 Jun 2010 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/my-pet-project/</link>
                <guid>http://tshepang.net/my-pet-project/</guid>
                <description>&lt;p&gt;I&#x27;ve been working on a personal (unofficial) project for some weeks now
at work whose goal is automated testing of the system I maintain at
work. The system involves interfacing with Oracle, and the UI I used for
that is the retarded (blocky, and ugly UI, resource hog) Oracle SQL
Developer. I couldn&#x27;t find any real alternatives after a cursory
search, and had to live with this pain for too many months. I decided to
write something in Python to achieve the common tasks of updating and
viewing specific parts of the DB. Having succeeded, I decided to turn
the script into a test suite that would eliminate the laborious and
error-prone process of doing the testing manually, a process which,
among other things, involves tweaking xml files, and using that damned
SQL Developer! I&#x27;m not-so-many-hours away from completing this 200+
line masterpiece of mine, and here&#x27;s what I used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;py3k&#x2F;&quot;&gt;3.1&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;modules: &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;py3k&#x2F;library&#x2F;xml.etree.elementtree.html#module-xml.etree.ElementTree&quot;&gt;xml.etree.ElementTree&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;py3k&#x2F;library&#x2F;configparser.html#module-configparser&quot;&gt;configparser&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;py3k&#x2F;library&#x2F;sys&quot;&gt;sys&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;docs.python.org&#x2F;py3k&#x2F;library&#x2F;time&quot;&gt;time&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;3rd party module: &lt;a href=&quot;http:&#x2F;&#x2F;cx-oracle.sourceforge.net&#x2F;html&#x2F;index.html&quot;&gt;cx_Oracle&lt;&#x2F;a&gt; (which prompted me to write
&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;accessing-oracle-db-using-python-in-debian&quot;&gt;instructions&lt;&#x2F;a&gt; for installing and setting it up)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Python people vs. Java people</title>
                <pubDate>Tue, 04 May 2010 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/python-people-vs-java-people/</link>
                <guid>http://tshepang.net/python-people-vs-java-people/</guid>
                <description>&lt;p&gt;Now this is one heck of a controversial quote by the best computer
programming blogger in my memory:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;...when you choose a language, you&#x27;re also choosing a community. The
programmers you&#x27;ll be able to hire to work on a Java project won&#x27;t
be as &lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;pypar.html&quot;&gt;smart&lt;&#x2F;a&gt; as the ones you could get to work on a project written
in Python.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
            </item>
        
            <item>
                <title>Python, Perl, and now Java</title>
                <pubDate>Tue, 05 May 2009 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/python-perl-and-now-java/</link>
                <guid>http://tshepang.net/python-perl-and-now-java/</guid>
                <description>&lt;p&gt;I&#x27;m grateful that there&#x27;s so much I&#x27;m learning at &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;me-got-meself-a-coding-job&quot;&gt;my new job&lt;&#x2F;a&gt;, stuff
I wouldn&#x27;t really learn on my own, like Perl (this one out of
curiosity, especially because it&#x27;s a major competitor of my favorite,
Python).&lt;&#x2F;p&gt;
&lt;p&gt;I write this post in response to the fact that now I will be learning
Java, what I secretly swore I&#x27;d stay away from, not because it&#x27;s bad,
but because it&#x27;s hard to find anyone favouring it in my world (Debian,
GNOME, Python), a world that proclaim it to be a disgusting pile of
shit. Anyways let&#x27;s see how the ride will pan out.&lt;&#x2F;p&gt;
&lt;p&gt;As for Perl, I found its string-handling capabilities exceedingly
powerful but its syntax ugly and over-varied +++ too much of a free-form
language. That&#x27;s bad for someone used to the gracious elegance of
mighty Python. If I could stay away from it, I would!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>my 1st Python tool</title>
                <pubDate>Fri, 07 Nov 2008 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/my-1st-python-tool/</link>
                <guid>http://tshepang.net/my-1st-python-tool/</guid>
                <description>&lt;p&gt;A senior of mine at my current job has asked me to write a tool to
convert from &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Universal_File_Format&quot;&gt;UFF format&lt;&#x2F;a&gt; to csv for easy spreadsheet processing,
producing results that proved most beneficial to me (the path towards
code mastery). The tool is less than 200 lines of Python code, and I
even got a peek at the necessary changes to have it run on Python 3 (and
successfully doing so), as well as experiencing the relatively
unchallenging problems of getting it to run on Windows XP (it was
developed on Debian). Of course I would not have bothered had the
requirement not been getting it to run on that most popular of end-user
OSes. But Python&#x27;s cross-platform nature makes it easy, and their work
on getting the supporting suite (installer, IDE, Python shell) easy to
install and run on Windows deserves serious respect.&lt;&#x2F;p&gt;
&lt;p&gt;By the way I haven&#x27;t so far learned the importance&#x2F;use of classes so
the entire thing is in functions. And the code is also extremely slow
(and even slower on WinXP) and only does basic checks for the validity
of the source file to be processed so will loudly crash on corrupted
files. Other than that, the tool is pretty robust and made my &#x27;client&#x27;
real happy, considering the previous tool was really broken by design (a
pain to work with, being muddled with severe limitations) and also
relied on Matlab being installed.&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
