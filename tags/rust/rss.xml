<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tshepang logs</title>
        <link>http://tshepang.net</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="http://tshepang.net/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Sun, 27 Oct 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>speed of current laptops</title>
                <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/speed-of-current-laptops/</link>
                <guid>http://tshepang.net/speed-of-current-laptops/</guid>
                <description>&lt;p&gt;I decided to get me my dream laptop, a Lenovo X1 Carbon (code 20KGS3X910).
It has amazing keyboard (as promised) as well as amazing touchpad.
The performance is sad though, less than my work laptop,
an Asus UX410 (itself a replacement of &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;asus-zenbook-ux305fa&quot;&gt;the UX305&lt;&#x2F;a&gt; whose battery circuitry got fried).&lt;&#x2F;p&gt;
&lt;p&gt;To check performance, I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;json-benchmark&quot;&gt;Rust JSON Benchmark&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;json-benchmark
cd json-benchmark
git checkout 1d4986c2083c8f164f86116f19d70dd32b7519bf
rustup default 1.38.0
cargo run --release --bin json-benchmark
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Results for the X1 Carbon:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                                DOM                  STRUCT
======= serde_json ======= parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         140 MB&#x2F;s   290 MB&#x2F;s   340 MB&#x2F;s   230 MB&#x2F;s
data&#x2F;citm_catalog.json   240 MB&#x2F;s   390 MB&#x2F;s   560 MB&#x2F;s   530 MB&#x2F;s
data&#x2F;twitter.json        170 MB&#x2F;s   530 MB&#x2F;s   380 MB&#x2F;s   540 MB&#x2F;s

======= json-rust ======== parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         310 MB&#x2F;s   600 MB&#x2F;s
data&#x2F;citm_catalog.json   440 MB&#x2F;s   500 MB&#x2F;s
data&#x2F;twitter.json        310 MB&#x2F;s   620 MB&#x2F;s

==== rustc_serialize ===== parse|stringify ===== parse|stringify ====
data&#x2F;canada.json          98 MB&#x2F;s    39 MB&#x2F;s    71 MB&#x2F;s    30 MB&#x2F;s
data&#x2F;citm_catalog.json   110 MB&#x2F;s   130 MB&#x2F;s    81 MB&#x2F;s   140 MB&#x2F;s
data&#x2F;twitter.json         61 MB&#x2F;s   250 MB&#x2F;s    49 MB&#x2F;s   260 MB&#x2F;s

======= simd-json ======== parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         250 MB&#x2F;s   320 MB&#x2F;s   420 MB&#x2F;s
data&#x2F;citm_catalog.json   650 MB&#x2F;s   470 MB&#x2F;s   920 MB&#x2F;s
data&#x2F;twitter.json        520 MB&#x2F;s   530 MB&#x2F;s   620 MB&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Results for the UX305:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                                DOM                  STRUCT
======= serde_json ======= parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         240 MB&#x2F;s   510 MB&#x2F;s   570 MB&#x2F;s   390 MB&#x2F;s
data&#x2F;citm_catalog.json   370 MB&#x2F;s   680 MB&#x2F;s   920 MB&#x2F;s   890 MB&#x2F;s
data&#x2F;twitter.json        290 MB&#x2F;s   900 MB&#x2F;s   640 MB&#x2F;s   920 MB&#x2F;s

======= json-rust ======== parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         500 MB&#x2F;s   990 MB&#x2F;s
data&#x2F;citm_catalog.json   700 MB&#x2F;s   860 MB&#x2F;s
data&#x2F;twitter.json        520 MB&#x2F;s  1030 MB&#x2F;s

==== rustc_serialize ===== parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         160 MB&#x2F;s    65 MB&#x2F;s   120 MB&#x2F;s    51 MB&#x2F;s
data&#x2F;citm_catalog.json   170 MB&#x2F;s   210 MB&#x2F;s   120 MB&#x2F;s   240 MB&#x2F;s
data&#x2F;twitter.json        100 MB&#x2F;s   410 MB&#x2F;s    80 MB&#x2F;s   440 MB&#x2F;s

======= simd-json ======== parse|stringify ===== parse|stringify ====
data&#x2F;canada.json         380 MB&#x2F;s   490 MB&#x2F;s   650 MB&#x2F;s
data&#x2F;citm_catalog.json  1000 MB&#x2F;s   790 MB&#x2F;s  1540 MB&#x2F;s
data&#x2F;twitter.json        870 MB&#x2F;s   900 MB&#x2F;s  1030 MB&#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>Rust 2.0 wishlist</title>
                <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-2-0-wishlist/</link>
                <guid>http://tshepang.net/rust-2-0-wishlist/</guid>
                <description>&lt;h3 id=&quot;lang&quot;&gt;lang&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Assigning values to struct bindings should use the equal sign, not
the colon:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Shoe { size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, style: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sneaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; dream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Shoe { size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, style = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sneaker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; };
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would be consistent with the rest of the language.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;std&quot;&gt;std&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;All collections types removed, except these basic ones: Vec,
HashMap, and HashSet. Also, they would also be available from
top-level (i.e. &lt;code&gt;std::{Vec, HashMap, HashSet}&lt;&#x2F;code&gt;), resulting in
&lt;code&gt;std::collections&lt;&#x2F;code&gt; removal.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rename Vec to Array, a more clear&#x2F;obvious name&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Consistent names for string-y types:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;current&lt;&#x2F;th&gt;&lt;th&gt;wish&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;string&lt;&#x2F;td&gt;&lt;td&gt;str&lt;&#x2F;td&gt;&lt;td&gt;Str&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;String&lt;&#x2F;td&gt;&lt;td&gt;StrOwned&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;os string&lt;&#x2F;td&gt;&lt;td&gt;OsStr&lt;&#x2F;td&gt;&lt;td&gt;OsStr (same)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;OsString&lt;&#x2F;td&gt;&lt;td&gt;OsStrOwned&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;fs path&lt;&#x2F;td&gt;&lt;td&gt;Path&lt;&#x2F;td&gt;&lt;td&gt;Path (same)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;PathBuf&lt;&#x2F;td&gt;&lt;td&gt;PathOwned&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Not exactly happy with above, but much better than the current &#x27;mess&#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Remove &lt;code&gt;std::sync::mpsc&lt;&#x2F;code&gt; from stdlib, making it available
externally... it does not feel general enough. (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;42397#issuecomment-315867774&quot;&gt;more issues&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Remove the &lt;code&gt;try!&lt;&#x2F;code&gt; macro... it has a better replacement in the form
of the question_mark (&lt;code&gt;?&lt;&#x2F;code&gt;) operator.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;cargo&quot;&gt;cargo&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Do not allow crate names with underscores, because taste...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;lazy_static&lt;&#x2F;code&gt; (bad)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;regex-syntax&lt;&#x2F;code&gt; (good)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2018-02-01</title>
                <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2018-02-01/</link>
                <guid>http://tshepang.net/rust-week-of-2018-02-01/</guid>
                <description>&lt;p&gt;I used &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde_rusqlite&quot;&gt;serde_rusqlite&lt;&#x2F;a&gt; for the first time, and thought it was
fantastic, if leveraging the wonderful serde framework. On a related
note, it was kool to discover the &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;container-attrs.html#serderenameall--&quot;&gt;rename_all attribute of serde&lt;&#x2F;a&gt;,
which helps reduce noise. Another attribute that reduces noise is
&lt;code&gt;[allow(dead_code)]&lt;&#x2F;code&gt;, which is also handy when using serde.&lt;&#x2F;p&gt;
&lt;p&gt;I did a bunch of work on &lt;code&gt;--access-remote&lt;&#x2F;code&gt; option of mrh, fixing bugs
and letting it support usage of ssh-agent. This was inspired by a friend
pushing me to make &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;7vb3u7&#x2F;announcing_mrh_the_multigitrepo_helper&quot;&gt;an announcement&lt;&#x2F;a&gt;, which I promised would happen
before &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tshepang_dev&#x2F;status&#x2F;960955091296702466&quot;&gt;2018-02-06 meetup&lt;&#x2F;a&gt;, and something I haven&#x27;t done before.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2018-01-25</title>
                <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2018-01-25/</link>
                <guid>http://tshepang.net/rust-week-of-2018-01-25/</guid>
                <description>&lt;p&gt;Continuing on &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2017-10-05&quot;&gt;a work project&lt;&#x2F;a&gt; I mentioned months ago,
I had &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libpnet&#x2F;libpnet&#x2F;issues&#x2F;309&quot;&gt;a failure related to cross-building pnet&lt;&#x2F;a&gt;,
a library I was using to get network interfaces.
As a side note, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;japaric&#x2F;cross&#x2F;issues&#x2F;39&quot;&gt;the fault was in the build process&lt;&#x2F;a&gt;,
not the crate itself.
I tried a few others as replacement:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;getaddrs&quot;&gt;getaddrs&lt;&#x2F;a&gt; can&#x27;t find ip address, and it&#x27;s abandoned according to
the author, in favor of &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;nix&quot;&gt;nix crate&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;interfaces&quot;&gt;interfaces&lt;&#x2F;a&gt; also fails to cross build, and I forgot that I actually
tried it before, and was the reason I moved to pnet in the first
place&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;systemstat&quot;&gt;systemstat&lt;&#x2F;a&gt; works, and I already use it for a few things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;load average&lt;&#x2F;li&gt;
&lt;li&gt;memory usage&lt;&#x2F;li&gt;
&lt;li&gt;uptime&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, that&#x27;s one less dependency, though I do wish this functionality
was available from a more pleasant API... &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;systemstat&quot;&gt;systemstat&lt;&#x2F;a&gt; is ugly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a general note, I wish more people took the effort to state in the
README if their software is abandoned, perhaps with mentions of
alternatives.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2018-01-18</title>
                <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2018-01-18/</link>
                <guid>http://tshepang.net/rust-week-of-2018-01-18/</guid>
                <description>&lt;p&gt;I did very little Rust on week of 2018-01-11,
but &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tshepang&#x2F;mrh&#x2F;commit&#x2F;0bb76224978fca2324ae7b673472b68033db5a78&quot;&gt;added --ignore-uncommitted-repos to mrh&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This week was more active...&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I used the fantastic &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;dialoguer&quot;&gt;dialoguer&lt;&#x2F;a&gt; for the first time... so pleasant,
resulting in much cleaner code for a private project.&lt;&#x2F;li&gt;
&lt;li&gt;For &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2017-10-05&quot;&gt;the work project I mentioned some months ago&lt;&#x2F;a&gt;, I added a
feature to check if certain ports of a remote machine are reachable.
The bigger part though was it &#x27;forced&#x27; me to refactor the code,
since the various bits needed checking at different intervals... in
my case, as an example, I check port reachability once in 60
seconds, but would check load average once in 6.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2018-01-04</title>
                <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2018-01-04/</link>
                <guid>http://tshepang.net/rust-week-of-2018-01-04/</guid>
                <description>&lt;p&gt;Some more work on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt;, I added the ability to check if there are
unpulled commits as well as if there are tags that aren&#x27;t pushed
upstream. The latter is what motivated this work, a feature useful for
work, to avoid forgetting pushing tags. This meant doing the dreaded
work of accessing the remote repo, which is complicated by potentially
having to authenticate, in the case of private repos for example. It was
painful (we need an easier git library), but it works (but so damn
slow). The result is version 0.9.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-12-28</title>
                <pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-12-28/</link>
                <guid>http://tshepang.net/rust-week-of-2017-12-28/</guid>
                <description>&lt;p&gt;Very little Rust last week, but this week I played some with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ticki&#x2F;termion&quot;&gt;termion&lt;&#x2F;a&gt;
for some user interface on a private project. I borrowed some of the
code from &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-weeks-of-2017-09-14-to-2017-09-28&quot;&gt;a project I mentioned previously&lt;&#x2F;a&gt;, one where I used the
library for the first time. As was the case with that project, I found
handling of keyboard input tedious and non-intuitive, and imagine there
must be an easier way.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;We had &lt;a href=&quot;https:&#x2F;&#x2F;www.meetup.com&#x2F;Johannesburg-Rust-Meetup&#x2F;events&#x2F;246240196&quot;&gt;another monthly meetup&lt;&#x2F;a&gt; (we&#x27;ve had several of them so far),
which was the usual random informal discussion of the exciting ecosystem
of the great language that is Rust.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-12-14</title>
                <pubDate>Thu, 21 Dec 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-12-14/</link>
                <guid>http://tshepang.net/rust-week-of-2017-12-14/</guid>
                <description>&lt;p&gt;Some more work on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A friend did me a nice favor of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tshepang&#x2F;mrh&#x2F;pull&#x2F;1&quot;&gt;creating an Iterator for Crawler&lt;&#x2F;a&gt;,
a task I failed at after 2 attempts... I don&#x27;t yet truly get Rust
lifetimes&lt;&#x2F;li&gt;
&lt;li&gt;Based on that work, I turned &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mrh&#x2F;0.8.1&#x2F;mrh&#x2F;struct.Crawler.html&quot;&gt;Crawler&lt;&#x2F;a&gt; itself into an Iterator&lt;&#x2F;li&gt;
&lt;li&gt;I added YAML and JSON output; they are behind a compile flag, since
they bring with them some slow-compiling dependencies, and I don&#x27;t
expect the features would be a common need&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-12-07</title>
                <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-12-07/</link>
                <guid>http://tshepang.net/rust-week-of-2017-12-07/</guid>
                <description>&lt;p&gt;Some more work on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use ordermap for repeatable output&lt;&#x2F;li&gt;
&lt;li&gt;Turn into a library (backed by the command-line tool), which is a
first for me (libs are more hard than apps, and helpfully force one
to do a better design).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I experienced some failures too:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I looked to using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;termcolor&quot;&gt;termcolor&lt;&#x2F;a&gt; (used by ripgrep and cargo, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kbknapp&#x2F;clap-rs&#x2F;issues&#x2F;836&quot;&gt;may
replace termcolor in clap&lt;&#x2F;a&gt;), but found it too hard to use... API
not as pleasant&lt;&#x2F;li&gt;
&lt;li&gt;I also failed to turn output into an iterator (instead of Vec)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-11-30</title>
                <pubDate>Sat, 09 Dec 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-11-30/</link>
                <guid>http://tshepang.net/rust-week-of-2017-11-30/</guid>
                <description>&lt;p&gt;Like last week, I did some more work on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Replace &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;colored&quot;&gt;colored&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;ansi_term&quot;&gt;ansi_term&lt;&#x2F;a&gt; (I prefer the API, and the latter
was already a dependency of something else)&lt;&#x2F;li&gt;
&lt;li&gt;Remove &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;walkdir&#x2F;2.0.1&#x2F;walkdir&#x2F;struct.WalkDir.html#method.follow_links&quot;&gt;follow_symlinks&lt;&#x2F;a&gt; feature (caused weird behavior)&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;path&#x2F;struct.Path.html#method.strip_prefix&quot;&gt;Path.strip_prefix&lt;&#x2F;a&gt; instead of a custom solution&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For work (lucky me), I did a small tool that converts data from a CSV
file containing network ports and their descriptions to a format that
&lt;a href=&quot;https:&#x2F;&#x2F;www.elastic.co&#x2F;products&#x2F;logstash&quot;&gt;logstash&lt;&#x2F;a&gt; can use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I used &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;ordermap&quot;&gt;csv&lt;&#x2F;a&gt; crate first time, an experience made pleasant by serde&lt;&#x2F;li&gt;
&lt;li&gt;I also used &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;csv&quot;&gt;ordermap&lt;&#x2F;a&gt; first time, chosen because I care for output
to match order in csv source file&lt;&#x2F;li&gt;
&lt;li&gt;Another first was &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tera&quot;&gt;tera&lt;&#x2F;a&gt;, and its immaturity surprised me&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-11-23</title>
                <pubDate>Wed, 29 Nov 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-11-23/</link>
                <guid>http://tshepang.net/rust-week-of-2017-11-23/</guid>
                <description>&lt;p&gt;There wasn&#x27;t much last week, other than continuing with the functional
testing work that queries Elasticsearch. This week, however, saw me
extending &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt; (Pending is a repo state that requires action):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Allow ignoring Untracked files in output (feature request from a
friend)&lt;&#x2F;li&gt;
&lt;li&gt;Distinguish Untracked state from other Pendings&lt;&#x2F;li&gt;
&lt;li&gt;Add 3 more Pendings: added, removed, renamed&lt;&#x2F;li&gt;
&lt;li&gt;Do not quit after encountering malformed repos&lt;&#x2F;li&gt;
&lt;li&gt;Add color to output (via colored)&lt;&#x2F;li&gt;
&lt;li&gt;Add option to display absolute paths&lt;&#x2F;li&gt;
&lt;li&gt;Check if HEAD is tagged (with &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;47500612&#x2F;321731&quot;&gt;some help from Stack Overflow&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I am glad.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-11-09</title>
                <pubDate>Wed, 15 Nov 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-11-09/</link>
                <guid>http://tshepang.net/rust-week-of-2017-11-09/</guid>
                <description>&lt;p&gt;I&#x27;ve done nothing regarding the previous two weeks, but this week had a
look at Elasticsearch crates, as part of an effort to do some functional
testing of the system at work. What I found was &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;elastic&#x2F;*&#x2F;elastic&quot;&gt;a forest of APIs&lt;&#x2F;a&gt;
without a good guide, but eventually ended up with something that
queries the DB and checks if certain injected data appears. I wish there
was an easy way of doing queries without having to resort to using the
json! macro:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; query = json!({
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
        { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, } }
    ],
    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;must&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: [
                { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;term&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;marker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; } },
                { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: {
                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;now-100s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;lte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                }}},
            ]
        }
    }
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;elastic-rs&#x2F;elastic&#x2F;tree&#x2F;master&#x2F;src&#x2F;queries&quot;&gt;crate that allows such typed queries&lt;&#x2F;a&gt; happens to be incomplete and
undocumented, so will ignore it for now.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-10-19</title>
                <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-10-19/</link>
                <guid>http://tshepang.net/rust-week-of-2017-10-19/</guid>
                <description>&lt;p&gt;I released &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt; v0.2.0, which takes into account that when latest
upstream git reference does not match one that&#x27;s checked out, it could
be that upstream is ahead. The assumption previously was that local is
ahead of upstream, implying that a push is needed. The API that helped
with this change is &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;git2&#x2F;0.6.8&#x2F;git2&#x2F;struct.Repository.html#method.graph_ahead_behind&quot;&gt;Repository.grapth_ahead_behind&lt;&#x2F;a&gt;, a lovely and
unexpected gift (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tshepang&#x2F;mrh&#x2F;commit&#x2F;fc82fe9890cf3a8033fa78295308d888628caa39&quot;&gt;commit&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I used &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-outdated&quot;&gt;cargo-outdated&lt;&#x2F;a&gt; for the first time... I like.&lt;&#x2F;p&gt;
&lt;p&gt;I also released &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;panoptix-za&#x2F;tag-helper&quot;&gt;tag-helper&lt;&#x2F;a&gt;, whose development was sponsored by
&lt;a href=&quot;https:&#x2F;&#x2F;www.panoptix.co.za&#x2F;&quot;&gt;Panoptix&lt;&#x2F;a&gt;, the company I work for. The tool helps reduce the tedium of
tagging git repos, of which we have a bunch.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-10-05</title>
                <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-10-05/</link>
                <guid>http://tshepang.net/rust-week-of-2017-10-05/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-weeks-of-2017-09-14-to-2017-09-28&quot;&gt;Continuing with the work project&lt;&#x2F;a&gt;, I replaced the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andrew-d&#x2F;interfaces-rs&quot;&gt;interfaces&lt;&#x2F;a&gt; library
with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libpnet&#x2F;libpnet&quot;&gt;pnet&lt;&#x2F;a&gt;, a weird concoction of various network functionality in one
ugly mess, but I did it because the order of the network interfaces it
presents does not randomly change (the project is UI that presents
various bits of info about the boxes that we sell, some of which is
network-related), unlike is the case with &lt;em&gt;interfaces&lt;&#x2F;em&gt;. It is also
comforting that the library has more users (&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;interfaces&#x2F;reverse_dependencies&quot;&gt;one&lt;&#x2F;a&gt; vs. &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;pnet&#x2F;reverse_dependencies&quot;&gt;eight&lt;&#x2F;a&gt; at time of
writing).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust weeks of 2017-09-14 to 2017-09-28</title>
                <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-weeks-of-2017-09-14-to-2017-09-28/</link>
                <guid>http://tshepang.net/rust-weeks-of-2017-09-14-to-2017-09-28/</guid>
                <description>&lt;p&gt;Over the past 3 weeks, I continued work on &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2017-09-07&quot;&gt;a project I mentioned
previously&lt;&#x2F;a&gt;, a CLI UI for work. In addition to dependencies mentioned
there, I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zonyitoo&#x2F;rust-ini&quot;&gt;rust-ini&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;serde-yaml&quot;&gt;serde_yaml&lt;&#x2F;a&gt;. I mostly enjoyed the
experience, though not too happy with the code, which feels messy... I
use &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;termion&#x2F;1.5.1&#x2F;termion&#x2F;struct.AsyncReader.html&quot;&gt;termion::AsyncReader&lt;&#x2F;a&gt;, which means I have to loop all over the place
while waiting for stdin (keyboard input). I imagine there is a better
way.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-09-07</title>
                <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-09-07/</link>
                <guid>http://tshepang.net/rust-week-of-2017-09-07/</guid>
                <description>&lt;p&gt;I had the fortune of building a Rust project at work, and following are
the libraries I used:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ticki&#x2F;termion&quot;&gt;termion&lt;&#x2F;a&gt; just to clear the screen. API looks kool, and I
plan to use it for other stuff, like text (and password) input.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;myfreeweb&#x2F;systemstat&quot;&gt;systemstat&lt;&#x2F;a&gt; has an ugly API, and relies on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flang-project&#x2F;bytesize&quot;&gt;bytesize&lt;&#x2F;a&gt; for system
memory data, whose API is not obvious, and has &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flang-project&#x2F;bytesize&#x2F;issues&#x2F;8&quot;&gt;a rather ugly
display bug&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andrew-d&#x2F;interfaces-rs&quot;&gt;interfaces&lt;&#x2F;a&gt; has an okay API, but the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;interfaces&#x2F;0.0.2&#x2F;interfaces&#x2F;struct.Interface.html#method.get_all&quot;&gt;get_all&lt;&#x2F;a&gt; method simply does
not belong to a type named Interface.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-08-31</title>
                <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-08-31/</link>
                <guid>http://tshepang.net/rust-week-of-2017-08-31/</guid>
                <description>&lt;p&gt;Week of 2017-08-24 did not really see any Rust activity. This week,
however, I worked on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tshepang&#x2F;mrh&quot;&gt;mrh&lt;&#x2F;a&gt;, a tool I created in order to look at status
of multiple git repos, to avoid the tedium of navigating to each to
check. The feature I added is checking if committed changes were pushed
upstream. On the way there, I encountered these git2 APIS:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;git2&#x2F;0.6.8&#x2F;git2&#x2F;struct.Branch.html#method.wrap&quot;&gt;Branch::wrap&lt;&#x2F;a&gt; (submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;git2-rs&#x2F;pull&#x2F;246&quot;&gt;improvement to make doc less misleading&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;git2&#x2F;0.6.8&#x2F;git2&#x2F;struct.Branch.html#method.upstream&quot;&gt;Branch::upstream&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;git2&#x2F;0.6.8&#x2F;git2&#x2F;struct.Repository.html#method.head&quot;&gt;Repositoty::head&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I ended up &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mrh&quot;&gt;publishing the tool&lt;&#x2F;a&gt; too, which is the second time &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;weeks-from-now&quot;&gt;I&#x27;ve
done so&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-08-10</title>
                <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-08-10/</link>
                <guid>http://tshepang.net/rust-week-of-2017-08-10/</guid>
                <description>&lt;p&gt;I created a tool I named &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tshepang&#x2F;mrh&quot;&gt;mrh (multiple git repo helper)&lt;&#x2F;a&gt;, which does a
recursive search for git repos and checks if there are changes not
committed. It&#x27;s very useful for work, for we have a bunch of tiny
repos, and it was such a pain to navigate to each and check status. I am
so glad.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-08-03</title>
                <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-08-03/</link>
                <guid>http://tshepang.net/rust-week-of-2017-08-03/</guid>
                <description>&lt;p&gt;My first upload to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;the official Rust registry&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;weeks-from-now&quot;&gt;weeks-from-now&lt;&#x2F;a&gt;.
Finally!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-07-27 (special edition)</title>
                <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-07-27-special-edition/</link>
                <guid>http://tshepang.net/rust-week-of-2017-07-27-special-edition/</guid>
                <description>&lt;p&gt;I been using this series to help push me into constant Rust activity,
ensuring I do not skip a week sitting idle. It worked in that, indeed,
no 7 days passed without a single contribution to the ecosystem, no
matter how tiny, and this has been going on for over a 100 weeks (i.e.
&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2015-05-15&quot;&gt;since 2015-05-15&lt;&#x2F;a&gt;, the Rust 1.0 release date).&lt;&#x2F;p&gt;
&lt;p&gt;The problem is I felt silly recording the tiny parts, stuff like a typo
fixes, just to keep this going. Well, it&#x27;s time to stop that. I intend
to avoid recording such, even if it means no blog post for that week.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This was inspired by having a laptop failure, with a draft that wasn&#x27;t
backed up anywhere. That draft only consisted of a list of those tiny
contributions, and it felt extra silly trying to recreate it for
publication.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-07-13</title>
                <pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-07-13/</link>
                <guid>http://tshepang.net/rust-week-of-2017-07-13/</guid>
                <description>&lt;p&gt;I am tempted, &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2017-01-06&quot;&gt;once again&lt;&#x2F;a&gt;, to try out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Wilfred&#x2F;remacs&quot;&gt;Remacs&lt;&#x2F;a&gt;, a Rust port of GNU
Emacs. It&#x27;s very encouraging that it tries to be compatible, for the
drop-in-replacement effect.&lt;&#x2F;p&gt;
&lt;p&gt;I am glad &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&#x2F;pull&#x2F;17&quot;&gt;the change to add subcommands to structopt&lt;&#x2F;a&gt; has been merged.
It was the one important missing piece to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;this wonderful project&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-06-22</title>
                <pubDate>Sun, 25 Jun 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-06-22/</link>
                <guid>http://tshepang.net/rust-week-of-2017-06-22/</guid>
                <description>&lt;p&gt;I wrote a tool that helps with &lt;a href=&quot;http:&#x2F;&#x2F;semver.org&quot;&gt;semver&lt;&#x2F;a&gt; git tagging, which made me
explore the rather large (and unfriendly) API of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alexcrichton&#x2F;git2-rs&quot;&gt;git2-rs library&lt;&#x2F;a&gt;. It
needs lots of love, or at least a more idiomatic replacement.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-06-15</title>
                <pubDate>Wed, 21 Jun 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-06-15/</link>
                <guid>http://tshepang.net/rust-week-of-2017-06-15/</guid>
                <description>&lt;p&gt;I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;structopt&lt;&#x2F;a&gt; for the first time, and found it reduces the pain of
CLI parsing (via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kbknapp&#x2F;clap-rs&quot;&gt;clap&lt;&#x2F;a&gt;). Its main shortcoming is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&#x2F;issues&#x2F;1&quot;&gt;lack of subcommand
support&lt;&#x2F;a&gt;, whose implementation would make it a go-to for me.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-04-13</title>
                <pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-04-13/</link>
                <guid>http://tshepang.net/rust-week-of-2017-04-13/</guid>
                <description>&lt;p&gt;Continuing on the work from &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2017-04-06&quot;&gt;last week&lt;&#x2F;a&gt;, I found a far more pleasant
MQTT client library, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mqttc&quot;&gt;mqttc&lt;&#x2F;a&gt;, and managed to send &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tailhook&#x2F;probor&quot;&gt;probor&lt;&#x2F;a&gt; messages
across.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-04-06</title>
                <pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-04-06/</link>
                <guid>http://tshepang.net/rust-week-of-2017-04-06/</guid>
                <description>&lt;p&gt;I enjoyed working with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tailhook&#x2F;probor&quot;&gt;probor&lt;&#x2F;a&gt;, which is a protocol built on top of
CBOR data format.
I managed to turn JSON
to CBOR on one side of a TCP socket, and decode it back to JSON on the
other side (using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;json&quot;&gt;serde_json&lt;&#x2F;a&gt;). I failed, however, transporting that
CBOR data over MQTT (using the oh-so-complex &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zonyitoo&#x2F;mqtt-rs&quot;&gt;mqtt-rs&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-02-23</title>
                <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-02-23/</link>
                <guid>http://tshepang.net/rust-week-of-2017-02-23/</guid>
                <description>&lt;p&gt;I was glad to have the Python equivalent of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;shlex&quot;&gt;shlex&lt;&#x2F;a&gt; crate, which
understands shell quoting, helping in transforming command arguments
into what&#x27;s suitable to send to &lt;code&gt;process::Command::args&lt;&#x2F;code&gt;. This allows
one to avoid the pain experienced by naively doing the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; command = command.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::is_whitespace);
std::process::Command::new(command.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(command)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the command is something like &lt;code&gt;hg commit --message &#x27;git eat world&#x27;&lt;&#x2F;code&gt;,
then the iterator would expand to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hg&lt;&#x2F;li&gt;
&lt;li&gt;commit&lt;&#x2F;li&gt;
&lt;li&gt;--message&lt;&#x2F;li&gt;
&lt;li&gt;&#x27;git&lt;&#x2F;li&gt;
&lt;li&gt;eat&lt;&#x2F;li&gt;
&lt;li&gt;world&#x27;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That will not run, and will fail with a not-obvious error message. Using
shlex, we instead:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; command = shlex::split(command).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
std::process::Command::new(command.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(command)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
 ...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output should then be like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hg&lt;&#x2F;li&gt;
&lt;li&gt;commit&lt;&#x2F;li&gt;
&lt;li&gt;--message&lt;&#x2F;li&gt;
&lt;li&gt;git eat world&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-02-02</title>
                <pubDate>Thu, 09 Feb 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-02-02/</link>
                <guid>http://tshepang.net/rust-week-of-2017-02-02/</guid>
                <description>&lt;p&gt;I very much enjoyed reading about &lt;a href=&quot;http:&#x2F;&#x2F;aturon.github.io&#x2F;blog&#x2F;2016&#x2F;09&#x2F;07&#x2F;futures-design&quot;&gt;the design of Rust futures&lt;&#x2F;a&gt;. It makes
me highly appreciate the smarts of those involved, and how lucky we are
to have people building excellent abstractions like such. In addition,
it also nicely summarises Rust traits. &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2015-05-22&quot;&gt;I wrote a tiny bit about the
feature&lt;&#x2F;a&gt; myself some time ago.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-01-20</title>
                <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-01-20/</link>
                <guid>http://tshepang.net/rust-week-of-2017-01-20/</guid>
                <description>&lt;p&gt;I enjoyed reading this post about bad C ideas that are seen in other
languages, including Rust. I talked a bit about it &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tshepang_dev&#x2F;status&#x2F;823671209338568704&quot;&gt;on Twitter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I finally did set up my Emacs for code completion (&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;tshepang&#x2F;custom&#x2F;commits&#x2F;717749&quot;&gt;init.el changes&lt;&#x2F;a&gt;),
thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;racer-rust&#x2F;emacs-racer&quot;&gt;an easy guide&lt;&#x2F;a&gt;. I tried many months back and failed for some
reasons I do not remember.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2017-01-06</title>
                <pubDate>Fri, 13 Jan 2017 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2017-01-06/</link>
                <guid>http://tshepang.net/rust-week-of-2017-01-06/</guid>
                <description>&lt;p&gt;I asked &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;41551036&#x2F;321731&quot;&gt;two&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;41614923&#x2F;321731&quot;&gt;questions&lt;&#x2F;a&gt; on Stack Overflow. The first led me to use
the nifty &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;lazy_static&quot;&gt;lazy_static&lt;&#x2F;a&gt; macro for the first time, and the second led me to
submit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;hyper-native-tls&#x2F;issues&#x2F;1&quot;&gt;a complaint&lt;&#x2F;a&gt; (which got fixed within 3 minutes by the way).&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I am looking forward to two projects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.jwilm.io&#x2F;announcing-alacritty&quot;&gt;Alacritty&lt;&#x2F;a&gt;, a fast terminal emulator&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Wilfred&#x2F;remacs&quot;&gt;Remacs&lt;&#x2F;a&gt;, Emacs gradually implemented in Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-12-16</title>
                <pubDate>Sun, 18 Dec 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-12-16/</link>
                <guid>http://tshepang.net/rust-week-of-2016-12-16/</guid>
                <description>&lt;p&gt;I like how easy it seems to create custom template filters, as seen in
&lt;a href=&quot;https:&#x2F;&#x2F;siciarz.net&#x2F;24-days-rust-tera&quot;&gt;this post about tera&lt;&#x2F;a&gt;. I also like the utility of the derive_builder
crate, as described in &lt;a href=&quot;https:&#x2F;&#x2F;siciarz.net&#x2F;24-days-rust-derive_builder&quot;&gt;another post&lt;&#x2F;a&gt; (from the same blog).&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-11-18</title>
                <pubDate>Thu, 24 Nov 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-11-18/</link>
                <guid>http://tshepang.net/rust-week-of-2016-11-18/</guid>
                <description>&lt;p&gt;I was surprised by the ease of use of &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;libflate&quot;&gt;libflate&lt;&#x2F;a&gt; when decompressing a
gzip&#x27;ed file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file = std::fs::File::open(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;file.gz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file = libflate::gzip::Decoder::new(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; file).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_something_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(file);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that&#x27;s it, &lt;code&gt;file&lt;&#x2F;code&gt; is now like a normal file!&lt;&#x2F;p&gt;
&lt;p&gt;Another module I used for the first time is &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;regex&quot;&gt;regex&lt;&#x2F;a&gt;, which seems to have
such a well-designed API actually.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-10-07</title>
                <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-10-07/</link>
                <guid>http://tshepang.net/rust-week-of-2016-10-07/</guid>
                <description>&lt;p&gt;I am impressed by &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;curl&quot;&gt;the documentation of curl-rust&lt;&#x2F;a&gt;. It&#x27;s better than
for all Rust crates I&#x27;ve seen yet, if memory serves well. I am grateful
for the painstaking work it must have been for whoever was
responsible... it&#x27;s a massive API. It could do with more examples
though.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-09-23</title>
                <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-09-23/</link>
                <guid>http://tshepang.net/rust-week-of-2016-09-23/</guid>
                <description>&lt;p&gt;I&#x27;ve been continuing coding in
the field of web development, using Nickel and JWT. It&#x27;s been fun, and
the project should be open to the public in a week or two.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-09-16</title>
                <pubDate>Thu, 22 Sep 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-09-16/</link>
                <guid>http://tshepang.net/rust-week-of-2016-09-16/</guid>
                <description>&lt;p&gt;I looked at &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bcrypt&quot;&gt;bcrypt&lt;&#x2F;a&gt;, which helps with secure password storage. I don&#x27;t
quite understand how it works, but I&#x27;ve seen that it prevents
brute-force attacks... there is lots of CPU usage during hashing and
verification.&lt;&#x2F;p&gt;
&lt;p&gt;I continued playing with Nickel (&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2016-09-02&quot;&gt;started few weeks ago&lt;&#x2F;a&gt;), and am liking
it more, largely due to discovering a less-magical way of doing things
where you&#x27;d use functions instead of a macro named &lt;code&gt;middleware&lt;&#x2F;code&gt;. I&#x27;ve
also been playing with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kaj&#x2F;nickel-jwt-session&quot;&gt;nickel-jwt-session&lt;&#x2F;a&gt;, which offers such a
convenient API to use for working with &lt;a href=&quot;https:&#x2F;&#x2F;jwt.io&quot;&gt;JSON Web Tokens&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-09-02</title>
                <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-09-02/</link>
                <guid>http://tshepang.net/rust-week-of-2016-09-02/</guid>
                <description>&lt;p&gt;Had a look at &lt;a href=&quot;http:&#x2F;&#x2F;diesel.rs&quot;&gt;Diesel&lt;&#x2F;a&gt; and at &lt;a href=&quot;http:&#x2F;&#x2F;nickel.rs&quot;&gt;Nickel&lt;&#x2F;a&gt;. I wish they had better
documentation... I cannot say with good confidence that I understand
them.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-08-12</title>
                <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-08-12/</link>
                <guid>http://tshepang.net/rust-week-of-2016-08-12/</guid>
                <description>&lt;p&gt;I enjoyed a useful (and tiny) library that helps align text nicely.
Following is an example of its usage:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; unindent;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;unindent::unindent;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; text = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;
        A long text is beginning here and not in the previous line,
        because it wouldn&amp;#39;t fit in comfort.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unindent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(text));
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>Rust week of 2016-08-26</title>
                <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-08-26/</link>
                <guid>http://tshepang.net/rust-week-of-2016-08-26/</guid>
                <description>&lt;p&gt;I did learn how to use a TCP socket to communicate between 2 processes.
I found the API quite pleasing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; listener = std::net::TcpListener::bind(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost:80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; stream in listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; content = Vec::new();
    stream?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; content);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do stuff with content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>Rust week of 2016-07-08</title>
                <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-07-08/</link>
                <guid>http://tshepang.net/rust-week-of-2016-07-08/</guid>
                <description>&lt;p&gt;I created my first custom type, a struct with 2 members and one method.
It made my code more clean... when you see your functions accept way
too many arguments, chances are those are related, making it time for a
bit of refactoring. It was fun.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-06-17</title>
                <pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-06-17/</link>
                <guid>http://tshepang.net/rust-week-of-2016-06-17/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zonyitoo&#x2F;rust-ini&quot;&gt;a so nice library&lt;&#x2F;a&gt; that handles a favorite file format of mine, INI&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I was surprised to find that
&lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;37918670&#x2F;321731&quot;&gt;there is no easy&#x2F;clear way to interleave stdout and stderr with the standard library&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-06-10</title>
                <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-06-10/</link>
                <guid>http://tshepang.net/rust-week-of-2016-06-10/</guid>
                <description>&lt;p&gt;I was made sad by the complexity of involving STDIN when using
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;process&quot;&gt;std::process&lt;&#x2F;a&gt; module:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;o_to_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; std::io::Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; p = std::process::Command::new(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(std::process::Stdio::piped())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()?;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; input = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(stdin) = p.stdin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        stdin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())?;
    }
    Ok(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()?.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;success&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I wonder if this can be more easy, in other languages and&#x2F;or libraries.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-06-03</title>
                <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-06-03/</link>
                <guid>http://tshepang.net/rust-week-of-2016-06-03/</guid>
                <description>&lt;p&gt;I did more Rust coding than most weeks this time around, busy with some
project at work. My favorite parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I love the fact that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hannobraun&#x2F;inotify-rs&quot;&gt;inotify-rs&lt;&#x2F;a&gt; (&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2015-07-31&quot;&gt;first mention&lt;&#x2F;a&gt;) collects events
in the background, so that when you are done with whatever task you
were busy with, you can check if there is anything new to act upon
(e.g. a new file was created in a watched directory). This allows
one to do away with using threads, reducing code complexity.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust error handling is so nice, and forces one to think better about
code. As an example, when you doing any I&#x2F;O, you mostly want to do
that in a separate function so that you can return a &lt;code&gt;Result&lt;&#x2F;code&gt; type,
something like &lt;code&gt;Result&amp;lt;(), std::io::Error&amp;gt;&lt;&#x2F;code&gt;. This forces you to
isolate just the I&#x2F;O handling part from the other parts of the
logic, where you&#x27;d maybe just want to return a &lt;code&gt;bool&lt;&#x2F;code&gt; type. In
my case, I would not get any I&#x2F;O error, but I would get failure from
running an external process (see &lt;code&gt;std::process&lt;&#x2F;code&gt; module) where the
exit status was not 0. That meant I&#x2F;O error failure case and the
process error case had to be handled in separate places.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In the example I gave above, &lt;code&gt;Result&amp;lt;(), std::io::Error&amp;gt;&lt;&#x2F;code&gt;, this
means that we don&#x27;t care about the success return value. On the
calling side, we have an option to use a &lt;code&gt;match&lt;&#x2F;code&gt; statement to handle
the result:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    Ok(_) =&amp;gt; (), Err(error) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_something_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(error)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a convenient syntax to deal with such case, where you
don&#x27;t care about one of values... &lt;code&gt;if let&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(error) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_something_with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(error)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So elegant!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-02-19</title>
                <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-02-19/</link>
                <guid>http://tshepang.net/rust-week-of-2016-02-19/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31893&quot;&gt;Just&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31894&quot;&gt;four&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31896&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31897&quot;&gt;submissions&lt;&#x2F;a&gt; this time.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-02-12</title>
                <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-02-12/</link>
                <guid>http://tshepang.net/rust-week-of-2016-02-12/</guid>
                <description>&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31762&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31763&quot;&gt;four&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31764&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31765&quot;&gt;changes&lt;&#x2F;a&gt; this time. I also
enjoyed reading &lt;a href=&quot;http:&#x2F;&#x2F;www.matusiak.eu&#x2F;numerodix&#x2F;blog&#x2F;2016&#x2F;1&#x2F;10&#x2F;two-weeks-rust&#x2F;&quot;&gt;Two Weeks of Rust&lt;&#x2F;a&gt;, a blog post resulting from building
something non-trivial using the language.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of learning, I&#x27;ve always been wondering why one does not need
&lt;code&gt;mut&lt;&#x2F;code&gt; when reading values from an iterator via a &lt;code&gt;for loop&lt;&#x2F;code&gt; , but does
not when reading them using &lt;code&gt;next&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;let it = std::env::args() &#x2F;&#x2F; iterator over CLI arguments for value in it
{ do_something(value); }&lt;&#x2F;p&gt;
&lt;p&gt;&#x2F;&#x2F; versus&lt;&#x2F;p&gt;
&lt;p&gt;let mut it = std::env::args() &#x2F;&#x2F; iterator over CLI arguments
do_something(it.next()); do_something(it.next()); ...
:::&lt;&#x2F;p&gt;
&lt;p&gt;I think with the &lt;code&gt;for loop&lt;&#x2F;code&gt;, &lt;code&gt;it&lt;&#x2F;code&gt; cannot be used anymore, and that&#x27;s
why it can get away with being immutable. I&#x27;m not 100% yet... this
feels like a lousy explanation.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-02-05</title>
                <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-02-05/</link>
                <guid>http://tshepang.net/rust-week-of-2016-02-05/</guid>
                <description>&lt;p&gt;As was the case with so many of the previous entries in this series, I
didn&#x27;t do much this week, submitting a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31582&quot;&gt;mere&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31584&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31585&quot;&gt;changes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-01-29</title>
                <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-01-29/</link>
                <guid>http://tshepang.net/rust-week-of-2016-01-29/</guid>
                <description>&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31411&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31412&quot;&gt;four&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31413&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31415&quot;&gt;changes&lt;&#x2F;a&gt; this time.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-01-22</title>
                <pubDate>Wed, 27 Jan 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-01-22/</link>
                <guid>http://tshepang.net/rust-week-of-2016-01-22/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31241&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31245&quot;&gt;a few&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31246&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31247&quot;&gt;changes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;31242&quot;&gt;requested clarification&lt;&#x2F;a&gt; on one documentation issue&lt;&#x2F;li&gt;
&lt;li&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31244&quot;&gt;results of running rustfmt&lt;&#x2F;a&gt; on a bit of code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-01-15</title>
                <pubDate>Fri, 15 Jan 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-01-15/</link>
                <guid>http://tshepang.net/rust-week-of-2016-01-15/</guid>
                <description>&lt;p&gt;I discovered that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30920&quot;&gt;a change&lt;&#x2F;a&gt; I made last week didn&#x27;t work, so
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30940&quot;&gt;submitted something that works&lt;&#x2F;a&gt; this time around.&lt;&#x2F;p&gt;
&lt;p&gt;I also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31088&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31090&quot;&gt;four&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31092&quot;&gt;doc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;31093&quot;&gt;changes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-01-08</title>
                <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-01-08/</link>
                <guid>http://tshepang.net/rust-week-of-2016-01-08/</guid>
                <description>&lt;p&gt;As usual, I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30909&quot;&gt;submitted&lt;&#x2F;a&gt; a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30910&quot;&gt;number&lt;&#x2F;a&gt; of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30911&quot;&gt;small&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30912&quot;&gt;doc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30914&quot;&gt;changes&lt;&#x2F;a&gt;. I am
particularly proud of the code &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30920&quot;&gt;submission&lt;&#x2F;a&gt; I made to rustdoc to strip
away the annoying whitespace appended before the final closing brace.&lt;&#x2F;p&gt;
&lt;p&gt;In other news, Rust by Example has &lt;a href=&quot;http:&#x2F;&#x2F;rustbyexample.com&#x2F;std&#x2F;box.html&quot;&gt;a very illustrative example&lt;&#x2F;a&gt;
regarding Box type and size of memory usage of data, and it led me to
submit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-by-example&#x2F;pull&#x2F;696&quot;&gt;a tiny improvement&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2016-01-01</title>
                <pubDate>Tue, 05 Jan 2016 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2016-01-01/</link>
                <guid>http://tshepang.net/rust-week-of-2016-01-01/</guid>
                <description>&lt;p&gt;I found &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;thoughts-on-rust-stdlib-and-c-interfacing&#x2F;3036&quot;&gt;an interesting discussion&lt;&#x2F;a&gt; regarding trade-offs of using C
libraries instead of writing ones in Rust. I also submitted one doc
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30702&quot;&gt;change&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-www&#x2F;pull&#x2F;202&quot;&gt;helped review&lt;&#x2F;a&gt; the new Rust FAQ..&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>what I like about Rust</title>
                <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/what-i-like-about-rust/</link>
                <guid>http://tshepang.net/what-i-like-about-rust/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ambitious: the aim of being memory safe without the use of a garbage
collector, allowing it to achieve C++ execution speeds.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Naming conventions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name_with_underscores&lt;&#x2F;code&gt; for variable and function names&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HttpRequest&lt;&#x2F;code&gt; instead of &lt;code&gt;HTTPRequest&lt;&#x2F;code&gt; for type names&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Error reporting: compile errors are the best I&#x27;ve seen (though
I&#x27;ve only really seen those of C and C++); they are even
color-coded!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;2 short keywords:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fn&lt;&#x2F;code&gt; for function declarations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;use&lt;&#x2F;code&gt;, instead of &lt;code&gt;using&lt;&#x2F;code&gt; or &lt;code&gt;import&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I love that I don&#x27;t need to add (the tedious) parenthesis around
the &lt;em&gt;condition expression&lt;&#x2F;em&gt; in an &lt;em&gt;if&lt;&#x2F;em&gt;, &lt;em&gt;while&lt;&#x2F;em&gt;, and &lt;em&gt;match&lt;&#x2F;em&gt;
statements:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; always executes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The semicolon rule: I initially found it surprising that omitting a
semicolon after a value is shorthand for returning. I appreciate it
now... it&#x27;s quite nifty, and I in fact now find &lt;code&gt;return&lt;&#x2F;code&gt;
statements ugly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Traits: they are an elegant way of providing abstract interfaces,
and are therefore used in generic programming. As an example, a
function can be made to accept different data types, so long as
those types implement the given trait (or traits). Gorgeous!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;match&lt;&#x2F;code&gt; statement is kool: exhaustiveness check, no
fall-through, and nice syntax.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Allowing a trailing comma after a list of items, which is really
great for copy-pasting and diffs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Packaging conventions: by default, the build tool, Cargo, ensures
that all build sources (which may include documentation) are placed
in src&#x2F; in the root of a source distribution.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A fast-paced and time-based release cycle: a stable release will be
made every 6 weeks, which is very ambitious for a programming
language.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Development process:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No one, including the Core Team, pushes anything to the Rust
tree. Each person gets their changes reviewed first, and they
mostly get approved by someone else.&lt;&#x2F;li&gt;
&lt;li&gt;Merging the changes to the tree is nearly always done via a
continuous integration system, which first ensures that each
change passes all tests.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Allows masking of variables, even with different types:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; foo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; foo = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ten&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is convenient.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The amount of iterations its design went through during its pre-1.0
development, which included numerous breaking changes, was...
impressive. That&#x27;s an indication that what resulted is a far better
design than we could have had. The sheer amount of effort taken,
which was such a unique experience for me, makes me feel grateful (I
watched the activity for about a year before 1.0 was released). I am
also grateful for the resilient users who kept up with the pain of
the frequent changes, for they helped keep the language relevant and
exciting, while also providing feedback.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-12-25</title>
                <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-12-25/</link>
                <guid>http://tshepang.net/rust-week-of-2015-12-25/</guid>
                <description>&lt;p&gt;I made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30644&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30645&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30648&quot;&gt;submissions&lt;&#x2F;a&gt; this time around.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-12-18</title>
                <pubDate>Thu, 24 Dec 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-12-18/</link>
                <guid>http://tshepang.net/rust-week-of-2015-12-18/</guid>
                <description>&lt;p&gt;I submitted a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;pull&#x2F;2226&quot;&gt;small change&lt;&#x2F;a&gt; to Cargo. I also submitted two
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30537&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30546&quot;&gt;changes&lt;&#x2F;a&gt; for Rust.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-12-11</title>
                <pubDate>Thu, 17 Dec 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-12-11/</link>
                <guid>http://tshepang.net/rust-week-of-2015-12-11/</guid>
                <description>&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30437&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30441&quot;&gt;five&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30442&quot;&gt;tiny&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30443&quot;&gt;doc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30444&quot;&gt;fixes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-12-04</title>
                <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-12-04/</link>
                <guid>http://tshepang.net/rust-week-of-2015-12-04/</guid>
                <description>&lt;p&gt;I submitted two &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30272&quot;&gt;doc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30274&quot;&gt;changes&lt;&#x2F;a&gt;, and reviewed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30273&quot;&gt;one&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-11-27</title>
                <pubDate>Thu, 03 Dec 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-11-27/</link>
                <guid>http://tshepang.net/rust-week-of-2015-11-27/</guid>
                <description>&lt;p&gt;I added &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30188&quot;&gt;missing&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30190&quot;&gt;examples&lt;&#x2F;a&gt; to stdlib documentation. I also learned a
bit about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lifthrasiir&#x2F;rust-chrono&quot;&gt;Chrono&lt;&#x2F;a&gt;, seemingly the most comprehensive date and time
library for Rust. I used to determine what the next release date for
Rust is, using the following code:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;extern crate chrono;&lt;&#x2F;p&gt;
&lt;p&gt;use chrono::{NaiveDate, Duration, Local};&lt;&#x2F;p&gt;
&lt;p&gt;fn main() {&lt;&#x2F;p&gt;
&lt;p&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for n in 0.. {

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:   &#x2F;&#x2F; Rust 1.0 release let initial = NaiveDate::from_ymd(2015, 5,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    15); &#x2F;&#x2F; 1.0 was released on a Friday, but nowadays they happen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    Thursdays let release_date =
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    initial.checked_add(Duration::weeks(6 * n)).unwrap() -
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    Duration::days(1); if release_date &amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    Local::today().naive_local() { println!(&amp;quot;{}&amp;quot;, release_date);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    break; }

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}
:::&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-11-20</title>
                <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-11-20/</link>
                <guid>http://tshepang.net/rust-week-of-2015-11-20/</guid>
                <description>&lt;p&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30061&quot;&gt;some improvements&lt;&#x2F;a&gt; to new Rust stdlib APIS,
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;time&#x2F;struct.Instant.html&quot;&gt;std::time::Instant&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;time&#x2F;struct.SystemTime.html&quot;&gt;std::time::SystemTime&lt;&#x2F;a&gt;. I also submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;30065&quot;&gt;the
result&lt;&#x2F;a&gt; of running rustfmt on &lt;code&gt;syntax::parser::lexer&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-11-13</title>
                <pubDate>Thu, 19 Nov 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-11-13/</link>
                <guid>http://tshepang.net/rust-week-of-2015-11-13/</guid>
                <description>&lt;p&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Aatch&#x2F;ramp&#x2F;pull&#x2F;57&quot;&gt;fixes&lt;&#x2F;a&gt; for small nits on Ramp, the Rust Arithmetic in
Multiple Precision library. The project was brought to my attention for
being Crate of the Week (&lt;a href=&quot;http:&#x2F;&#x2F;this-week-in-rust.org&#x2F;blog&#x2F;2015&#x2F;11&#x2F;09&#x2F;this-week-in-rust-104&quot;&gt;source&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;29936&quot;&gt;asked for some clarity&lt;&#x2F;a&gt; on a section in the Reference named
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference.html#behavior-considered-undefined&quot;&gt;Behavior considered undefined&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-11-06</title>
                <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-11-06/</link>
                <guid>http://tshepang.net/rust-week-of-2015-11-06/</guid>
                <description>&lt;p&gt;I made some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;rustc-serialize&#x2F;pull&#x2F;136&quot;&gt;small improvements&lt;&#x2F;a&gt; to rustc-serialize docs. I also looked
at parsing JSON, and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;num&#x2F;rustc_serialize&#x2F;json&#x2F;index.html&quot;&gt;it doesn&#x27;t look too bad&lt;&#x2F;a&gt;. I am mostly interested
in the &lt;code&gt;from_str&lt;&#x2F;code&gt; method, and was surprised to find that it&#x27;s pretty
much the same as that of (the more modern) &lt;a href=&quot;https:&#x2F;&#x2F;serde-rs.github.io&#x2F;serde&#x2F;serde_json&#x2F;serde_json&quot;&gt;serde_json&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-10-30</title>
                <pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-10-30/</link>
                <guid>http://tshepang.net/rust-week-of-2015-10-30/</guid>
                <description>&lt;p&gt;Just &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29651&quot;&gt;one submission&lt;&#x2F;a&gt; this time around. Yep! I did however spend time
pondering the magical forward type inference that I first experienced
&lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;rust-week-of-2015-05-29&quot;&gt;back in May&lt;&#x2F;a&gt;, this time sparked by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;carllerche&#x2F;mio&#x2F;blob&#x2F;getting-started&#x2F;doc&#x2F;getting-started.md#writing-the-echo-server&quot;&gt;this example&lt;&#x2F;a&gt;; see this line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let address = &amp;quot;0.0.0.0:6567&amp;quot;.parse().unwrap();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You actually have to read further to figure the type that URL is going
to be parsed as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let server = TcpListener::bind(&amp;amp;address).unwrap();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It would be less surprising if we had the following instead:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let address = SocketAddr::from_str(&amp;quot;0.0.0.0:6567&amp;quot;.unwrap();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let server = TcpListener::bind(&amp;amp;address).unwrap();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>Rust week of 2015-10-23</title>
                <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-10-23/</link>
                <guid>http://tshepang.net/rust-week-of-2015-10-23/</guid>
                <description>&lt;p&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29458&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29459&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29460&quot;&gt;submissions&lt;&#x2F;a&gt; this time around.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-10-16</title>
                <pubDate>Wed, 21 Oct 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-10-16/</link>
                <guid>http://tshepang.net/rust-week-of-2015-10-16/</guid>
                <description>&lt;p&gt;I made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29197&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29198&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29199&quot;&gt;changes&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29200&quot;&gt;one&lt;&#x2F;a&gt; rustfmt-assisted
formatting.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-10-09</title>
                <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-10-09/</link>
                <guid>http://tshepang.net/rust-week-of-2015-10-09/</guid>
                <description>&lt;p&gt;My laziness continues, so I got &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29058&quot;&gt;only&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29059&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;29060&quot;&gt;submissions&lt;&#x2F;a&gt; this
time.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-10-02</title>
                <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-10-02/</link>
                <guid>http://tshepang.net/rust-week-of-2015-10-02/</guid>
                <description>&lt;p&gt;I submitted just &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28905&quot;&gt;two&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28906&quot;&gt;changes&lt;&#x2F;a&gt; this time around. I also &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;can-we-change-the-term-item-to-something-else&#x2F;2752&quot;&gt;complained&lt;&#x2F;a&gt;
about the language term, &lt;em&gt;item&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-09-25</title>
                <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-09-25/</link>
                <guid>http://tshepang.net/rust-week-of-2015-09-25/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I reviewed a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28743&quot;&gt;doc submission&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27273&quot;&gt;My submission&lt;&#x2F;a&gt; from over 2 months ago has finally been accepted.
Interesting how small changes can be so controversial.&lt;&#x2F;li&gt;
&lt;li&gt;I submitted five &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28745&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28749&quot;&gt;improvements&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28770&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28771&quot;&gt;of&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28772&quot;&gt;which&lt;&#x2F;a&gt; I created a week or two ago&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-09-18</title>
                <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-09-18/</link>
                <guid>http://tshepang.net/rust-week-of-2015-09-18/</guid>
                <description>&lt;p&gt;As is normally the case, I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28616&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28617&quot;&gt;a&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28618&quot;&gt;number&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28619&quot;&gt;of&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28620&quot;&gt;small&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28621&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28622&quot;&gt;changes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-09-11</title>
                <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-09-11/</link>
                <guid>http://tshepang.net/rust-week-of-2015-09-11/</guid>
                <description>&lt;p&gt;As was the case with last week, I didn&#x27;t put much effort this week...
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28470&quot;&gt;just&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28471&quot;&gt;four&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28473&quot;&gt;small&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28474&quot;&gt;submissions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-09-04</title>
                <pubDate>Thu, 10 Sep 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-09-04/</link>
                <guid>http://tshepang.net/rust-week-of-2015-09-04/</guid>
                <description>&lt;p&gt;As was the case with the past several weeks, I didn&#x27;t put much effort
this week... &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28323&quot;&gt;just&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28328&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28329&quot;&gt;submissions&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-08-28</title>
                <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-08-28/</link>
                <guid>http://tshepang.net/rust-week-of-2015-08-28/</guid>
                <description>&lt;p&gt;As usual, I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28207&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28209&quot;&gt;some&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28210&quot;&gt;very&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28212&quot;&gt;small&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28213&quot;&gt;doc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28214&quot;&gt;changes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-08-21</title>
                <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-08-21/</link>
                <guid>http://tshepang.net/rust-week-of-2015-08-21/</guid>
                <description>&lt;p&gt;This time around, my contributions were just &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28027&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28028&quot;&gt;doc&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28030&quot;&gt;changes&lt;&#x2F;a&gt;
and one &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;28029&quot;&gt;style fix&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-08-14</title>
                <pubDate>Thu, 20 Aug 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-08-14/</link>
                <guid>http://tshepang.net/rust-week-of-2015-08-14/</guid>
                <description>&lt;p&gt;As usual, I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27903&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27904&quot;&gt;some&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27905&quot;&gt;rather&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27920&quot;&gt;small&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27921&quot;&gt;doc&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27922&quot;&gt;improvements&lt;&#x2F;a&gt;. In addition, I also skimmed through some of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;nomicon&quot;&gt;The Dark
Arts of Advanced and Unsafe Rust Programming&lt;&#x2F;a&gt;, a pleasant read that&#x27;s
infused with good humor.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-08-07</title>
                <pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-08-07/</link>
                <guid>http://tshepang.net/rust-week-of-2015-08-07/</guid>
                <description>&lt;p&gt;This time around, I only submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27633&quot;&gt;these&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27648&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27651&quot;&gt;improvements&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Elsewhere, I was surprised by the success of &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tshepang_dev&#x2F;status&#x2F;630870886225154048&quot;&gt;this Tweet of mine&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;It got nearly 5000 Impressions. It&#x27;s likely to exceed &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;tshepang_dev&#x2F;status&#x2F;624783302193467392&quot;&gt;the other
surprise success&lt;&#x2F;a&gt;, which now got over 6000 Impressions.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-07-31</title>
                <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-07-31/</link>
                <guid>http://tshepang.net/rust-week-of-2015-07-31/</guid>
                <description>&lt;p&gt;I got to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hannobraun&#x2F;inotify-rs&quot;&gt;inotify-rs&lt;&#x2F;a&gt; for some task at work (first time I used Rust
for work, yay!), and I found it surprisingly easy to use. It&#x27;s not a
very pretty API though, and I remember the Python API to be horrible
too. Maybe the nature of inotify disallows beauty, who knows.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I submitted these to the Rust tree:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27495&quot;&gt;Follow idiom&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27549&quot;&gt;Be more specific&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27550&quot;&gt;Add missing info&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27552&quot;&gt;Some miscellany&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-07-24</title>
                <pubDate>Sat, 01 Aug 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-07-24/</link>
                <guid>http://tshepang.net/rust-week-of-2015-07-24/</guid>
                <description>&lt;p&gt;I have been &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;subteam-reports-2015-07-24&#x2F;2397&quot;&gt;given the honor&lt;&#x2F;a&gt; of Friend of the Tree by a member of the
Rust Library &lt;a href=&quot;http:&#x2F;&#x2F;www.rust-lang.org&#x2F;team&quot;&gt;team&lt;&#x2F;a&gt;. I never expected to be considered, given the far
greater work that previous recipients have done. Is kool stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Regarding my weekly contributions, I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27273&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27274&quot;&gt;just&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27276&quot;&gt;four&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27398&quot;&gt;changes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-07-17</title>
                <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-07-17/</link>
                <guid>http://tshepang.net/rust-week-of-2015-07-17/</guid>
                <description>&lt;p&gt;I submitted these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27095&quot;&gt;Tiny style fix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27100&quot;&gt;Better names for two variable bindings&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;27102&quot;&gt;Improve some VecDeque examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-07-10</title>
                <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-07-10/</link>
                <guid>http://tshepang.net/rust-week-of-2015-07-10/</guid>
                <description>&lt;p&gt;I submitted these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26973&quot;&gt;Two&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26976&quot;&gt;improvements&lt;&#x2F;a&gt; to documentation that explains errors&lt;&#x2F;li&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26979&quot;&gt;removed&lt;&#x2F;a&gt; some redundant info from I&#x2F;O docs&lt;&#x2F;li&gt;
&lt;li&gt;I did &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26974&quot;&gt;this one&lt;&#x2F;a&gt; last week, and forgot to submit it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-07-03</title>
                <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-07-03/</link>
                <guid>http://tshepang.net/rust-week-of-2015-07-03/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26785&quot;&gt;made&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26786&quot;&gt;a&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26787&quot;&gt;bunch&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26788&quot;&gt;of&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26789&quot;&gt;some&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26791&quot;&gt;rather&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26792&quot;&gt;small&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26795&quot;&gt;changes&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26796&quot;&gt;to&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26800&quot;&gt;the&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference.html&quot;&gt;Rust Reference&lt;&#x2F;a&gt;, including &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26799&quot;&gt;this bold
one&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26808&quot;&gt;another change&lt;&#x2F;a&gt;, whose preparation forced me to learn more
closure stuff than I cared for: &lt;strong&gt;FnOnce&lt;&#x2F;strong&gt;, &lt;strong&gt;FnMut&lt;&#x2F;strong&gt;, and &lt;strong&gt;Fn&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;I added some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26814&quot;&gt;examples&lt;&#x2F;a&gt; of array usage to API docs&lt;&#x2F;li&gt;
&lt;li&gt;I also made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1189&quot;&gt;some improvements&lt;&#x2F;a&gt; to the RFC on coercions&lt;&#x2F;li&gt;
&lt;li&gt;Back to the Reference, I made two &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26834&quot;&gt;additional&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26835&quot;&gt;improvements&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-06-26</title>
                <pubDate>Wed, 01 Jul 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-06-26/</link>
                <guid>http://tshepang.net/rust-week-of-2015-06-26/</guid>
                <description>&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;pull&#x2F;1754&quot;&gt;removed a sentence&lt;&#x2F;a&gt; that is not needed from Cargo documentation. I
also added &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;pull&#x2F;1755&quot;&gt;ability to read from $EMAIL environment variable&lt;&#x2F;a&gt; to the
&lt;code&gt;cargo new&lt;&#x2F;code&gt; command, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;pull&#x2F;1756&quot;&gt;fixed a small issue&lt;&#x2F;a&gt; in the test suite..&lt;&#x2F;p&gt;
&lt;p&gt;In the Rust tree:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26621&quot;&gt;fixed&lt;&#x2F;a&gt; one oversight where someone missed removing some obsolete
doc and annotations while they were removing obsolete code&lt;&#x2F;li&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26622&quot;&gt;fixed&lt;&#x2F;a&gt; some bad code indents&lt;&#x2F;li&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26627&quot;&gt;added&lt;&#x2F;a&gt; an example for reading from stdin&lt;&#x2F;li&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26724&quot;&gt;removed&lt;&#x2F;a&gt; a misleading sentence&lt;&#x2F;li&gt;
&lt;li&gt;I then &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26725&quot;&gt;fixed&lt;&#x2F;a&gt; a typo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-06-19</title>
                <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-06-19/</link>
                <guid>http://tshepang.net/rust-week-of-2015-06-19/</guid>
                <description>&lt;p&gt;Work done on &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;documentation.html&quot;&gt;the Documentation chapter&lt;&#x2F;a&gt; of the official Rust book:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I submitted a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26506&quot;&gt;number&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26508&quot;&gt;of&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26509&quot;&gt;changes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I also found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;26507&quot;&gt;misuse of the word, &lt;em&gt;thing&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Elsewhere:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26514&quot;&gt;some small fix&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I also &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;lets-have-a-documentation-policy&#x2F;2279&quot;&gt;want Rust to have a documentation policy&lt;&#x2F;a&gt;. This led to being
pointed to API conventions doc, which needed &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1171&quot;&gt;some markup fixes&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-06-12</title>
                <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-06-12/</link>
                <guid>http://tshepang.net/rust-week-of-2015-06-12/</guid>
                <description>&lt;p&gt;I&#x27;m the documentation guy, so:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26259&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26260&quot;&gt;three&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26261&quot;&gt;changes&lt;&#x2F;a&gt; to the API documentation&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26373&quot;&gt;Two&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26410&quot;&gt;changes&lt;&#x2F;a&gt; to the README (first time)&lt;&#x2F;li&gt;
&lt;li&gt;One &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26367&quot;&gt;change&lt;&#x2F;a&gt; to the Style Guide (also first time)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-06-05</title>
                <pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-06-05/</link>
                <guid>http://tshepang.net/rust-week-of-2015-06-05/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26105&quot;&gt;a change&lt;&#x2F;a&gt; to remove a sentence that is not clear in the
chapter on Generics in Rust Book.&lt;&#x2F;li&gt;
&lt;li&gt;Reading the (excellent) &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference.html#traits&quot;&gt;Traits section of The Rust Reference&lt;&#x2F;a&gt; led
me to submit the following improvements:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26111&quot;&gt;One that removes jarring whitespace&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Two more for improving readability:
&lt;ul&gt;
&lt;li&gt;One by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26112&quot;&gt;making use of bullets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Another by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26113&quot;&gt;avoiding needless abbreviations&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Yet another &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26116&quot;&gt;that adds a link&lt;&#x2F;a&gt; to the wonderful treatment of the
trait concept. It was however not accepted, and replaced with
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26118&quot;&gt;one that adds the definition inline&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;There was also &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;26195&quot;&gt;a typo fix&lt;&#x2F;a&gt; :)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-05-29</title>
                <pubDate>Sat, 30 May 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-05-29/</link>
                <guid>http://tshepang.net/rust-week-of-2015-05-29/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I was surprised by the somewhat magical Rust type inference:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;fn main() {&lt;&#x2F;p&gt;
&lt;p&gt;:   let string = &amp;quot;10&amp;quot;; let num = match string.parse() { Ok(num)
=&amp;gt; num, Err(_) =&amp;gt; 0, }; assert_eq!(num, 10);&lt;&#x2F;p&gt;
&lt;p&gt;}
:::&lt;&#x2F;p&gt;
&lt;p&gt;A more explicit &lt;code&gt;parse&lt;&#x2F;code&gt; call would be &lt;code&gt;string.parse::&amp;lt;i32&amp;gt;()&lt;&#x2F;code&gt;, but
the type to be parsed into is inferred by the &lt;code&gt;0&lt;&#x2F;code&gt; that is returned
in the &lt;code&gt;Err(_)&lt;&#x2F;code&gt; arm of the match, which is an i32. This is some
far-reaching shit!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I submitted &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25912&quot;&gt;changes&lt;&#x2F;a&gt; to improve some of &lt;code&gt;str&lt;&#x2F;code&gt; documentaton. I also
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25876&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25907&quot;&gt;a&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25920&quot;&gt;whole&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25922&quot;&gt;bunch&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25923&quot;&gt;of&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25936&quot;&gt;smaller&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25948&quot;&gt;changes&lt;&#x2F;a&gt;,&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Linux threads are not deterministic</title>
                <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/linux-threads-are-not-deterministic/</link>
                <guid>http://tshepang.net/linux-threads-are-not-deterministic/</guid>
                <description>&lt;p&gt;By deterministic, I am referring to their scheduling. Here&#x27;s an example
in Rust:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;use std::thread; use std::sync::mpsc::channel;&lt;&#x2F;p&gt;
&lt;p&gt;fn main() {&lt;&#x2F;p&gt;
&lt;p&gt;:   let thread_count = 4; let (tx, rx) = channel();&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for x in 0..thread_count {

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:   let tx = tx.clone(); thread::spawn(move || { println!(&amp;quot;t{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    tx&amp;quot;, x); tx.send(x).unwrap(); });

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for _ in 0..thread_count {

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:   println!(&amp;quot;rx from t{}&amp;quot;, rx.recv().unwrap());

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}
:::&lt;&#x2F;p&gt;
&lt;p&gt;What I&#x27;m doing there is create 4 child threads, from which I send
messages that are to be captured by the main thread.&lt;&#x2F;p&gt;
&lt;p&gt;I built and ran it with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rustc --opt-level 0 main.rs &amp;amp;&amp;amp; .&#x2F;main
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Following is output from one sample run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t1 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t0 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t2 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t3 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t2
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Following is what I get with another run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t0 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t1 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t2 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;t3 tx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;rx from t0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If it was all deterministic (i.e. predictable), &lt;code&gt;t0 tx&lt;&#x2F;code&gt; would always
come before &lt;code&gt;t1 tx&lt;&#x2F;code&gt;, and &lt;code&gt;rx from t0&lt;&#x2F;code&gt; before &lt;code&gt;rx from t1&lt;&#x2F;code&gt;, and so on.&lt;&#x2F;p&gt;
&lt;p&gt;I think this is done for performance reasons, where the kernel just
looks for an available slot, running each thread on a best-effort basis.
My guess is that a more real-time kernel would be more predictable.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rust week of 2015-05-22</title>
                <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-05-22/</link>
                <guid>http://tshepang.net/rust-week-of-2015-05-22/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I bumped onto &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;30413090&#x2F;321731&quot;&gt;an oddity regarding &#x27;pow&#x27; method&lt;&#x2F;a&gt;... there is no
fallback.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I found that converting a char to a String (or &amp;amp;str) is &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;28003842&#x2F;321731&quot;&gt;not as
obvious as I hoped&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I read some of &lt;code&gt;std::path&lt;&#x2F;code&gt; code&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I re-discovered the convenience function, &lt;code&gt;Iterator::cloned&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I added syntax highlighting to the &lt;a href=&quot;http:&#x2F;&#x2F;tshepang.net&#x2F;tags&#x2F;rust&quot;&gt;Rust posts on my blog&lt;&#x2F;a&gt; that were
missing it. I also updated the code to run on modern Rust.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I got some clarity on the concept of traits by re-reading the
well-written post, &lt;a href=&quot;http:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2015&#x2F;05&#x2F;11&#x2F;traits.html&quot;&gt;Abstraction without overhead: traits in Rust&lt;&#x2F;a&gt;.
One feature they have is they allow adding methods to types,
including upstream ones, example being stdlib types as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Invert {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Invert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;i32 {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; foo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;; assert_eq!(foo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another example is that one can limit the type of arguments accepted
by a function, though it uses something of an ugly syntax:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;print_inverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;T: Invert&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: T) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Inverse: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, foo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;T: Invert&amp;gt;&lt;&#x2F;code&gt; means this function will only accept &lt;code&gt;foo&lt;&#x2F;code&gt; whose
type implements the &lt;code&gt;Invert&lt;&#x2F;code&gt; trait. You can check by calling it with
an &lt;code&gt;i32&lt;&#x2F;code&gt; value, in which it will succeed:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_inverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Inverse: 0.1
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any other type will fail:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#96b5b4;&quot;&gt;print_inverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;the trait `Invert` is not implemented for the type `f64` [E0277]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows for a feature named generics, where one can use multiple
types for the same function. For example, that error will disappear
if you got this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Invert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;f64 {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&#x2F;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>various Rust ways of displaying stuff to the screen</title>
                <pubDate>Mon, 25 May 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/various-rust-ways-of-displaying-stuff-to-the-screen/</link>
                <guid>http://tshepang.net/various-rust-ways-of-displaying-stuff-to-the-screen/</guid>
                <description>&lt;p&gt;Here is a simple way of doing it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Write};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    io::stdout().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some outputn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I do however get this warning when I build it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ rustc main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;main.rs:4:5: 4:42 warning: unused result which must be used, #[warn(unused_must_use)] on by default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;main.rs:4     io::stdout().write_ln(b&amp;quot;some output&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s kill it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Write};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    io::stdout().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What I did is call &lt;code&gt;unwrap&lt;&#x2F;code&gt; which basically asks our operation to
&lt;code&gt;panic!&lt;&#x2F;code&gt; in case of some error. Think of it as a shortcut of:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Write};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;io::stdout().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;) {
        Ok(_) =&amp;gt; (),
        Err(_) =&amp;gt; panic!(),
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some docs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;io&#x2F;trait.Write.html#method.write_all&quot;&gt;std::io::Writer::write_line&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html#method.unwrap&quot;&gt;core::result::Result::unwrap&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.panic!.html&quot;&gt;std::panic!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;What if we wanted to do some string formatting:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Write};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; second_word = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; text = format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
    second_word); io::stdout().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(text.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But there is a shortcut for the code above:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::io::{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Write};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; second_word = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;
    writeln!(&amp;amp;mut io::stdout(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, second_word).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is an even shorter shortcut:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; second_word = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, second_word);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Question to self: do we get a &lt;code&gt;panic!&lt;&#x2F;code&gt; if &lt;code&gt;println&lt;&#x2F;code&gt; gets an I&#x2F;O error?&lt;&#x2F;p&gt;
&lt;p&gt;Some docs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.format!.html&quot;&gt;std::format!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.writeln!.html&quot;&gt;std::writeln!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.println!.html&quot;&gt;std::println!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;update&lt;&#x2F;strong&gt;: there is now &lt;code&gt;eprintln!&lt;&#x2F;code&gt;, for sending output to stderr&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, why bother with all these many ways when there&#x27;s a simple
&lt;code&gt;println!&lt;&#x2F;code&gt;? Flexibility. One example I can think of is writing to
stderr. There is no simple macro for that (&lt;code&gt;println!&lt;&#x2F;code&gt; is for stdout).
Short of implementing &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;27590832&#x2F;321731&quot;&gt;our own macro&lt;&#x2F;a&gt;, We&#x27;d have to do something like
the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::io;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    writeln!(&amp;amp;mut io::stderr(), &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;some output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can test that it really goes to stderr by running it like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ .&#x2F;main &amp;gt; &#x2F;dev&#x2F;null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;some output
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>Rust week of 2015-05-15</title>
                <pubDate>Sat, 23 May 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-week-of-2015-05-15/</link>
                <guid>http://tshepang.net/rust-week-of-2015-05-15/</guid>
                <description>&lt;p&gt;This is the first of what I intend to be a weekly series of posts
related to my favorite programming language. I here take Rust weeks to
begin each Friday, since Stable releases of the Rust distribution
(language and included libraries) are to be released on that week day.
This is also a great excuse to write more regularly.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I read a high quality post titled &lt;a href=&quot;http:&#x2F;&#x2F;chrismorgan.info&#x2F;blog&#x2F;rust-ownership-the-hard-way.html&quot;&gt;Rust ownership, the hard way&lt;&#x2F;a&gt;. I
learned quite a bit going through it, like the meaning of
&lt;code&gt;#[derive(Clone, Copy)]&lt;&#x2F;code&gt;, which I see a lot but never knew what it
meant. I also learned that there are 7 ways to introduce a variable
binding (taking &lt;code&gt;foo&lt;&#x2F;code&gt; as the name of that binding):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;let foo ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;for foo in ... (for loop)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;foo =&amp;gt; ... (match block)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;if let foo = ... (if block)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;while let foo = ... (while loop)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;fn func(foo: ... (function argument)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| foo | ... (closure argument)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25629&quot;&gt;submitted&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25656&quot;&gt;some&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25659&quot;&gt;documentation&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;25666&quot;&gt;improvements&lt;&#x2F;a&gt;. The
latter one was especially time-consuming, but it helped me explore
the &lt;code&gt;std::path&lt;&#x2F;code&gt; module. It even led me to bump onto &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;25673&quot;&gt;a rustdoc bug&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Rust &#x27;collect&#x27; function rocks!</title>
                <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/rust-collect-function-rocks/</link>
                <guid>http://tshepang.net/rust-collect-function-rocks/</guid>
                <description>&lt;p&gt;Here is one way to populate a Vec with some data:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;let mut vector = Vec::new(); for n in 0..COUNT { vector.push(n); };
:::&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, one can simply do this:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;let vector = (0..COUNT).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()
:::&lt;&#x2F;p&gt;
&lt;p&gt;The function is also about twice as fast, according to the following
benchmark:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;#![feature(test)]&lt;&#x2F;p&gt;
&lt;p&gt;extern crate test;&lt;&#x2F;p&gt;
&lt;p&gt;static COUNT: i32 = 100;&lt;&#x2F;p&gt;
&lt;p&gt;#[bench] fn collect(b: &amp;amp;mut test::Bencher) { b.iter(|| {
(0..COUNT).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;() }); }&lt;&#x2F;p&gt;
&lt;p&gt;#[bench] fn no_collect(b: &amp;amp;mut test::Bencher) { b.iter(|| { let
mut vector = Vec::new(); for n in (0..COUNT) { vector.push(n); }; vector
}); }
:::&lt;&#x2F;p&gt;
&lt;p&gt;Here is the output of &lt;code&gt;cargo bench&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test collect    ... bench:       164 ns&#x2F;iter (+&#x2F;- 7)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test no_collect ... bench:       346 ns&#x2F;iter (+&#x2F;- 8)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
            <item>
                <title>what makes Rust unique</title>
                <pubDate>Sat, 24 Jan 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/what-makes-rust-unique/</link>
                <guid>http://tshepang.net/what-makes-rust-unique/</guid>
                <description>&lt;p&gt;An interesting expansion of &amp;quot;safety without garbage collection&amp;quot;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s easy to write (a) an unsafe language that has no GC, or (b) a
safe language that relies on GC for safety. It&#x27;s also easy to write a
language that is in category (b) but lets you drop down to category
(a) in an unsafe dialect. It&#x27;s a very difficult problem to write a
safe language that does not rely on GC, and I know of no other
industry language that has done it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Part of &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=8936061&quot;&gt;a response&lt;&#x2F;a&gt; by a member of Rust core team.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>links 2015-01-16</title>
                <pubDate>Fri, 16 Jan 2015 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/links-2015-01-16/</link>
                <guid>http://tshepang.net/links-2015-01-16/</guid>
                <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;people.debian.org&#x2F;%7Estapelberg&#x2F;&#x2F;2014&#x2F;12&#x2F;23&#x2F;code-search-taming-the-latency-tail&quot;&gt;an epic battle in improving performance of Debian Code Search&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;siciarz.net&#x2F;tag&#x2F;24%20days%20of%20rust&quot;&gt;24 days of Rust&lt;&#x2F;a&gt; is a nice series of 24 posts related to Rust, each
short and concise, which is the way I like it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;chrismorgan.info&#x2F;blog&#x2F;rust-fizzbuzz.html&quot;&gt;Why your first FizzBuzz implementation may not work&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;a very nice Rust mini-tutorial&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;mainisusuallyafunction.blogspot.com&#x2F;2015&#x2F;01&#x2F;151-byte-static-linux-binary-in-rust.html&quot;&gt;151-byte static Linux binary in Rust&lt;&#x2F;a&gt; - interesting experiment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>trying to understand stack memory</title>
                <pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate>
                <link>http://tshepang.net/trying-to-understand-stack-memory/</link>
                <guid>http://tshepang.net/trying-to-understand-stack-memory/</guid>
                <description>&lt;p&gt;Python is a language that is so high level that concepts like stack and
heap memory are hidden from its users. Not so with lower-level languages
like C. Following examples are implemented in Rust, which is easier to
use than C:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;fn main() {&lt;&#x2F;p&gt;
&lt;p&gt;:   let a = 0i8; let b = 0i8; let c = 0i8;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;println!(&amp;quot;{:p}&amp;quot;, &amp;amp;a); println!(&amp;quot;{:p}&amp;quot;, &amp;amp;b); println!(&amp;quot;{:p}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;c);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}
:::&lt;&#x2F;p&gt;
&lt;p&gt;We build and run it like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ rustc main.rs &amp;amp;&amp;amp; .&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fff0c8d16d7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fff0c8d16d6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fff0c8d16d5
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our code, the three variables are each given 1 byte of memory (&lt;code&gt;i8&lt;&#x2F;code&gt;
means 8-bit integer). The addresses are given in reverse order. An
explanation I heard is so that the heap grows the opposite direction to
the stack, which helps separate things nicely. I suppose this would be
for performance reasons and&#x2F;or simpler memory management code.&lt;&#x2F;p&gt;
&lt;p&gt;If we use larger types, we&#x27;ll see each value taking more than just one
address:&lt;&#x2F;p&gt;
&lt;p&gt;::: {.sourcecode}
rust&lt;&#x2F;p&gt;
&lt;p&gt;fn main() {&lt;&#x2F;p&gt;
&lt;p&gt;:   let a = 0i16; let b = 0i16; let c = 0i16;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;println!(&amp;quot;{:p}&amp;quot;, &amp;amp;a); println!(&amp;quot;{:p}&amp;quot;, &amp;amp;b); println!(&amp;quot;{:p}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;c);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}
:::&lt;&#x2F;p&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ rustc main.rs &amp;amp;&amp;amp; .&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fff2462aed6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fff2462aed4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fff2462aed2
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case, each of the variables take 2 addresses (&lt;code&gt;i16&lt;&#x2F;code&gt; means 16-bit
integer). Using &lt;code&gt;i32&lt;&#x2F;code&gt; results in each taking 4 addresses:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ rustc main.rs &amp;amp;&amp;amp; .&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7ffff7706024
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7ffff7706020
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7ffff770601c
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then, finally, &lt;code&gt;i64&lt;&#x2F;code&gt; results in each variable taking 8 addresses (64
bits) of space:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ rustc main.rs &amp;amp;&amp;amp; .&#x2F;main
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fffd27383b0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fffd27383a8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;0x7fffd27383a0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;</description>
            </item>
        
    </channel>
</rss>
