{"pages":[{"url":"http://tshepang.net/about-me.html","text":"Tshepang Lekhonkhobe tshepang@gmail.com Gauteng province, South Africa I do software development for a living and as a hobby ( examples ). My favorite language (and ecosystem) is Python , and my OS of choice is Debian . I watch perhaps too many movies , and I spend perhaps too much time on the web . Among my profiles on the web: GitHub and Bitbucket (software) Stack Exchange (help) Gittip (funding) Twitter (social) The sources for this blog can be found on Bitbucket .","tags":"pages","title":"about me"},{"url":"http://tshepang.net/floss-pipe-dreams","text":"In which I am hoping that FLOSS would supplant proprietary alternatives: 3D content creation : Blender should be mainstream... used in blockbusters image manipulation : GIMP should acquire feature-parity with Photoshop, and then steal the market DBMS : PostgreSQL should acquire feature-parity with Oracle, and then steal the market Operating system : Debian should be THE reference platform for various user types (large corporations, audio/video professionals, software developers, gamers, etc.), taking the market away from macOS and Windows scientific computing : NumPy and pandas should acquire feature-parity with MATLAB, and then steal the market","tags":"computing","title":"FLOSS pipe dreams"},{"url":"http://tshepang.net/rust-20-wishlist","text":"Remove the try! macro... it has a better replacement in the form of the question_mark ( ? ) operator. Remove std::sync::mpsc from stdlib, making it available externally... it does not feel general enough. Assigning values to struct bindings should use the equal sign, not the colon: ::: {.sourcecode} rust // now Shoe { size: 10, style: \\\"sneaker\\\") }, // dream Shoe { size = 10, style = \\\"sneaker\\\" }; ::: This would be consistent with the rest of the language. All collections types removed, except these basic ones: Vec, HashMap, and HashSet. Also, they would also be available from top-level (i.e. std::{Vec, HashMap, HashSet} ), resulting in std::collections removal.","tags":"computing","title":"'Rust 2.0 wishlist'"},{"url":"http://tshepang.net/ideal-static-blog-generator","text":"Anything not listed below is either stuff I take for granted or simply missed: reStructuredText support is mandatory. It\\'s the only markup language I like. Landing Page should be an Archives View (Post title and date) or a subset (i.e. Recent Posts). I would not mind if the latest Post or the About Page were displayed, so long as they are followed by this Archives View. Categories should be determined by directory into which a file (the raw material for a Post) is placed. Specifying this in the metadata section of the file should of course take precedence. Publish date should never be placed at the bottom of a Post. It is too important a piece metadata to treat this way. An option to have clean URLs (i.e. trailing .html removed). Date-based directory structure should not be mandatory (unlike with Tinkerer). Inline literals and literal blocks (for code) should be distinguished by background colour; using a different font is just not good enough. Tags (and maybe Categories) should be displayed on each post. Blogofile has a strange requirement of having [post headers be YAML format]. Maybe there\\'s a good reason, but I want my generator to not require anything special in file contents. Ability to determine Publish date from file mtime. nice-to-have : Ability to combine multiple tags. Ability to show posts linking to current one, but I\\'m not sure how useful this would be though. A feed icon that is visible from the main page (and maybe Category pages).","tags":"computing","title":"ideal static blog generator"},{"url":"http://tshepang.net/what-i-like-about-rust","text":"Ambitious: the aim of being memory safe without the use of a garbage collector, allowing it to achieve C++ execution speeds. Naming conventions: name_with_underscores for variable and function names HttpRequest instead of HTTPRequest for type names Error reporting: compile errors are the best I\\'ve seen (though I\\'ve only really seen those of C and C++); they are even color-coded! 2 short keywords: fn for function declarations use , instead of using or import I love that I don\\'t need to add (the tedious) parenthesis around the condition expression in an if , while , and match statements: ::: {.sourcecode} rust if true { // always executes } ::: The semicolon rule: I initially found it surprising that omitting a semicolon after a value is shorthand for returning. I appreciate it now... it\\'s quite nifty, and I in fact now find return statements ugly. Traits: they are an elegant way of providing abstract interfaces, and are therefore used in generic programming. As an example, a function can be made to accept different data types, so long as those types implement the given trait (or traits). Gorgeous! The match statement is kool: exhaustiveness check, no fall-through, and nice syntax. Allowing a trailing comma after a list of items, which is really great for copy-pasting and diffs. Packaging conventions: by default, the build tool, Cargo, ensures that all build sources (which may include documentation) are placed in src/ in the root of a source distribution. A fast-paced and time-based release cycle: a stable release will be made every 6 weeks, which is very ambitious for a programming language. Development process: No one, including the Core Team, pushes anything to the Rust tree. Each person gets their changes reviewed first, and they mostly get approved by someone else. Merging the changes to the tree is nearly always done via a continuous integration system, which first ensures that each change passes all tests. Allows one to redefine variables, even with different types: ::: {.sourcecode} rust let foo = 10; let foo = \\\"ten\\\"; ::: This is convenient. The amount of iterations its design went through during its pre-1.0 development, which included numerous breaking changes, was... impressive. That\\'s an indication that what resulted is a far better design than we could have had. The sheer amount of effort taken, which was such a unique experience for me, makes me feel grateful (I watched the activity for about a year before 1.0 was released). I am also grateful for the resilient users who kept up with the pain of the frequent changes, for they helped keep the language relevant and exciting, while also providing feedback.","tags":"computing","title":"what I like about Rust"},{"url":"http://tshepang.net/favorite-floss","text":"For a piece of FLOSS (free/libre and open source software) to be here, it has to both be personally useful and I have to like it a lot: desktop : dwm web browser : Firefox development : Rust , Emacs, Meld, Mercurial file manager : Bash, Emacs (Dired mode) misc utilities: ripgrep , Sudo , Lsof, less, procps (top, watch), Ex Falso, autojump, gnumeric, coreutils (cat, head, tail), LinkChecker , Iotop , rdiff-backup , OpenSSH, vnstat , tmux , File Roller, youtube-dl","tags":"computing","title":"favorite FLOSS"},{"url":"http://tshepang.net/floss-i-use-a-lot","text":"Following are tools I use a lot, but am not necessarily loving. There is a separate post for those. Debian : my primary OS, and also my favorite wajig : I also develop and maintain it APT : a collection of Debian package management tools software development Emacs : I also use it as a general purpose text editor Git : as if I had a choice... work and open source Mercurial : my favorite Rust : this has since replaced Python as my favorite language, and I spend far more time with it than any other work Docker: a central component of our infranstructure systemd: journalctl & sysmtemctl entertainment Quod Libet : audio player that comes with a very excellent tag editor, Ex Falso VLC : user interface could be a lot better GUI applications Xfce Terminal Firefox Liferea : I like it, ugly and unkool as it is Transmission : the only torrent client I have ever used Nautilus : decent GUI file manager miscellaneous tools dwm tmux : amazingly powerful, but I wish it had less rendering bugs head and tail : included in GNU coreutils suite of tools less : indispensable! OpenSSH : duh! autojump : makes navigating the filesystem a joy Fabric : I use it to build and deploy my blogs... it\\'s some sort of replacement for shell scripting youtube-dl : I prefer watching videos locally, with VLC","tags":"computing","title":"'FLOSS I use a-lot'"},{"url":"http://tshepang.net/i-am-a-very-jealous-person","text":"Following is some of the cases where competing software won this or that battle, and I am jealous since I want everyone to use what I like: Kurbenetes is written in Go, and not Rust. It appears to be the most popular container orchestration system, and is among the hottest of new software projects, while having lots of momentum. Grafana is also written in Go, and not Rust. It produces the most pretty graphs I\\'ve seen yet, and is very featureful, and boasts hundreds of contributers. Markdown is a far more popular light-weight markup language than the far more advanced reStructuredText . It\\'s particularly sad when it\\'s not used where it\\'s needed most... documenting large projects ( example ).","tags":"computing","title":"I am a very jealous person"},{"url":"http://tshepang.net/major-projects-using-mercurial","text":"Mercurial is the only version control system that I actually like, and I do celebrate each time I see a project use it. So, here I list the most notable projects I am aware of that do, which also gives me hope that it isn\\'t being suffocated too much by Git: Firefox , world number 3 desktop web browser (number of users) OpenJDK , the top open source implementation of the Java platform Netbeans , one of the most popular IDEs And here is one which is not FLOSS (i.e. proprietary): Facebook , world number 2 website in terms of visitor numbers","tags":"computing","title":"major projects using Mercurial"},{"url":"http://tshepang.net/top-tracks-fela-kuti","text":"3 landmarks Lady ( Shakara - 1972) Confusion ( Confusion - 1975) Igbe (Na Shit) ( Gentleman - 1973) 3 masterpieces No Agreement ( No Agreement - 1977) Shakara ( Shakara - 1972) Gentleman ( Gentleman - 1973) 12 excellent works Egbe Mi O ( Fela\\'s London Scene - 1970) Fefe Naa Efe ( Gentleman - 1973) Who No Know Go Know ( Everything Scatter - 1975) Just Like That ( Beast of No Nation - 1989) Pansa Pansa ( Underground System - 1992) Eko Ile ( Afrodisiac - 1973) Alu Jon Jonki Jon ( Afrodisiac - 1973) Water No Get Enemy ( Expensive Shit - 1975) Zombie ( Zombie - 1978) Teacher Don\\'t Teach Me Nonsense ( Teacher Don\\'t Teach Me Nonsense -1986) Ikoyi Mentality Versus Mushin Mentality ( Why Black Man Dey Suffer -1971) Ye Ye de Smell ( Live! - 1971) honorable mention Why Black Man Dey Suffer ( Why Black Man Dey Suffer - 1971) Not in the above lists because it gets spoiled by the vocals about halfway through. The instruments are incredible, and almost the only saving grace of the song, but they start to sound repetitive several minutes in. The beginning parts of the song, including its vocals, would earn this one a msterpiece had the rest been kept at that level. Trouble Sleep Yanga Wake Am ( Roforofo Fight - 1972) Black Man\\'s Cry ( Live! - 1971)","tags":"arts","title":"'top tracks: Fela Kuti'"},{"url":"http://tshepang.net/top-tv-shows","text":"I specify seasons only if the rest of series was not so excellent. The list is roughly in the chronological order of the first time I watched them. Yizo Yizo (seasons 1 and 2) 24 Game of Thrones Homeland Utopia Girls (seasons 1 and 2) House of Cards (seasons 1 and 2) The Knick Mr. Robot honorable mentions House Death Note Alphas Breaking Bad The Americans","tags":"arts","title":"top tv shows"},{"url":"http://tshepang.net/top-tracks-hip-hop","text":"Not included below are tracks from the best hip-hop albums yet made, Doggystyle and The Score . landmarks MC\\'s Act Like They Don\\'t Know (KRS-One and DJ Premier) My Downfall (Notorious B.I.G.) Nas is Like (Nas) masterpieces Animal in Man (Dead Prez) Bad Dreams (Busta Rhymes) Hip-Hop (Dead Prez) In the Music (The Roots) excellent Beware (Big Pun) Distortion to Static (The Roots) Don\\'t Feel Right (The Roots) 8 Mile (Eminem) Elevators (Outkast) Hard Knock Life (Jay-Z) Hold (KRS-One) How Many MC\\'s (KRS-ONE) I\\'m A African (Dead Prez) It\\'s A Party (Busta Rhymes feat. Zhane) Kick in the Door (Notorious B.I.G.) Mathematics (DJ Premier, Mos Def) Mind Sex (Dead Prez) Miss Jackson (Outkast) Micranots? (Micranots) Next Movement (The Roots) Old School (Tupac) Ooh! (De la Soul ft. RedMan) Track 15, album: Slum (Slum Village) Respiration (Blackstar feat. Common) Respond/React (The Roots) Section (The Roots) Shook Ones Pt. II (Mobb Deep) 6th Sense (Common and DJ Premier) Still (Dr Dre feat. Snoop Dogg) Tell Me Something (Arrested Development) Ten Crack Commandments (Notorious B.I.G.) They Schools (Dead Prez) Thirty Three Threes (Canibus) Throw Yo Hands in the Air (Cypress Hill) Tradin\\' War Stories (Tupac) Travellin\\' Man (DJ Honda and Mos Def) Way I Am, The (Eminem) Woo-Ha (Busta Rhymes) Wot They Do (The Roots) You Came Up (Big Pun) You\\'ll Find A Way (Dead Prez) special mentions Quiet Storm (Mobb Deep feat. Lil\\' Kim) - chiefly for having a really favorite chorus by the Kim lady Shove This Jay-Oh-Bee (Canibus) - me loving the so-alive beat","tags":"arts","title":"'top tracks: hip-hop'"},{"url":"http://tshepang.net/top-tracks-burning-spear","text":"1 landmark Old Marcus Garvey ( Marcus Garvey - 1975) 7 masterpieces Tradition ( Marcus Garvey - 1975) Invasion aka Black Wa-da-da ( Marcus Garvey - 1975) Marcus Garvey ( Marcus Garvey - 1975) Give Me ( Marcus Garvey - 1975) The Wilderness ( Live in Paris Zenith - 1988) Slavery Days ( Marcus Garvey - 1975) Mister Garvey ( Social Living - 1978) 7 excellent works Creation Rebel ( Live in Paris Zenith - 1988) Civilise Reggae ( Social Living - 1978) Live Good ( Marcus Garvey - 1975) Jordan River ( Marcus Garvey - 1975) Institution ( Social Living - 1978) Marcus Children Suffer ( Social Living - 1978) The Youths ( (A)Live in Concert \\'97 - 1998) honorable mention Travelling ( Spear Burning - 2001)","tags":"arts","title":"'top tracks: Burning Spear'"},{"url":"http://tshepang.net/top-musicians","text":"The best musicians in history, a list created with the help of a simple rating system . Fela Kuti , 27 Burning Spear , 24 Letta Mbulu , 15 Salif Keita , 14 Bob Marley , 13 Miriam Makeba , 11 The Roots , 10 Michael Jackson , 10","tags":"arts","title":"top musicians"},{"url":"http://tshepang.net/about-developer-of-note-series","text":"I respect a lot of software developers, but many of those are not going to have an entry in this series , and not because they are lesser in my eyes... I need a news item that would trigger a post. Thing is, if you write about someone, you actually need to have some content (duh!), and saying \"Guide van Rossum rocks for creating Python, and am grateful!\" is simply not enough, hence a need for a trigger. In fact, I used to call this series developer of the moment , but at some point felt that the new name is more fitting, especially since a few of these developers generated some new triggers along the way.","tags":"computing","title":"about 'developer of note' series"},{"url":"http://tshepang.net/rust-week-of-2018-02-01","text":"I used [serde_rusqlite] for the first time, and thought it was fantastic, if leveraging the wonderful serde framework. On a related note, it was kool to discover the [rename_all attribute of serde], which helps reduce noise. Another attribute that reduces noise is [allow(dead_code)] , which is also handy when using serde. I did a bunch of work on --access-remote option of mrh, fixing bugs and letting it support usage of ssh-agent. This was inspired by a friend pushing me to make an announcement , which I promised would happen before 2018-02-06 meetup , and something I haven\\'t done before.","tags":"computing","title":"'Rust week of 2018-02-01'"},{"url":"http://tshepang.net/rust-week-of-2018-01-25","text":"Continuing on a work project I mentioned months ago, I had a failure related to cross-building pnet , a library I was using to get network interfaces. As a side note, the fault was in the build process , not the crate itself. I tried a few others as replacement: getaddrs can\\'t find ip address, and it\\'s abandoned according to the author, in favor of nix crate interfaces also fails to cross build, and I forgot that I actually tried it before, and was the reason I moved to pnet in the first place systemstat works, and I already use it for a few things: load average memory usage uptime So, that\\'s one less dependency, though I do wish this functionality was available from a more pleasant API... systemstat is ugly. As a general note, I wish more people took the effort to state in the README if their software is abandoned, perhaps with mentions of alternatives.","tags":"computing","title":"'Rust week of 2018-01-25'"},{"url":"http://tshepang.net/rust-week-of-2018-01-18","text":"I did very little Rust on week of 2018-01-11, but [added --ignore-uncommitted-repos to mrh]. This week was more active... I used the fantastic dialoguer for the first time... so pleasant, resulting in much cleaner code for a private project. For the work project I mentioned some months ago , I added a feature to check if certain ports of a remote machine are reachable. The bigger part though was it \\'forced\\' me to refactor the code, since the various bits needed checking at different intervals... in my case, as an example, I check port reachability once in 60 seconds, but would check load average once in 6.","tags":"computing","title":"'Rust week of 2018-01-18'"},{"url":"http://tshepang.net/rust-week-of-2018-01-04","text":"Some more work on mrh , I added the ability to check if there are unpulled commits as well as if there are tags that aren\\'t pushed upstream. The latter is what motivated this work, a feature useful for work, to avoid forgetting pushing tags. This meant doing the dreaded work of accessing the remote repo, which is complicated by potentially having to authenticate, in the case of private repos for example. It was painful (we need an easier git library), but it works (but so damn slow). The result is version 0.9.","tags":"computing","title":"'Rust week of 2018-01-04'"},{"url":"http://tshepang.net/rust-week-of-2017-12-28","text":"Very little Rust last week, but this week I played some with termion for some user interface on a private project. I borrowed some of the code from a project I mentioned previously , one where I used the library for the first time. As was the case with that project, I found handling of keyboard input tedious and non-intuitive, and imagine there must be an easier way. We had another monthly meetup (we\\'ve had several of them so far), which was the usual random informal discussion of the exciting ecosystem of the great language that is Rust.","tags":"computing","title":"'Rust week of 2017-12-28'"},{"url":"http://tshepang.net/rust-week-of-2017-12-14","text":"Some more work on mrh : A friend did me a nice favor of creating an Iterator for Crawler , a task I failed at after 2 attempts... I don\\'t yet truly get Rust lifetimes Based on that work, I turned Crawler itself into an Iterator I added YAML and JSON output; they are behind a compile flag, since they bring with them some slow-compiling dependencies, and I don\\'t expect the features would be a common need","tags":"computing","title":"'Rust week of 2017-12-14'"},{"url":"http://tshepang.net/rust-week-of-2017-12-07","text":"Some more work on mrh : Use ordermap for repeatable output Turn into a library (backed by the command-line tool), which is a first for me (libs are more hard than apps, and helpfully force one to do a better design). I experienced some failures too: I looked to using termcolor (used by ripgrep and cargo, and [may replace termcolor in clap]), but found it too hard to use... API not as pleasant I also failed to turn output into an iterator (instead of Vec)","tags":"computing","title":"'Rust week of 2017-12-07'"},{"url":"http://tshepang.net/rust-week-of-2017-11-30","text":"Like last week, I did some more work on mrh : Replace colored with ansi_term (I prefer the API, and the latter was already a dependency of something else) Remove [follow_symlinks] feature (caused weird behavior) Use [Path.strip_prefix] instead of a custom solution For work (lucky me), I did a small tool that converts data from a CSV file containing network ports and their descriptions to a format that logstash can use: I used csv crate first time, an experience made pleasant by serde I also used ordermap first time, chosen because I care for output to match order in csv source file Another first was tera , and its immaturity surprised me","tags":"computing","title":"'Rust week of 2017-11-30'"},{"url":"http://tshepang.net/rust-week-of-2017-11-23","text":"There wasn\\'t much last week, other than continuing with the functional testing work that queries Elasticsearch. This week, however, saw me extending mrh (Pending is a repo state that requires action): Allow ignoring Untracked files in output (feature request from a friend) Distinguish Untracked state from other Pendings Add 3 more Pendings: added, removed, renamed Do not quit after encountering malformed repos Add color to output (via colored) Add option to display absolute paths Check if HEAD is tagged (with some help from Stack Overflow ) I am glad.","tags":"computing","title":"'Rust week of 2017-11-23'"},{"url":"http://tshepang.net/rust-week-of-2017-11-09","text":"I\\'ve done nothing regarding the previous two weeks, but this week had a look at Elasticsearch crates, as part of an effort to do some functional testing of the system at work. What I found was a forest of APIs without a good guide, but eventually ended up with something that queries the DB and checks if certain injected data appears. I wish there was an easy way of doing queries without having to resort to using the json! macro: ::: {.sourcecode} rust let query = json!({ \\\"sort\\\": [ { \\\"\\@timestamp\\\": { \\\"order\\\": \\\"asc\\\", } } ], \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"term\\\": { \\\"marker\\\": \\\"test0\\\" } }, { \\\"range\\\": { \\\"\\@timestamp\\\": { \\\"gte\\\": \\\"now-100s\\\", \\\"lte\\\": \\\"now\\\", }}}, ] } } }); ::: The crate that allows such typed queries happens to be incomplete and undocumented, so will ignore it for now.","tags":"computing","title":"'Rust week of 2017-11-09'"},{"url":"http://tshepang.net/from-offense-to-delight","text":"I was invited to a show named Best Friends, Worst Enemies which I described as \\\"so bad it\\'s offensive\\\". And I actually was offended, which was made worse by an appreciative audience, and they even stood up at the end of it, offering an ovation. I did not like it because I found neither the story nor the characters interesting enough to deserve the stage. I just don\\'t see how people would find any of what was shown profound or special or new. I complained to 3 people who also watched the show, and they could not understand what my issues were (how does one explain to another that a piece of art is not interesting). I also felt like walking out, and could not wait for the end. Basic story: 4 wayward friends (sex and drugs) find baby at door step, and a letter they find proclaims one of them a father, leading them to do paternity tests, and ending with a dumb twist. There is humor all over the place, none of which is particularly good. There are also contrived circumstances and... fuck, there is nothing there! Anyways, as I complained about the show, someone passively invited me to another show named Day of Absence , which was such a pleasure. Concept is great (and fresh)... \\\"white face* black performers play roles of white people in shitty-ass USA where blacks are treated like sub-humans, in a society so dependent on them that chaos ensues when they mysteriously disappear. There\\'s lots of good humor, there\\'s decent dialog, a wonderful performance by the guy playing mayor, and superb use of breaking the 4th wall, where the director would complain about mistakes the cast made, asking for re-takes. Another involved lighting problems, which, I later found out weren\\'t actually part of the show, yet served it so well. Show wasn\\'t perfect, and there was even a moment were I felt sleepy. I also felt the accents could do with a bit of work where,for example, I could not tell if they were mimicking black or white Americans. I sometimes also struggled with hearing what the fuck they were saying, though that could also be a property of those accents. I felt inconsistencies in those accents as well, as if they actors didn\\'t get enough practice. Despite those (rather minor) complaints, the director deserves much respect for what she created (what\\'s her name?).","tags":"arts","title":"from offense to delight"},{"url":"http://tshepang.net/rust-week-of-2017-10-19","text":"I released mrh v0.2.0, which takes into account that when latest upstream git reference does not match one that\\'s checked out, it could be that upstream is ahead. The assumption previously was that local is ahead of upstream, implying that a push is needed. The API that helped with this change is [Repository.grapth_ahead_behind], a lovely and unexpected gift ( commit ). I used cargo-outdated for the first time... I like. I also released tag-helper , whose development was sponsored by Panoptix , the company I work for. The tool helps reduce the tedium of tagging git repos, of which we have a bunch.","tags":"computing","title":"'Rust week of 2017-10-19'"},{"url":"http://tshepang.net/rust-week-of-2017-10-12","text":"I enjoyed a humorous joke post poking fun at inconsistent Rust naming of some stdlib types. I also expanded the work project I been working on the past few weeks, this time doing some file I/O among other things, which is always finicky business.","tags":"computing","title":"'Rust week of 2017-10-12'"},{"url":"http://tshepang.net/rust-week-of-2017-10-05","text":"Continuing with the work project , I replaced the interfaces library with pnet , a weird concoction of various network functionality in one ugly mess, but I did it because the order of the network interfaces it presents does not randomly change (the project is UI that presents various bits of info about the boxes that we sell, some of which is network-related), unlike is the case with interfaces . It is also comforting that the library has more users ( one vs. eight at time of writing).","tags":"computing","title":"'Rust week of 2017-10-05'"},{"url":"http://tshepang.net/rust-weeks-of-2017-09-14-to-2017-09-28","text":"Over the past 3 weeks, I continued work on a project I mentioned previously , a CLI UI for work. In addition to dependencies mentioned there, I used rust-ini and [serde_yaml], I mostly enjoyed the experience, though not too happy with the code, which feels messy... I use termion::AsynReader , which means I have to loop all over the place while waiting for stdin (keyboard input). I imagine there is a better way.","tags":"computing","title":"'Rust weeks of 2017-09-14 to 2017-09-28'"},{"url":"http://tshepang.net/rust-week-of-2017-09-07","text":"I had the fortune of building a Rust project at work, and following are the libraries I used: I used termion just to clear the screen. API looks kool, and I plan to use it for other stuff, like text (and password) input. systemstat has an ugly API, and relies on bytesize for system memory data, whose API is not obvious, and has [a rather ugly display bug] interfaces has an okay API, but the [get_all] method simply does not belong to a type named Interface.","tags":"computing","title":"'Rust week of 2017-09-07'"},{"url":"http://tshepang.net/rust-week-of-2017-08-31","text":"Week of 2017-08-24 did not really see any Rust activity. This week, however, I worked on mrh , a tool I created in order to look at status of multiple git repos, to avoid the tedium of navigating to each to check. The feature I added is checking if committed changes were pushed upstream. On the way there, I encountered these git2 APIS: Branch::wrap (submitted improvement to make doc less misleading ) Branch::upstream Repositoty::head I ended up publishing the tool too, which is the second time I\\'ve done so .","tags":"computing","title":"'Rust week of 2017-08-31'"},{"url":"http://tshepang.net/rust-week-of-2017-08-17","text":"I added a feature to mrh (multiple git repo helper) that allows one to display just those repos that have uncommitted changes... mrh --changed .","tags":"computing","title":"'Rust week of 2017-08-17'"},{"url":"http://tshepang.net/rust-week-of-2017-08-10","text":"I created a tool I named mrh (multiple git repo helper) , which does a recursive search for git repos and checks if there are changes not committed. It\\'s very useful for work, for we have a bunch of tiny repos, and it was such a pain to navigate to each and check status. I am so glad.","tags":"computing","title":"'Rust week of 2017-08-10'"},{"url":"http://tshepang.net/rust-week-of-2017-08-03","text":"My first upload to the official Rust registry , weeks-from-now . Finally!","tags":"computing","title":"'Rust week of 2017-08-03'"},{"url":"http://tshepang.net/rust-week-of-2017-07-27-special-edition","text":"I been using this series to help push me into constant Rust activity, ensuring I do not skip a week sitting idle. It worked in that, indeed, no 7 days passed without a single contribution to the ecosystem, no matter how tiny, and this has been going on for over a 100 weeks (i.e. since 2015-05-15 , also Rust 1.0 release date). The problem is I felt silly recording the tiny parts, stuff like a typo fixes, just to keep this going. Well, it\\'s time to stop that. I intend to avoid recording such, and if it means no blog post for that week, so be it. This was inspired by having a laptop failure, with a draft that wasn\\'t backed up anywhere. That draft only consisted of a list of those tiny contributions, and it felt extra silly trying to recreate it for publication.","tags":"computing","title":"'Rust week of 2017-07-27 (special edition)'"},{"url":"http://tshepang.net/rust-week-of-2017-07-20","text":"I am surprised by the ease of changing default Rust toolchain: # switch to nightly rustup default nightly # switch to stable rustup default stable This is more easy than remembering how to tell cargo to use to use a non-default toolchain, though that approach is not too bad either: # build with nightly cargo +nightly build I made two complaints , as well as five contributions .","tags":"computing","title":"'Rust week of 2017-07-20'"},{"url":"http://tshepang.net/rust-week-of-2017-07-13","text":"I am tempted, once again , to try out Remacs , a Rust port of GNU Emacs. It\\'s very encouraging that it tries to be compatible, for the drop-in-replacement effect. I am glad the change to add subcommands to structopt has been merged. It was the one important missing piece to this wonderful project . I also made a contribution to the project.","tags":"computing","title":"'Rust week of 2017-07-13'"},{"url":"http://tshepang.net/rust-week-of-2017-07-06","text":"Very little Rust this week, but I did make one complaint , and one contribution .","tags":"computing","title":"'Rust week of 2017-07-06'"},{"url":"http://tshepang.net/rust-week-of-2017-06-29","text":"Almost not Rust this week, but with one embarassingly tiny contribution .","tags":"computing","title":"'Rust week of 2017-06-29'"},{"url":"http://tshepang.net/rust-week-of-2017-06-22","text":"I wrote a tool that helps with semver git tagging, which made me explore the rather large (and unfriendly) API of git2-rs library . It needs lots of love, or at a more idiomatic replacement. Regarding contributions, I made just one .","tags":"computing","title":"'Rust week of 2017-06-22'"},{"url":"http://tshepang.net/rust-week-of-2017-06-15","text":"I used structopt for the first time, and found it reduces the pain of CLI parsing (via clap ). Its main shortcoming is lack of subcommand support , whose implementation would make a go-to for me. Regarding contributions, I made one tiny one .","tags":"computing","title":"'Rust week of 2017-06-15'"},{"url":"http://tshepang.net/rust-week-of-2017-06-08","text":"I submitted four complaints and made three contributions this week.","tags":"computing","title":"'Rust week of 2017-06-08'"},{"url":"http://tshepang.net/rust-week-of-2017-06-01","text":"Very little Rust this week, with just one contribution .","tags":"computing","title":"'Rust week of 2017-06-01'"},{"url":"http://tshepang.net/rust-week-of-2017-05-25","text":"There were three small contributions this time.","tags":"computing","title":"'Rust week of 2017-05-25'"},{"url":"http://tshepang.net/rust-week-of-2017-05-18","text":"I opened one issue and made one contribution .","tags":"computing","title":"'Rust week of 2017-05-18'"},{"url":"http://tshepang.net/rust-week-of-2017-05-11","text":"Like last week (and the one before it), very little Rust this week, and again I made just one tiny contribution .","tags":"computing","title":"'Rust week of 2017-05-11'"},{"url":"http://tshepang.net/rust-week-of-2017-05-04","text":"Like last week , very little Rust this week, and again with just one tiny contribution .","tags":"computing","title":"'Rust week of 2017-05-04'"},{"url":"http://tshepang.net/rust-week-of-2017-04-27","text":"Very little Rust work this week, with just one tiny contribution .","tags":"computing","title":"'Rust week of 2017-04-27'"},{"url":"http://tshepang.net/rust-week-of-2017-04-20","text":"The MQTT client library I mentioned last week is in serious need of documentation, so I did a tiny bit . I also made a small request/suggestion to the same library.","tags":"computing","title":"'Rust week of 2017-04-20'"},{"url":"http://tshepang.net/rust-week-of-2017-04-13","text":"Continuing on the work from last week , I found a far more pleasant MQTT client library, mqttc , and managed to send probor messages across. I also submitted a small note for the README regarding payload size.","tags":"computing","title":"'Rust week of 2017-04-13'"},{"url":"http://tshepang.net/rust-week-of-2017-04-06","text":"I enjoyed working with probor , which is a protocol built on top of CBOR data format. I made a submission to fix the example in the README, using the code in examples/ directory . I managed to turn JSON to CBOR on one side of a TCP socket, and decode it back to JSON on the other side (using [serde_json]). I failed, however, transporting that CBOR data over MQTT (using the oh-so-complex mqtt-rs ).","tags":"computing","title":"'Rust week of 2017-04-06'"},{"url":"http://tshepang.net/rust-week-of-2017-03-30","text":"I very enjoyed reading this (rather lengthy) comment on a thread discussing Rust CStr/Cstring APIs. It shows great depth of knowledge and shows no fear of expressing strong opinions... I loves it. As for the argument itself, I don\\'t know enough to have a qualified opinion, though the opposition is quite strong against the proposal (to deprecate those APIs). I also made two contributions , and submitted two complaints .","tags":"computing","title":"'Rust week of 2017-03-30'"},{"url":"http://tshepang.net/rust-week-of-2017-03-23","text":"Because I\\'m not serious, I made just one contribution .","tags":"computing","title":"'Rust week of 2017-03-23'"},{"url":"http://tshepang.net/rust-week-of-2017-03-16","text":"I made two contributions this past week. Meanwhile, a friend of mine has announced a Rust guide he\\'s been working on. I made some small contributions in its early days.","tags":"computing","title":"'Rust week of 2017-03-16'"},{"url":"http://tshepang.net/rust-week-of-2017-03-09","text":"I made a minor review , and I made one contribution .","tags":"computing","title":"'Rust week of 2017-03-09'"},{"url":"http://tshepang.net/rust-week-of-2017-03-02","text":"Not much Rust this week, just three contributions of the same thing... the repo was just to big to clone, which is strange for a project this small.","tags":"computing","title":"'Rust week of 2017-03-02'"},{"url":"http://tshepang.net/rust-week-of-2017-02-23","text":"I was glad to have the Python equivalent of the shlex crate, which understands shell quoting, helping in transforming command arguments into what\\'s suitable to send to process::Command::args . This allows one to avoid the pain experienced by naively doing the following: ::: {.sourcecode} rust let mut command = command.split(char::is_whitespace); let process::command::new(command.next().unwrap()) .args(command.collect::\\<Vec\\<_>>) .spawn() ... ::: If the command is something like hg commit --message 'git eat world' , then the iterator would expand to: hg commit --message \\'git eat world\\' That will not run, and will fail with a not-obvious error message. Using shlex, instead: ::: {.sourcecode} rust let mut command = shlex::split(args).unwrap()); let process::command::new(command.remove(1).unwrap()) .args(command) .spawn() ... ::: Output should then be like: hg commit --message git eat world Just one contribution this week, and it\\'s not even that great... not sure it\\'s an improvement","tags":"computing","title":"'Rust week of 2017-02-23'"},{"url":"http://tshepang.net/rust-week-of-2017-02-16","text":"Just one contribution , just like last week. I also asked a question on Stack Overflow... so surprising that one can\\'t change file owner using stdlib!","tags":"computing","title":"'Rust week of 2017-02-16'"},{"url":"http://tshepang.net/rust-week-of-2017-02-09","text":"Just one contribution this time. Damn!","tags":"computing","title":"'Rust week of 2017-02-09'"},{"url":"http://tshepang.net/rust-week-of-2017-02-02","text":"I very much enjoyed reading about the design of Rust futures . It makes me highly appreciate the smarts of those involved, and how lucky we are to have people building excellent abstractions like such. In addition, it also nicely summarises Rust traits. I wrote a tiny bit about the feature myself some time ago. I reported one issue and made two contributions .","tags":"computing","title":"'Rust week of 2017-02-02'"},{"url":"http://tshepang.net/rust-week-of-2017-01-27","text":"This week I submitted one complaint , and just four contributions .","tags":"computing","title":"'Rust week of 2017-01-27'"},{"url":"http://tshepang.net/rust-week-of-2017-01-20","text":"I enjoyed reading this post about bad C ideas that are seen in other languages, including Rust. I talked a bit about it on Twitter . I finally did set up my Emacs for code completion ( init.el changes ), thanks to an easy guide . I tried many months back and failed for some reasons I do not remember. Regarding contributions, I made just one .","tags":"computing","title":"'Rust week of 2017-01-20'"},{"url":"http://tshepang.net/rust-week-of-2017-01-06","text":"I asked two questions on Stack Overflow. The first led me to use the nifty [lazy_static] macro for the first time, The second led me to submit a complaint (which got fixed within 3 minutes by the way). I am looking forward to two projects: Alacritty , a fast terminal emulator Remacs , Emacs gradually implemented in Rust As for contributions, I made just three .","tags":"computing","title":"'Rust week of 2017-01-06'"},{"url":"http://tshepang.net/rust-week-of-2017-01-13","text":"I asked two questions on Stack Overflow , opened two issues , and made just one contribution ,","tags":"computing","title":"'Rust week of 2017-01-13'"},{"url":"http://tshepang.net/rust-week-of-2016-12-30","text":"We need more quality code reviews like this one for ripgrep. I used reqwest for the first time, and was made sad because using HTTP headers is as hard as doing the same for hyper , especially given that this is supposed to be a more easy library: ::: {.sourcecode} Rust let mut auth_bearer = Headers::new(); headers.set( Authorization ( Bearer { token: \\\"some token\\\", } ) ); let mut client = reqwest::Client::new(); client.get(\\\"example.com\\\").headers(auth_bearer).send(); ::: It can imagine a more nice API: ::: {.sourcecode} Rust let client = reqwest::Client::new(); let auth_bearer = reqwest::Header::Bearer::new(\\\"some token\\\"); client.get(\\\"example.com\\\").header(auth_bearer).send(); ::: I did not think much about this, so maybe there are issues with the desired. Just one contribution this time.","tags":"computing","title":"'Rust week of 2016-12-30'"},{"url":"http://tshepang.net/rust-week-of-2016-12-23","text":"I enjoyed going through the tutorial on slog , which helped reduce the complexity I experienced some time ago when I first looked. I made just two contributions this time around.","tags":"computing","title":"'Rust week of 2016-12-23'"},{"url":"http://tshepang.net/rust-week-of-2016-12-16","text":"I like how easy it seems to create custom template filters, as seen in this post about tera . I also like the utility of the derive_builder crate, as described in another post (from the same blog). In terms of contributions, I made just one .","tags":"computing","title":"'Rust week of 2016-12-16'"},{"url":"http://tshepang.net/rust-week-of-2016-12-09","text":"I played some with serde-yaml and rust-yaml. I last looked at YAML some years ago, and looking again, I am surprised by its complexity. As far as contributions go, there were just two .","tags":"computing","title":"'Rust week of 2016-12-09'"},{"url":"http://tshepang.net/rust-week-of-2016-12-02","text":"A mere two contributions this time.","tags":"computing","title":"'Rust week of 2016-12-02'"},{"url":"http://tshepang.net/rust-week-of-2016-11-25","text":"I been wanting to write a Rust reStructuredText parser for the longest time, and surprised to find that one has been around for months . I do not have the skills enough to build such a thing, so am glad someone beat me to it. In terms of contributions, there were just two this week.","tags":"computing","title":"'Rust week of 2016-11-25'"},{"url":"http://tshepang.net/rust-week-of-2016-11-18","text":"I was surprised by the ease of use of libflate when decompressing a gzip\\'ed file: ::: {.sourcecode} rust extern crate libflate; fn main() { let mut file = std::fs:: (\\\"file.gz\\\").unwrap(); let file = libflate::gzip::Decoder::new(&mut file).unwrap(); do_something_with(file); }; ::: And that\\'s it, file is now like a normal file! Another module I used for the first time is regex , which seems to have such a well-designed API actually. I made just one contribution this week.","tags":"computing","title":"'Rust week of 2016-11-18'"},{"url":"http://tshepang.net/rust-week-of-2016-11-11","text":"I enjoyed reading an excellent and detailed Rust API design guide . In terms of contributions, I submitted just two .","tags":"computing","title":"'Rust week of 2016-11-11'"},{"url":"http://tshepang.net/rust-week-of-2016-11-04","text":"Just two contributions this week.","tags":"computing","title":"'Rust week of 2016-11-04'"},{"url":"http://tshepang.net/rust-week-of-2016-10-28","text":"I find the following to be among the most exciting projects in the world of Rust: Cretonne , an alternative to LLVM Corrode , a C to Rust translator I made just one contribution this week, and submitted one issue .","tags":"computing","title":"'Rust week of 2016-10-28'"},{"url":"http://tshepang.net/rust-week-of-2016-10-21","text":"I very much enjoyed reading the announcement for 1.12.1 , the first patch release of Rust. Reading it is a good reminder of the great work of those involved, and I am grateful. I made some four small contributions .","tags":"computing","title":"'Rust week of 2016-10-21'"},{"url":"http://tshepang.net/rust-week-of-2016-10-14","text":"I asked a Nickel-related question , after searching and failing. This post about ripgrep is a masterpiece! Also, just one contribution this week.","tags":"computing","title":"'Rust week of 2016-10-14'"},{"url":"http://tshepang.net/rust-week-of-2016-10-07","text":"I am impressed by the documentation of curl-rust . It\\'s better than for all Rust crates I\\'ve seen yet, if memory serves well. I am grateful for the painstaking work it must have been for whoever was responsible... it\\'s a massive API. It could do with more examples though. In terms of contributions, I made just one .","tags":"computing","title":"'Rust week of 2016-10-07'"},{"url":"http://tshepang.net/rust-week-of-2016-09-30","text":"I submitted some five contributions this week.","tags":"computing","title":"'Rust week of 2016-09-30'"},{"url":"http://tshepang.net/rust-week-of-2016-09-23","text":"Just one contribution this week, but I\\'ve been continuing coding in the field of web development, using Nickel and JWT. It\\'s been fun, and the project should be open to the public in a week or two.","tags":"computing","title":"'Rust week of 2016-09-23'"},{"url":"http://tshepang.net/rust-week-of-2016-09-16","text":"I looked at bcrypt , which helps with secure password storage. I don\\'t quite understand how it works, but I\\'ve seen that it prevents brute-force attacks... there is lots of CPU usage during hashing and verification. I continued playing with Nickel ( started few weeks ago ), and am liking it more, largely due discovering a less-magical way of doing things where you\\'d use functions instead of a macro named middleware . I\\'ve also been playing with nickel-jwt-session , which offers such a convenient API to use for working with JSON Web Tokens . I even made two small contributions to the project.","tags":"computing","title":"'Rust week of 2016-09-16'"},{"url":"http://tshepang.net/rust-week-of-2016-09-09","text":"I used the postgres crate for the first time. I played with Diesel before (ORM), but it has some strange unresolved import issue, so will maybe look at it later. I made just one contribution this time around.","tags":"computing","title":"'Rust week of 2016-09-09'"},{"url":"http://tshepang.net/rust-week-of-2016-09-02","text":"Had a look at Diesel and at Nickel . I wish they had better documentation... I cannot say with good confidence that I understand them. Regarding contributions, I did just one .","tags":"computing","title":"'Rust week of 2016-09-02'"},{"url":"http://tshepang.net/rust-week-of-2016-08-19","text":"There were a few submissions , including one that took entirely many hours .","tags":"computing","title":"'Rust week of 2016-08-19'"},{"url":"http://tshepang.net/rust-week-of-2016-08-12","text":"I enjoyed a useful (and tiny) library that helps align text nicely. Following is an example of its usage: ::: {.sourcecode} rust extern crate unindent; use unindent::unindent; fn main() { let text = \\\" A long text is beginning here and not in the previous line, because it wouldn\\'t fit in comfort. \\\" println!(\\\"{}\\\", unindent(text)); } ::: I submitted to small improvements to its documentation. I also contributed a style improvement to Cargo, the Rust package manager.","tags":"computing","title":"'Rust week of 2016-08-12'"},{"url":"http://tshepang.net/rust-week-of-2016-08-05","text":"I made a tiny review . I also made some small contributions .","tags":"computing","title":"'Rust week of 2016-08-05'"},{"url":"http://tshepang.net/rust-week-of-2016-07-29","text":"There were just two contributions this time.","tags":"computing","title":"'Rust week of 2016-07-29'"},{"url":"http://tshepang.net/rust-week-of-2016-08-26","text":"I did learn how to use a TCP socket to communicate between 2 processes. I found the API quite pleasing: ::: {.sourcecode} rust let listener = TcpListener::bind(\\\"localhost:80\\\")? for stream in listener.incoming() { let content = Vec::new(); stream?.read_to_end(&mut content); // do stuff with content } ::: I also submitted a change that makes the example in the docs more simple.","tags":"computing","title":"'Rust week of 2016-08-26'"},{"url":"http://tshepang.net/rust-week-of-2016-07-22","text":"I made a small number of doc submissions .","tags":"computing","title":"'Rust week of 2016-07-22'"},{"url":"http://tshepang.net/rust-week-of-2016-07-15","text":"I learnt some stuff about API design , and enjoyed reading about experiences of developing a medium-sized project . I also contributed a few doc changes to Rust.","tags":"computing","title":"'Rust week of 2016-07-15'"},{"url":"http://tshepang.net/rust-week-of-2016-07-08","text":"I created my first custom type, a struct with 2 members and one method. It made my code more clean... when you see your functions accept way too many arguments, chances are those are related, making it time for a bit of refactoring. It was fun. This week, I only made one submission .","tags":"computing","title":"'Rust week of 2016-07-08'"},{"url":"http://tshepang.net/rust-week-of-2016-07-01","text":"Made my first contribution to Servo , the most exciting software project on the planet. I also did a few other small doc submissions to other projects.","tags":"computing","title":"'Rust week of 2016-07-01'"},{"url":"http://tshepang.net/rust-week-of-2016-06-24","text":"I struggled hard enough with a does not live long enough that I decided to ask for help, and the solution to my problem was actually quite simple. I submitted some doc fixes to various projects, and reported an issue that promptly fixed on yet another. I also ran rustfmt on some part of Rust.","tags":"computing","title":"'Rust week of 2016-06-24'"},{"url":"http://tshepang.net/rust-week-of-2016-06-17","text":"I found a so nice library that handles a favorite file format of mine, INI. I even made some tiny doc improvements for it . I was surprised to find that [there is no easy/clear way to interleave stdout and stderr with the standard library]. [there is no easy/clear way to interleave stdout and stderr with the standard library]: http://stackoverflow.com/q/37918670/321731","tags":"computing","title":"'Rust week of 2016-06-17'"},{"url":"http://tshepang.net/rust-week-of-2016-06-10","text":"I was made sad by the complexity of involving STDIN when using std::process module: ::: {.sourcecode} rust fn o_to_0() -> std::io::Result\\<bool> { let mut p = std::process::Command::new(\\\"tr\\\") .arg(\\\"o\\\") .arg(\\\"0\\\") .stdin(std::process::Stdio::piped()) .spawn()?; let input = \\\"foo\\\"; if let Some(stdin) = p.stdin.as_mut() { stdin.write_all(input.as_bytes())?; } Ok(p.wait()?.success()) } ::: I wonder if this can be more easy, in other languages and/or libraries. I made two submissions , and gave some commentary on another .","tags":"computing","title":"'Rust week of 2016-06-10'"},{"url":"http://tshepang.net/rust-week-of-2016-06-03","text":"I did more Rust coding than most weeks this time around, busy with the project I mentioned last week . My favorite parts: I love the fact that inotify-rs ( first mention ) collects events in the background, so that when you are done with whatever task you were busy with, you can check if there is anything new to act upon (e.g. a new file was created in a watched directory). This allows one to do away with using threads, reducing code complexity. Rust error handling is so nice, and forces one to think better about code. As an example, when you doing any I/O, you mostly want to do that in a separate function so that you can return a Result type, something like Result<(), std::io::Error> . This forces you to isolate just the I/O handling part from the other parts of the logic, where you\\'d for maybe just want to return a bool type. In my case, I would not get any I/O error, but I would get failure from running an external process (see std::process module) where the exit status was not 0. That meant I/O error failure case and the process error case had to be handled in separate places. In the example I gave above, Result<(), std::io::Error> , this means that we don\\'t care about the success return value. On the calling side, we have an option to use a match statement to handle the result: ::: {.sourcecode} rust match foo() { Ok(_) => (), Err(error) => do_something_with(error) } ::: There is a convenient syntax to deal with such case, where you don\\'t care about one of values... if let : ::: {.sourcecode} rust if let Err(error) = foo() { do_something_with(error) } ::: So elegant! I submitted just one contribution this time around.","tags":"computing","title":"'Rust week of 2016-06-03'"},{"url":"http://tshepang.net/rust-week-of-2016-05-27","text":"Being a fanboy, I found the discussion Why aren\\'t you using Rust at work? rather depressing. It\\'s also relevant to me since I am currently writing some internal tool at work, and wonder how far it will go before re-writing in something more acceptable , like Python. To be fair, there was also some great praise of the ecosystem. I read the intro of rust-postgres and even made a small contribution . I also made a doc contribution to stdlib. I was surprised that there is no Rust set type that preserves insertion order . Something I learned about running system commands, imagine you had a complex command like: ssh some-hostname \"uname --all && free --human\" Running such in Rust would be: ::: {.sourcecode} rust std::process::Command::new(\\\"ssh\\\") .arg(\\\"some-hostname\\\") .arg(\\\"uname --all && free --human\\\") .spawn() .expect(\\\"problem\\\"); :::","tags":"computing","title":"'Rust week of 2016-05-27'"},{"url":"http://tshepang.net/rust-week-of-2016-05-20","text":"I just did two submissions, which also happen to be my first contributions to the respective projects, Rust coreutils and fs2 .","tags":"computing","title":"'Rust week of 2016-05-20'"},{"url":"http://tshepang.net/rust-week-of-2016-05-13","text":"Just four changes this week, including one for the blog .","tags":"computing","title":"'Rust week of 2016-05-13'"},{"url":"http://tshepang.net/rust-week-of-2016-05-06","text":"I did four small doc changes this time.","tags":"computing","title":"'Rust week of 2016-05-06'"},{"url":"http://tshepang.net/rust-week-of-2016-04-29","text":"Still not serious, so I only managed one submission .","tags":"computing","title":"'Rust week of 2016-04-29'"},{"url":"http://tshepang.net/rust-week-of-2016-04-22","text":"Because I\\'m still not serious, I did just one (desperate) submission this week :(","tags":"computing","title":"'Rust week of 2016-04-22'"},{"url":"http://tshepang.net/rust-week-of-2016-04-15","text":"I submitted three changes this time.","tags":"computing","title":"'Rust week of 2016-04-15'"},{"url":"http://tshepang.net/rust-week-of-2016-04-08","text":"My only contribution is this 1-character change . I need to get serious about this. In other news, I was surprised by the success of this tweet of mine : title of the moment: Learning Rust With Entirely Too Many Linked Lists http://cglab.ca/~abeinges/blah/too-many-lists/book ... #rustlang It has over 6000 views, according to Twitter analytics.","tags":"computing","title":"'Rust week of 2016-04-08'"},{"url":"http://tshepang.net/rust-week-of-2016-04-01","text":"I submitted just one change this time.","tags":"computing","title":"'Rust week of 2016-04-01'"},{"url":"http://tshepang.net/rust-week-of-2016-03-25","text":"I submitted five documentation changes this time around.","tags":"computing","title":"'Rust week of 2016-03-25'"},{"url":"http://tshepang.net/rust-week-of-2016-03-18","text":"Just two changes this time around.","tags":"computing","title":"'Rust week of 2016-03-18'"},{"url":"http://tshepang.net/rust-week-of-2016-03-11","text":"Just two contributions this time.","tags":"computing","title":"'Rust week of 2016-03-11'"},{"url":"http://tshepang.net/rust-week-of-2016-03-04","text":"I was hoping to do better than last week , but it was even worse... just one contribution .","tags":"computing","title":"'Rust week of 2016-03-04'"},{"url":"http://tshepang.net/boiling-head","text":"Part of an appeal to not be offended on behalf of others: I mean, if he\\'d replied to that hideous and obviously impractical macro with \\\"Go boil your head\\\", despite being something you could interpret as a command to greviously injure myself, I\\'d have gotten a chuckle out of it and assumed he was being facetious. If anything, I\\'d be more upset that he hadn\\'t taken the opportunity to tell me to throw some vegetables in with my head when I boiled it to at least make a semi-decent \\\"pork\\\" broth.","tags":"misc","title":"boiling head"},{"url":"http://tshepang.net/rust-week-of-2016-02-26","text":"I enjoyed Comparing Rust and Java , the first such comparison I remember reading. It\\'s also special in that the author hates none of the two. In terms of contributions, I am embarassed that I submitted a mere two changes .","tags":"computing","title":"'Rust week of 2016-02-26'"},{"url":"http://tshepang.net/rust-week-of-2016-02-19","text":"Just four documentation submissions this time.","tags":"computing","title":"'Rust week of 2016-02-19'"},{"url":"http://tshepang.net/rust-week-of-2016-02-12","text":"I submitted four documentation changes this time. I also enjoyed reading Two Weeks of Rust , a blog post resulting from building something non-trivial using the language. In terms of learning, I\\'ve always been wondering why one does not need mut when reading values from an iterator via a for loop , but does not when reading them using next : ::: {.sourcecode} rust let it = std::env::args() // iterator over CLI arguments for value in it // versus let mut it = std::env::args() // iterator over CLI arguments do_something(it.next()); do_something(it.next()); ... ::: I think with the for loop , it cannot be used anymore, and that\\'s why it can get away with being immutable. I\\'m not 100% yet... this feels like a lousy explanation.","tags":"computing","title":"'Rust week of 2016-02-12'"},{"url":"http://tshepang.net/leftovers-season-2-episode-1","text":"Few tv episodes have left as much an impact on me as this bizarre one. I was reeling from it for days after watching it first time, and I hardly ever re-visit tv shows. The performances are without flaw. My one favorite is that of they guy playing the fireman. He delivers one of the most impressive performances I\\'ve seen yet. He\\'s such a pleasure to watch. Equally irresistible is the gal playing his daughter. The character development given these two is amazing. Playing the mother is Regina King and what is the only one her performances I\\'ve really enjoyed. There is a strange choice of events which don\\'t serve the story in any obvious way, but they add to the enjoyment, and are given excellent direction: The incident with the scientist taking water samples The brief and quiet moment showing the girls in the car The girls running naked The prison confession","tags":"arts","title":"'Leftovers - Season 2 Episode 1'"},{"url":"http://tshepang.net/rust-week-of-2016-02-05","text":"As was the case with so many of the previous entries in this series, I didn\\'t do much this week, submitting a mere three changes .","tags":"computing","title":"'Rust week of 2016-02-05'"},{"url":"http://tshepang.net/rust-week-of-2016-01-29","text":"I submitted four documentation changes this time.","tags":"computing","title":"'Rust week of 2016-01-29'"},{"url":"http://tshepang.net/rust-week-of-2016-01-22","text":"I submitted a few documentation changes I requested clarification on one documentation issue I submitted results of running rustfmt on a bit of code","tags":"computing","title":"'Rust week of 2016-01-22'"},{"url":"http://tshepang.net/asus-zenbook-ux305fa","text":"On 2015-12-14, I got me the UX305. It\\'s the base level model in the range, with 4GB RAM, 128GB SSD, an FHD screen, and Intel Core M CPU (M-5Y10c). It it great value at R10k (\\$600 in USA), so it didn\\'t feel too much of an indulgence, given I still have the Vaio Pro 13 . Like the older laptop, I had to change 2 lines in /usr/share/alsa/alsa.conf: defaults.ctl.card 1 defaults.pcm.card 1 What makes the Vaio Pro 13 better: The charger does not have a USB charging port The laptop is less pretty (so boring), and I\\'m not a fan of the purple look The power button is not a button, but one of the keys on the keyboard, which makes it too easy to press by mistake... happened to me a few times The Insert key is hidden behind the Fn key, which is awkward since I use the Ctrl+Shift+Insert combo to (middle-)paste The SD card slot is not full-depth, so you will see the SD card (adaptor) protrude from the side I\\'m used to the charging port being on the left No keyboard back-light The SSD is not as fast, and so is the CPU Given all above, this is overall a better laptop: No (noisy) fan Gentle corners (though a bit too gentle, making this a less pretty laptop) Power consumption is very low, and I could easily get 8 hours of battery life with a moderate workload I loves the touchpad: it\\'s more smooth and large The keyboard also feels a lot better; it\\'s such pleasure to use! The body is also a lot more rigid, so no annoying flexibility at the bottom of the touchpad. The rigidity also ensures that there are no keyboard marks on the screen.","tags":"computing","title":"Asus Zenbook UX305FA"},{"url":"http://tshepang.net/rust-week-of-2016-01-15","text":"I discovered that a change I made last week didn\\'t work, so submitted something that works this time around. I also submitted four doc changes .","tags":"computing","title":"'Rust week of 2016-01-15'"},{"url":"http://tshepang.net/rust-week-of-2016-01-08","text":"As usual, I submitted a number of small doc changes . I am particularly proud of the code submission I made to rustdoc to strip away the annoying whitespace appended before the final closing brace. In other news, Rust by Example has a very illustrative example regarding Box type and size of memory usage of data, and it led me to submit a tiny improvement .","tags":"computing","title":"'Rust week of 2016-01-08'"},{"url":"http://tshepang.net/rust-week-of-2016-01-01","text":"I found an interesting discussion regarding trade-offs of using C libraries instead of writing ones in Rust. I also submitted one doc change and helped review the new Rust FAQ..","tags":"computing","title":"'Rust week of 2016-01-01'"},{"url":"http://tshepang.net/rust-week-of-2015-12-25","text":"I made three documentation submissions this time around.","tags":"computing","title":"'Rust week of 2015-12-25'"},{"url":"http://tshepang.net/rust-week-of-2015-12-18","text":"I submitted a small change to Cargo. I also submitted two documentation changes for Rust.","tags":"computing","title":"'Rust week of 2015-12-18'"},{"url":"http://tshepang.net/rust-week-of-2015-12-11","text":"I submitted five tiny doc fixes .","tags":"computing","title":"'Rust week of 2015-12-11'"},{"url":"http://tshepang.net/rust-week-of-2015-12-04","text":"I submitted two doc changes , and reviewed one .","tags":"computing","title":"'Rust week of 2015-12-04'"},{"url":"http://tshepang.net/rust-week-of-2015-11-27","text":"I added missing examples to stdlib documentation. I also learned a bit about Chrono , seemingly the most comprehensive date and time library for Rust. I used to determine what the next release date for Rust is, using the following code: ::: {.sourcecode} rust extern crate chrono; use chrono::{NaiveDate, Duration, Local}; fn main() { for n in 0.. { // Rust 1.0 release let initial = NaiveDate::from_ymd(2015, 5, 15); // 1.0 was released on a Friday, but nowadays they happen Thursdays let release_date = initial.checked_add(Duration::weeks(6 * n)).unwrap() - Duration::days(1); if release_date > Local::today().naive_local() { println!(\\\"{}\\\", release_date); break; } } } :::","tags":"computing","title":"'Rust week of 2015-11-27'"},{"url":"http://tshepang.net/rust-week-of-2015-11-20","text":"I submitted some improvements to new Rust stdlib APIS, std::time::Instant and std::time::SystemTime . I also submitted the result of running rustfmt on syntax::parser::lexer .","tags":"computing","title":"'Rust week of 2015-11-20'"},{"url":"http://tshepang.net/rust-week-of-2015-11-13","text":"I submitted fixes for small nits on Ramp, the Rust Arithmetic in Multiple Precision library. The project was brought to my attention for being Crate of the Week ( source ). I also asked for some clarity on a section in the Reference named Behavior considered undefined .","tags":"computing","title":"'Rust week of 2015-11-13'"},{"url":"http://tshepang.net/rust-week-of-2015-11-06","text":"I made some small improvements to rustc-serialize docs. I also looked at parsing JSON, and it doesn\\'t look too bad . I am mostly interested in the from_str method, and was surprised to find that it\\'s pretty much the same as that of (the more modern) [serde_json].","tags":"computing","title":"'Rust week of 2015-11-06'"},{"url":"http://tshepang.net/rust-week-of-2015-10-30","text":"Just one submission this time around. Yep! I did however spend time pondering the magical forward type inference that I first experienced back in May , this time sparked by this example ; see this line: let address = \"0.0.0.0:6567\" . parse () . unwrap (); You actually have to read further to figure the type that URL is going to be parsed as: let server = TcpListener :: bind (& address ) . unwrap (); It would be less surprising if we had the following instead: let address = SocketAddr :: from_str ( \"0.0.0.0:6567\" . unwrap (); let server = TcpListener :: bind (& address ) . unwrap ();","tags":"computing","title":"'Rust week of 2015-10-30'"},{"url":"http://tshepang.net/rust-week-of-2015-10-23","text":"I submitted three documentation submissions this time around.","tags":"computing","title":"'Rust week of 2015-10-23'"},{"url":"http://tshepang.net/rust-week-of-2015-10-16","text":"I made three documentation changes and one rustfmt-assisted formatting.","tags":"computing","title":"'Rust week of 2015-10-16'"},{"url":"http://tshepang.net/rust-week-of-2015-10-09","text":"My laziness continues, so I got only three submissions this time.","tags":"computing","title":"'Rust week of 2015-10-09'"},{"url":"http://tshepang.net/rust-week-of-2015-10-02","text":"I submitted just two changes this time around. I also complained about the language term, item .","tags":"computing","title":"'Rust week of 2015-10-02'"},{"url":"http://tshepang.net/rust-week-of-2015-09-25","text":"I reviewed a doc submission My submission from over 2 months ago has finally been accepted. Interesting how small changes can be so controversial. I submitted five documentation improvements , three of which I created a week or two ago","tags":"computing","title":"'Rust week of 2015-09-25'"},{"url":"http://tshepang.net/rust-week-of-2015-09-18","text":"As is normally the case, I submitted a number of small documentation changes .","tags":"computing","title":"'Rust week of 2015-09-18'"},{"url":"http://tshepang.net/rust-week-of-2015-09-11","text":"As was the case with last week, I didn\\'t put much effort this week... just four small submissions .","tags":"computing","title":"'Rust week of 2015-09-11'"},{"url":"http://tshepang.net/rust-week-of-2015-09-04","text":"As was the case with the past several weeks, I didn\\'t put much effort this week... just three submissions .","tags":"computing","title":"'Rust week of 2015-09-04'"},{"url":"http://tshepang.net/rust-week-of-2015-08-28","text":"As usual, I submitted some very small doc changes .","tags":"computing","title":"'Rust week of 2015-08-28'"},{"url":"http://tshepang.net/rust-week-of-2015-08-21","text":"This time around, my contributions were just three doc changes and one style fix .","tags":"computing","title":"'Rust week of 2015-08-21'"},{"url":"http://tshepang.net/rust-week-of-2015-08-14","text":"As usual, I submitted some rather small doc improvements . In addition, I also skimmed through some of The Dark Arts of Advanced and Unsafe Rust Programming , a pleasant read that\\'s infused with good humor.","tags":"computing","title":"'Rust week of 2015-08-14'"},{"url":"http://tshepang.net/rust-week-of-2015-08-07","text":"This time around, I only submitted these three improvements . Elsewhere, I was surprised by the success of this Tweet of mine : It got nearly 5000 Impressions. It\\'s likely to exceed the other surprise success , which now got over 6000 Impressions.","tags":"computing","title":"'Rust week of 2015-08-07'"},{"url":"http://tshepang.net/doggystyle-1993","text":"The best hip-hop album I\\'ve ever come across, it has not one let-down of a track. The closest competitor is The Score (there is only 1 blight in there). Such an amazing achievement! 1 masterpiece Doggy Dogg World 7 excellent tracks F Funk Intro Gin And Juice Murder Was the Case Serial Killa For All My Niggaz & Bitches Gz & Hustlas Pump Pump","tags":"arts","title":"'Doggystyle (1993)'"},{"url":"http://tshepang.net/the-score-1996","text":"Second only to Doggystyle in the rank of the best hip-hop albums, it has only one blight... No Woman, No Cry. Following are the excellent tracks: How Many Mics Fu-Gee-La The Mask Cowboys Ready Or Not Zealots The Beast Manifest The Score","tags":"arts","title":"'The Score (1996)'"},{"url":"http://tshepang.net/rust-week-of-2015-07-31","text":"I got to use inotify-rs for some task at work (first time I used Rust for work, yay!), and I found it surprisingly easy to use. It\\'s not a very pretty API though, and I remember the Python API to be horrible too. Maybe the nature of inotify disallows beauty, who knows. I submitted these to the Rust tree: Follow idiom Be more specific Add missing info Some miscellany","tags":"computing","title":"'Rust week of 2015-07-31'"},{"url":"http://tshepang.net/rust-week-of-2015-07-24","text":"I have been given the honor of Friend of the Tree by a member of the Rust Library team . I never expected to be considered, given the far greater work that previous recipients have done. Is kool stuff. Regarding my weekly contributions, I submitted just four changes .","tags":"computing","title":"'Rust week of 2015-07-24'"},{"url":"http://tshepang.net/top-tracks-gerry-rafferty","text":"1 masterpiece Baker Street 4 excellent works Bring It All Home Get It Right Next Time Night Owl On the Way","tags":"arts","title":"'top tracks: Gerry Rafferty'"},{"url":"http://tshepang.net/top-tracks-michael-jackson","text":"10 excellent works Earth Song ( HIStory - 1995) Billie Jean ( HIStory - 1995) The Way You Make Me Feel ( HIStory - 1995) Rock With You ( HIStory - 1995) Beat It ( HIStory - 1995) Remember the Time ( HIStory - 1995) Wanna Be Startin\\' Somethin\\' ( HIStory - 1995) Dirty Diana Liberian Girl Will You Be There","tags":"arts","title":"'top tracks: Michael Jackson'"},{"url":"http://tshepang.net/rust-week-of-2015-07-17","text":"I submitted these: Tiny style fix Better names for two variable bindings Improve some VecDeque examples","tags":"computing","title":"'Rust week of 2015-07-17'"},{"url":"http://tshepang.net/top-tracks-louis-armstrong","text":"1 masterpiece St. James Infirmary 7 excellent works Cabaret ( What A Wonderful World - 1964) What A Wonderful World ( What A Wonderful World - 1964) A Monday Date ( Hot Five And Hot Seven - 1927) Hotter Than That ( Hot Five And Hot Seven - 1927) The Peanut Vendor ( You\\'re Driving Me Crazy - 1930) Indiana (appears in a few albums, including An Evening With Louis Armstrong And His AllStars - 1956) Someday (appears in a few albums, including An Evening With Louis Armstrong And His AllStars - 1956; aka Someday You\\'ll Be Sorry) honorable mentions Squeeze Me ( Satch Plays Fats - 1955) Hotter Than That ( Satchmo: A Musical Autobiography - Disc 2 - 2001)","tags":"arts","title":"'top tracks: Louis Armstrong'"},{"url":"http://tshepang.net/rust-week-of-2015-07-10","text":"I submitted these: Two improvements to documentation that explains errors I removed some redundant info from I/O docs I did this one last week, and forgot to submit it","tags":"computing","title":"'Rust week of 2015-07-10'"},{"url":"http://tshepang.net/rust-week-of-2015-07-03","text":"I made a bunch of some rather small changes to the Rust Reference , including [this bold one]. I made another change , whose preparation forced me to learn more closure stuff than I cared for: FnOnce , FnMut , and Fn . I added some examples of array usage to API docs I also made some improvements to the RFC on coercions Back to the Reference, I made two additional improvements .","tags":"computing","title":"'Rust week of 2015-07-03'"},{"url":"http://tshepang.net/rust-week-of-2015-06-26","text":"I removed a sentence that is not needed from Cargo documentation. I also added ability to read from \\$EMAIL environment variable to the cargo new command, and fixed a small issue in the test suite.. In the Rust tree: I fixed one oversight where someone missed removing some obsolete doc and annotations while they were removing obsolete code I fixed some bad code indents I added an example for reading from stdin I removed a misleading sentence I then fixed a typo","tags":"computing","title":"'Rust week of 2015-06-26'"},{"url":"http://tshepang.net/rust-week-of-2015-06-19","text":"Work done on the Documentation chapter of the official Rust book: I submitted a number of changes I also found [misuse of the word, *thing*] Elsewhere: I submitted some small fix I also want Rust to have a documentation policy . This led to being pointed to API conventions doc, which needed some markup fixes .","tags":"computing","title":"'Rust week of 2015-06-19'"},{"url":"http://tshepang.net/places-that-go-cant-go","text":"You know I think the things that Rust has to offer, particularly that there are places that it can go that Go can't, or at least today in Go you can't go easily... (interrupted with laughter) —Unintentional humor from some podcast","tags":"computing","title":"Places that Go can't go"},{"url":"http://tshepang.net/rust-week-of-2015-06-12","text":"I\\'m the documentation guy, so: I submitted three changes to the API documentation Two changes to the README (first time) One change to the Style Guide (also first time)","tags":"computing","title":"'Rust week of 2015-06-12'"},{"url":"http://tshepang.net/rust-week-of-2015-06-05","text":"I submitted a change to remove a sentence that is not clear in the chapter on Generics in Rust Book. Reading the (excellent) Traits section of The Rust Reference led me to submit the following improvements: One that removes jarring whitespace Two more for improving readability: One by making use of bullets Another by avoiding needless abbreviations Yet another that adds a link to the wonderful treatment of the trait concept. It was however not accepted, and replaced with one that adds the definition inline . There was also a typo fix :)","tags":"computing","title":"'Rust week of 2015-06-05'"},{"url":"http://tshepang.net/rust-week-of-2015-05-29","text":"I was surprised by the somewhat magical Rust type inference: ::: {.sourcecode} rust fn main() { let string = \\\"10\\\"; let num = match string.parse() { Ok(num) => num, Err(_) => 0, }; assert_eq!(num, 10); } ::: A more explicit parse call would be string.parse::<i32>() , but the type to be parsed into is inferred by the 0 that is returned in the Err(_) arm of the match, which is an i32. This is some far-reaching shit! I submitted changes to improve some of str documentaton. I also submitted a whole bunch of smaller changes ,","tags":"computing","title":"'Rust week of 2015-05-29'"},{"url":"http://tshepang.net/linux-threads-are-not-deterministic","text":"By deterministic, I am referring to their scheduling. Here\\'s an example in Rust: ::: {.sourcecode} rust use std::thread; use std::sync::mpsc::channel; fn main() { let thread_count = 4; let (tx, rx) = channel(); for x in 0..thread_count { let tx = tx.clone(); thread::spawn(move || { println!(\\\"t{} tx\\\", x); tx.send(x).unwrap(); }); } for _ in 0..thread_count { println!(\\\"rx from t{}\\\", rx.recv().unwrap()); } } ::: What I\\'m doing there is create 4 child threads, from which I send messages that are to be captured by the main thread. I built and ran it with: rustc --opt-level 0 main.rs && ./main Following is output from one sample run: t1 tx t0 tx t2 tx t3 tx rx from t1 rx from t0 rx from t3 rx from t2 Following is what I get with another run: t0 tx t1 tx rx from t1 t2 tx rx from t2 t3 tx rx from t3 rx from t0 If it was all deterministic (i.e. predictable), t0 tx would always come before t1 tx , and rx from t0 before rx from t1 , and so on. I think this is done for performance reasons, where the kernel just looks for an available slot, running each thread on a best-effort basis. My guess is that a more real-time kernel would be more predictable.","tags":"computing","title":"Linux threads are not deterministic"},{"url":"http://tshepang.net/rust-week-of-2015-05-22","text":"I bumped onto an oddity regarding \\'pow\\' method ... there is no fallback. I found that converting a char to a String (or &str) is [not as obvious as I hoped]. I read some of std::path code which resulted in [some small changes]. I re-discovered the convenience function, Iterator::cloned , and submitted two related documentation improvements . I added syntax highlighting to the Rust posts on my blog that were missing it. I also updated the code to run on modern Rust. I got some clarity on the concept of traits by re-reading the well-written post, Abstraction without overhead: traits in Rust . One feature they have is they allow adding methods to types, including upstream ones, example being stdlib types as follows: ::: {.sourcecode} rust trait Invert { fn invert(&self) -> f64; } impl Invert for i32 { fn invert(&self) -\\> f64 { : 1.0/(\\*self as f64) } } fn main() { let foo = 10_i32; assert_eq!(foo.invert(), 0.1); } ::: Another example is that one can limit the type of arguments accepted by a function, though it uses something of an ugly syntax: ::: {.sourcecode} rust fn print_inverse\\<T: Invert>(foo: T) { println!(\\\"Inverse: {}\\\", foo.invert()); } ::: The <T: Invert> means this function will only accept foo whose type implements the Invert trait. You can check by calling it with an i32 value, in which it will succeed: ::: {.sourcecode} rust print_inverse(10_i32); ::: Output: Inverse : 0.1 Any other type will fail: ::: {.sourcecode} rust print_inverse(10_f64); ::: Output: the trait `Invert` is not implemented for the type `f64` [E0277] This allows for a feature named generics, where one can use multiple types for the same function. For example, that error will disappear if you got this: ::: {.sourcecode} rust impl Invert for f64 { fn invert(&self) -\\> f64 { : 1.0/(\\*self) } } :::","tags":"computing","title":"'Rust week of 2015-05-22'"},{"url":"http://tshepang.net/various-rust-ways-of-displaying-stuff-to-the-screen","text":"Here is a simple way of doing it: ::: {.sourcecode} rust use std::io::{self, Write}; fn main() { io::stdout().write_all(b\\\"some outputn\\\"); } ::: I do however get this warning when I build it: $ rustc main.rs main.rs:4:5: 4 :42 warning: unused result which must be used, #[warn(unused_must_use)] on by default main.rs:4 io::stdout () .write_ln ( b \"some output\" ) ; &#94;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Let\\'s kill it: ::: {.sourcecode} rust use std::io::{self, Write}; fn main() { io::stdout().write_all(b\\\"some output\\\").unwrap(); } ::: What I did is is call unwrap which basically asks our operation to panic! in case of some error. Think of it as a shortcut of: ::: {.sourcecode} rust use std::io::{self, Write}; fn main() { match io::stdout().write_all(b\\\"some outputn\\\") { Ok(_) => (), Err(_) => panic!(), } } ::: Some docs: [std::io::Writer::write_line] core::result::Result::unwrap std::panic! What if we wanted to do some string formatting: ::: {.sourcecode} rust use std::io::{self, Write}; fn main() { let second_word = \\\"output\\\"; let text = format!(\\\"some {}n\\\", second_word); io::stdout().write_all(text.as_bytes()).unwrap(); } ::: But there is a shortcut for the code above: ::: {.sourcecode} rust use std::io::{self, Write}; fn main() { let second_word = \\\"output\\\"; writeln!(&mut io::stdout(), \\\"some {}\\\", second_word).unwrap(); } ::: There is an even shorter shortcut: ::: {.sourcecode} rust fn main() { let second_word = \\\"output\\\"; println!(\\\"some {}\\\", second_word); } ::: Question to self: do we get a panic! if println gets an I/O error? Some docs: std::format! std::writeln! std::println! So, why bother with all these many ways when there\\'s a simple println! ? Flexibility. One example I can think of is writing to stderr. There is no simple macro for that ( println! is for stdout). Short of implementing our own macro , We\\'d have to do something like the following: ::: {.sourcecode} rust use std::io; fn main() { writeln!(&mut io::stderr(), \\\"some output\\\"); } ::: You can test that it really goes to stderr by running it like: $ ./main > /dev/null some output","tags":"computing","title":"various Rust ways of displaying stuff to the screen"},{"url":"http://tshepang.net/rust-week-of-2015-05-15","text":"This is the first of what I intend to be a weekly series of posts related to my favorite programming language. I here take Rust weeks to begin each Friday, since Stable releases of the Rust distribution (language and included libraries) are to be released on that week day. This is also a great excuse to write more regularly. I read a high quality post titled Rust ownership, the hard way . I learned quite a bit going through it, like the meaning of #[derive(Clone, Copy)] , which I see a lot but never knew what it meant. I also learned that there are 7 ways to introduce a variable binding (taking foo as the name of that binding): let foo ... for foo in ... (for loop) foo => ... (match block) if let foo = ... (if block) while let foo = ... (while loop) fn func(foo: ... (function argument) | foo | ... (closure argument) I submitted some documentation improvements . The latter one was especially time-consuming, but it helped me explore the std::path module. It even led me to bump onto a rustdoc bug .","tags":"computing","title":"'Rust week of 2015-05-15'"},{"url":"http://tshepang.net/rust-collect-function-rocks","text":"Here is one way to populate a Vec with some data: let mut vector = Vec :: new (); for n in 0 .. COUNT { vector . push ( n ); }; Alternatively, one can simply do this: let vector = ( 0 .. COUNT ). collect :: < Vec < _ >> () The function is also about twice as fast, according to the following benchmark: #![feature(test)] extern crate test ; static COUNT : i32 = 100 ; #[bench] fn collect ( b : & mut test :: Bencher ) { b . iter ( || { ( 0 .. COUNT ). collect :: < Vec < _ >> () }); } #[bench] fn no_collect ( b : & mut test :: Bencher ) { b . iter ( || { let mut vector = Vec :: new (); for n in ( 0 .. COUNT ) { vector . push ( n ); }; vector }); } Here is the output of cargo bench : test collect ... bench: 164 ns/iter (+/- 7) test no_collect ... bench: 346 ns/iter (+/- 8)","tags":"computing","title":"Rust 'collect' function rocks!"},{"url":"http://tshepang.net/a-visit-to-mozambique","text":"Outside my country, South Africa, I have only been to Botswana, Swaziland, and Lesotho. I recently visited Mozambique, and it feels far more different compared. The most notable thing is that Portuguese dominates far more than English. It was quite hard to find people we (me and a friend ) could ask for help as we navigated its largest city, Maputo. Other issues: There are too many people seeking to take advantage of foreigners, like overpricing much of their shit, and gradually lowering them when faced with protest. I suppose this shitty practice is found everywhere, but it\\'s particularly rife there. At the border post, for example, you\\'d have 3-4 guys trying to score something by offering the service of guiding us through the border (fill this form, queue here for this, etc.), and would ask for something like R100 for that... ridiculous! Perhaps I should not complain given the great poverty the country suffers... only desperate people would behave like that I\\'m guessing. The condition of Maputo, the city we stayed at, is horrific. It looks like a very run-down Durban, and quite large as well. We didn\\'t explore it as much as I would have liked, but it\\'s such pain, given the language barriers, as well as hardly having any street names or markings on buildings. We were in bad need for a guide. Most on the buildings are in a very dilapidated state. A very rough guess is over 80% of them, though you\\'d find something gorgeous here and there. The roads are heavily congested and the drivers very inconsiderate... the worst I\\'ve seen. It\\'s amazing there wasn\\'t a traffic accident we\\'ve witnessed. Anyways, it was mostly not a pleasant city, and so many of the streets were damn dirty. It\\'s fucked-up. The prices of stuff was ridiculous. One particularly egregious example is the price of eggs as we saw in a franchise that also operates in South Africa. A pack of 60 eggs went for M360 (about R120)! That\\'s about twice the price in South Africa. Accommodation was expensive too; the place we got cost about M2200 and that was the cheaper one we could get, but was yet disappointing: We were provided only a single pillow for each of us (separate beds in one room), and it didn\\'t look pleasant for the attendant to get us another. There was just one parking space. That I just don\\'t understand. The bed I was on was uncomfortable. I was discouraged from complaining because it just felt like I was bothering the hosts, and I had already complained about the not-cold water provided in the room. I don\\'t like feeling like a bother. The hot water was rather luke-warm, though it wasn\\'t too much of an issue given the high temperatures of the city. In addition, the pressure of the water was quite low. I didn\\'t like it when one the senior workers asked us not to drink alcohol (in case we were planning to) because he was Muslim, and that it was a Muslim-owned place. Such arrogance! This sort of thing really lessened the enjoyment of the trip there. I felt unwelcome really, and it made me miss my far-more-pleasant South Africa. I am sure there is far less crime there, but South Africa is not particularly scary either (in general). It also has far better and much cheaper places to sleep. We could very well have missed some great lodging places in Mozambique, that Maputo is just a shit place to be, and we should have avoided it, who knows. We didn\\'t do much research on it really, and decided to take a chance. It didn\\'t work out, but I\\'m glad we tried. I would like to go some other time (I hear there\\'s great beaches), but with proper guides, perhaps via a cruise ship. In the end, we just decided to cut our trip short, and went back to South Africa.","tags":"misc","title":"a visit to Mozambique"},{"url":"http://tshepang.net/sherlock-season-3-episode-3","text":"Episode 0 of Season 1, which was remade into Episode 1, got me excited about the series. I loved the villain (superb performance), and it had great humor (Dr. Watson character). None of the later Episodes could match, all but the third (and last) of the third Season. The highlight here is the villain, who ranks as the best in the series (Moriarty is rather overdone). He represents great character development and is given a flawless performance. As a sidenote, of the series regulars, none of the characters was as interesting as that of Sherlock\\'s big brother. It\\'s a superb performance too, the character is such a joy (mature, wise, influential), and he was made all the more interesting to later discover that his intelligence matched that of Sherlock.","tags":"arts","title":"'Sherlock - Season 3 Episode 3'"},{"url":"http://tshepang.net/a-visit-to-lesotho","text":"Maseru is a lot better than I thought: I expected something tiny and poor, but got pleasantly surprised. It it pretty, and there were hardly any potholes. Sure there were untarred roads as you move away from the center, but there were hardly any shacks. I was especially impressed by the parliament building... so majestic, made better by them overlooking the city down below. I feel it\\'s a bit of overkill though... imagine what it cost. Something I noticed is the overly smooth tile surfaces, which is a health hazard. I saw it in 3 separate places: A rather large mall, which is the only one I we saw A fast food shop (where the food was very unimpressive; I\\'ve never in my life been served a burger whose bread was so dry it was hard) A supermarket The quality of service was rather horrible, and worse than any place I\\'ve been to in South Africa. Worst of this was the place we stayed at: On the gate, there was some guy who looked very unexcited about his life. He was just sitting there, his face looking down, and he didn\\'t even give us a look. I guessed he was the security because he had a two-way radio. The reception room was very stuffy... I wonder if the two ladies noticed. I didn\\'t check if the windows were open. It must have been a result of some serious cost-saving. At least our room had that modern convenience. While waiting to check if a room is available, the lady openly asked some other worker to check if the room is clean. I asked what happens if it isn\\'t, and she said she\\'d just send us away. Weird. Not even \\\"I\\'d get it cleaned right away for you, sir\\\" or something like that. We went away to do a city tour and came back late, so it was quite dark. There was no lighting on the path the the room, so one had to tread carefully. It\\'s normal practice for the light switch to be near the door, but not in this case. And it was so dark that we had to ask for assistance, and the light switch was near the bed. They guy that helped us with the light switch seriously needed a bath. He didn\\'t look friendly either. I felt like we were a bother. What wasn\\'t near the bed, though, was a power socket (to keep my laptop charged), so I went out to ask for an extension cord, only to find there isn\\'t any spare... it was used for the washing machine. Yep. I was curious what was on TV, and found horrible reception... no digital channels. There was no remote control either. When I asked, it was simply missing. Also, the price sticker for the TV was still affixed on it... 4,999 (Lesotho currency is valued the same as South African rands). Maybe there wasn\\'t much they could do about this, but there wasn\\'t water in the morning so we could bath and get the fuck out. The receptionist said the issue was in the area. Now, this is maybe the best on: before we could leave, they didn\\'t open the gate for us before first checking the room. My guess is they ensured we didn\\'t steal anything. The receptionist did earlier claim they wanted to check if we didn\\'t leave anything. Maybe that\\'s true :) Maybe that explains the price... the room cost M290 for the night, for both of us. Ridiculous cheap. We thought the price was per person. I wanna check out some other super-cheap places elsewhere to ensure this is the kind of service one should expect. Anyways, we went on to drive towards Hlotse, a town to the West of Maseru. The road was quite good, and the view wonderful (Lesotho is a beautiful country). Still, I didn\\'t see much evidence of ridiculous poverty for the whole 100km drive. It was interesting to see that the traffic cops didn\\'t have cars around. Serious cost-saving there. One last thing, the Lesotho side of the border stamped our passports when leaving, but didn\\'t when we entered. Interesting.","tags":"misc","title":"a visit to Lesotho"},{"url":"http://tshepang.net/what-makes-rust-unique","text":"An interesting expansion of \\\"safety without garbage collection\\\": It\\'s easy to write (a) an unsafe language that has no GC, or (b) a safe language that relies on GC for safety. It\\'s also easy to write a language that is in category (b) but lets you drop down to category (a) in an unsafe dialect. It\\'s a very difficult problem to write a safe language that does not rely on GC, and I know of no other industry language that has done it. Part of a response by a member of Rust core team.","tags":"computing","title":"what makes Rust unique"},{"url":"http://tshepang.net/links-2015-01-16","text":"A well-written article offering tips on being a good 3D artist an epic battle in improving performance of Debian Code Search 24 days of Rust is a nice series of 24 posts related to Rust, each short and concise, which is the way I like it Why your first FizzBuzz implementation may not work a very nice Rust mini-tutorial 151-byte static Linux binary in Rust - interesting experiment","tags":"computing","title":"'links 2015-01-16'"},{"url":"http://tshepang.net/zerofree-rocks","text":"At work, we tend to use the same base image for multiple installations. I would often copy a whole-disk image of a system as a matter of convenience, because that way I only need to dd to the target, without any additional steps. The problem with this approach is that it is slower than taking a tarball of the files (from the source) and extracting them onto the target. That\\'s because it works with a lot more data than it needs. For example, say you have a 4GB disk which is only filled with 1GB data. The first method would mean that processing a useless 3GB of one and zeroes, but my main concern is that the whole-disk doesn\\'t compress well. So here\\'s what I tried after creating a tarball: Simple file removal and extraction ( cd /target && rm -r * && tar xf ~/rootfs.tar ) didn\\'t work Re-formatting the drive ( mkfs.ext4 /dev/mmcblkp1 ) and then extraction didn\\'t work either The issue is that with the 2 steps above, there still remains much data on the partition from previous use. That is, file removal and creating a filesystem doesn\\'t remove the actual data, but rather just makes the data inaccessible by conventional means. To the data compressor ( xz in this case), that is all valid data. What needs to happen is for the data that is not allocated to be over-written with zeroes... enter zerofree which does just that. After it was done, my compressed image shrinked from \\~400MB to \\~80MB. The original was about 2GB.","tags":"computing","title":"'zerofree rocks!'"},{"url":"http://tshepang.net/impressed-by-the-ease-of-creating-upstart-jobs","text":"At work, we run our systems on Ubuntu, which so far means the init system is Upstart. I needed to have one binary to start when the system boots, and because I\\'m horrified by sysvinit scripts (which Upstart supports), I decided to give creating an Upstart job a try. I was surprised how easy it was: exec /usr/local/bin/executable start on startup respawn I placed a file with above contents in /etc/init/executable.conf , and that\\'s pretty much it. Impressive. Here\\'s what happens: exec instructs Upstart what executable to run start on is an instruction on when to start the service respawn means the service should re-start if ever it dies for some reason One convenient thing that\\'s happening is that stdout output of the service gets re-directed to a log file, in this case /var/log/upstart/executable.log . Cool stuff. I found help from Getting Started and the Cookbook .","tags":"computing","title":"impressed by the ease of creating Upstart jobs"},{"url":"http://tshepang.net/links-2014-10-07","text":"A nice article on the need for people with different roles in a single project: manager and craftsman A nice article on revamping psutil API psutil; it\\'s a Python library that provides easy and cross-platform process control A thorough (and satisfying) article on why Go rocks, as compared to Python... perhaps the best I\\'ve read SteamOS is based on Debian 7 \\\"wheezy\\\" ; a Debian win Debian Developers and Maintainers are given gratis access to play Valve games; another Debian win","tags":"computing","title":"'links 2014-10-07'"},{"url":"http://tshepang.net/project-of-note-debian-lts","text":"One of the complaints about Debian stable releases is that they reach End Of Life too early (\\~3 years). This can result in some people choosing commercially-backed alternatives like Ubuntu and Red Hat, for they don\\'t want to be bothered to have to upgrade that frequently (not everyone cares for the latest things, and it\\'s not always practical to do OS upgrades). That\\'s why the Debian LTS (Long Term Support) project , which extends the life of a stable release to 5 years, excites me. It\\'s also super-nice that contributing to it financially is made damn easy, thanks to Freexian, a company run by a great Debian Developer, Raphaël Hertzog . The project is now a few months old, and has achieved moderate success ( latest status report ).","tags":"computing","title":"'project of note: Debian LTS'"},{"url":"http://tshepang.net/fighting-for-work","text":"Here\\'s a story of two siblings, one a 10-year-old girl and the other a 6-year-old boy. They also happen to be my relatives (kids of my cousin), and are very fond of me. The 10-year-old was just about to cut my hair, but being impatient, I asked the younger one to do it, just so there\\'s progress by the time the older finishes doing whatever she was doing. Little did I know hell\\'s about to break loose. As the older one asked the younger one to hand over the machine, he refused, and an argument ensued. None of the two were relenting, even with my repeated pleading: \\\"Please let your brother do the cutting, and you can do the finishing touches\\\" \\\"Please let your sister do the cutting, and you\\'ll get a chance next time\\\" \\\"Please share the task\\\" It was a weird moment, seeing people actually fight for what looks to me like unrewarding work... a chore. There was even tears from the brother, who was very hurt, even mentioning how unfair it is, citing facts like how the sister always gets to cut my hair, and mentioning other benefits she gets that he doesn\\'t, specifically the fact that I tend to ride far with her on my bike (I don\\'t have a helmet small enough for the boy). He even hurled abuse to the sister in anger, \\\"you are fat\\\", which wasn\\'t taken lightly. Being immature, they each would have had the work not go on than allow the other to proceed. This went on for several minutes, and as I proved ineffective in having any progress, asked their older (15-year-old) sister to do the job, but she also sees a chore, so she wasn\\'t very interested. She did intervene though, and was rather effective, even though she sided more with the 10-year-old, citing experience... \\\"what do you know about cutting hair\\\". The 6-year-old eventually relented. Perhaps I\\'m pushing it... have you ever seen kids this young cut hair? But I was thinking Why The Fuck Not! Anyways, this whole exercise was weird as fuck and so unbelievable. It\\'s an interesting display of sibling rivalry, and these two do have constant conflicts. I just didn\\'t think they\\'d also fight over who gets to do work. It was also the most impassioned and long-drawn I remember seeing between them. Luckily it wasn\\'t violent, even though one tried to forcefully take the machine from the other.","tags":"misc","title":"fighting for work"},{"url":"http://tshepang.net/more-kudos-for-pyramid","text":"I\\'m not sure if there is any one Python web framework as well-respected. The great Mike Beyers (SQLAlchemy) also gave his respects some months ago.","tags":"computing","title":"more kudos for Pyramid"},{"url":"http://tshepang.net/loving-the-ssh-multi-hop-feature-of-emacs","text":"I\\'m at home and want to access some system at work. I cannot access this system directly, so will have to use a VPN or sshfs, but I don\\'t know how to set VPN up and sshfs feels rather clunky (I first have to have some directory I\\'m going to mount the thing, and have to remember the command line syntax). With Emacs, I run the following command: C-x C-f /ssh:work|ssh:10.0.0.107|ssh:10.0.0.148:~/some/files/ What happens there is I ask Emacs to run find-file , which opens its file manager, Dired . It first accesses the server at work, then my work desktop ( 10.0.0.107 ), and then some machine ( 10.0.0.148 ) which I normally access via my work desktop (it got SSH keys). Finally, I\\'m then presented with the view of the files in ~/some/files/ in that machine, which I can work on (view, edit, save) like any local file. I was surprised such a feature exists, thinking I\\'d have to do ugly things like port forwarding. I do use the single hop a lot (if that\\'s even the right name): C-x C-f /ssh:work:~/some/files/ Shortcut for that is: C-x C-f /work:~/some/files/ sidenotes : The shortcut doesn\\'t work with multi-hop I love the fact that Emacs accepts SSH settings, where for example, instead of specifying the whole username@host , it accepts the aliases in ~/.ssh/config , such that I only have to run: ssh work instead of: ssh tshepang@hostname","tags":"computing","title":"'loving the SSH multi-hop feature of Emacs'"},{"url":"http://tshepang.net/trying-to-understand-stack-memory","text":"Python is a language that is so high level that concepts like stack and heap memory are hidden from its users. Not so with lower-level languages like C. Following examples are implemented in Rust, which is easier to use than C: ::: {.sourcecode} rust fn main() { let a = 0i8; let b = 0i8; let c = 0i8; println!(\\\"{:p}\\\", &a); println!(\\\"{:p}\\\", &b); println!(\\\"{:p}\\\", &c); } ::: We build and run it like this: $ rustc main.rs && ./main 0x7fff0c8d16d7 0x7fff0c8d16d6 0x7fff0c8d16d5 In our code, the three variables are each given 1 byte of memory ( i8 means 8-bit integer). The addresses are given in reverse order. An explanation I heard is so that the heap grows the opposite direction to the stack, which helps separate things nicely. I suppose this would be for performance reasons and/or simpler memory management code. If we use larger types, we\\'ll see each value taking more than just one address: ::: {.sourcecode} rust fn main() { let a = 0i16; let b = 0i16; let c = 0i16; println!(\\\"{:p}\\\", &a); println!(\\\"{:p}\\\", &b); println!(\\\"{:p}\\\", &c); } ::: Output: $ rustc main.rs && ./main 0x7fff2462aed6 0x7fff2462aed4 0x7fff2462aed2 In this case, each of the variables take 2 addresses ( i16 means 16-bit integer). Using i32 results in each taking 4 addresses: $ rustc main.rs && ./main 0x7ffff7706024 0x7ffff7706020 0x7ffff770601c And then, finally, i64 results in each variable taking 8 addresses (64 bits) of space: $ rustc main.rs && ./main 0x7fffd27383b0 0x7fffd27383a8 0x7fffd27383a0","tags":"computing","title":"trying to understand stack memory"},{"url":"http://tshepang.net/discovering-python-decorators","text":"There is a project at work where I needed to do the same action on various functions. It\\'s basically a checkpoint system where I\\'d write some state to a file, but only when all the functionality in the given functions executed successfully. It was a one-line change but I thought it was a good excuse to create decorators for the first time in my life. Here is an example of a decorator function: def checkpoint(function): wrapper(*args, **kwargs): with open(PATH) as f: for line in f: if function.__name__ in line: return value = function(*args, **kwargs) with open(PATH, 'a+') as f: f.write(function.__name__) return value return wrapper All it does is write some text to a file, and avoid running whatever function will be decorated by it if there is a match in that file. This would be an indicator that the function had already been executed (in a previous run). The following snippet sees the use of this decorator: @checkpoint def do_this(some_argument): # exit(1) on error ... @checkpoint def do_that(some_other_argument, some_optional_argument=None): # exit(1) on error ... if __name__ == '__main__': do_this('some value') do_that('some other value') Without the decorator syntax, the same functionality would be achieved with: def do_this(some_argument): # exit(1) on error ... do_this = checkpoint(do_this) def do_that(some_other_argument, some_optional_argument=None): # exit(1) on error ... do_that = checkpoint(do_that) if __name__ == '__main__': do_this('some value') do_that('some other value') The latter format, though it presents less of a cognitive burden, feels less of an obvious solution, and it\\'s a bit uglier as well. PEP 380 is a detailed discussion written over 10 years ago when the syntax was first added to the language.","tags":"computing","title":"'discovering Python \\@decorators'"},{"url":"http://tshepang.net/links-2014-06-04","text":"[An excellent description on why Anarchy is the best possible society ever imagined] Great write-up on Gittip Exploration of an interesting concept... [a balance between resentment and guilt] \\\" Why we should give free money to everyone \\\" - a highly-detailed read, which supports this dream of mine [An excellent description on why Anarchy is the best possible society ever imagined]: http://loupgaroublond.blogspot.com/2008/12/open-source-and-anarchism.html?showComment=1229842200000#c4468517513122259751","tags":"misc","title":"'links 2014-06-04'"},{"url":"http://tshepang.net/a-better-python","text":"This post led me to an interesting paper titled An Empirical Investigation into Programming Language Syntax . Now, since I\\'m a Python sucker, here is what I would change in Python in order to follow advice from that paper : before after ------ ----- != not= % mod string text try-except check-error finally always raise alert def procedure print output import use int/float number The most surprising finding is that both programmers and non-programmers found while and for not intuitive for looping constructs. The preferred alternatives are repeat and loop . Of these, I prefer loop , but it does not read as well as while : while count < 3: count = action() loop count < 3: count = action() Quorum, the language by those responsible for this paper, went with: repeat while (count < 3) count = action() end To mimic that in Python, any of the following two sound fine (I prefer if to while ; less syntax is better): repeat if count < 3: count = action() loop if count < 3: count = action() That means an infinite loop would be: loop if True: action() Or for that special case, a shortcut can just be this simple: loop : action () I wonder what cycling through items in a container would look like. In Python, it looks like: for item in container: action(item) This feels as natural as anything, but then again I been doing Python for a number of years, so the bias could be heavy. Following is an attempt: loop in range(3): action() It mimics this Python syntax, which I actually don\\'t like, since we don\\'t always need the items of the container: for _ in range(3): action() Quorum, the academic language mentioned above, does it like: repeat 3 times action() end I don\\'t like that either; feels contrived. The Python way strikes me as a good compromise, especially given how general it is. I will try again with the loop syntax: loop item in container: action(item) You have to admit it doesn\\'t read as nice as: for item in container: action(item) It should be flexible to accommodate more than just one value on each iteration, so should have an equivalent for this Python code: for index, item in enumerate(container): action(index, item) Here goes: loop index, item in enumerate(container): action(index, item) Now, for the much-loved Python list comprehensions: [procedure(item) for item in container] We would instead have: [procedure(item) loop item in container] So, apart from being highly-rated for being intuitive, loop also provides a consistent looping construct, whereas Python has 2, while and for , both of which received low points in the study. Interesting. If someone (me?) were to implement these changes to Python, the result would not be named a Python variant (they are just too drastic), but more a Python descendent... a better Python .","tags":"computing","title":"a better Python"},{"url":"http://tshepang.net/south-africa-will-continue-to-function","text":"Encouraging: Despite Zuma, the country will continue to function - because the ANC does not do everything wrong, because South Africa has a strong, self-confident, heterogenous civil society as well as a sovereign, independent legal system, a vocal media landscape, and a solid, diversified economy. — South Africa Postpones Radical Change - on 2014 Elections This slightly reduces my fears of great social instability since it does not look like the next 5 years will be better than the last 5. It could even be worse, given we are said to be among the most unequal countries in terms of individual wealth . There is no predicting the future, but it does not look to me there is much hope, short of some miracles. That the landscape of political power is practically left unchanged is worrying.","tags":"misc","title":"South Africa 'will continue to function'"},{"url":"http://tshepang.net/sony-vaio-pro-13-svp13212sgbi","text":"On 2014-02-13 I went to collect the laptop from these guys , which I paid around R12500 (\\~\\$1200) for. It\\'s a 4GB RAM, 128GB SSD, FHD model. I would have happily paid for more RAM and storage, but this seems the only model available in my home country. I am glad that it\\'s also not a touch screen... I don\\'t need the reflection. Anyways, there was much pain involved trying to get it to work. I struggled to get Debian booting, and I don\\'t know what I did wrong because after a few attempts of trying this and that, things worked. And man, that SSD is fast: it takes 6-7 seconds to GUI login screen. Package installation is also insane fast. There was much pain trying to get audio to work. Luckily I got some help , where I needed to change two lines in `/usr/share/alsa/alsa.conf`: defaults.ctl.card 1 defaults.pcm.card 1 VLC video didn\\'t work well either, but I needed only change Video Output to OpenGL GLX video output (XCB) , and all was well. Performance I am now going to check how this machine compares to these others . Specs: $ uname --all Linux thome 3 .12-1-amd64 #1 SMP Debian 3.12.9-1 (2014-02-01) x86_64 GNU/Linux $ cat /proc/cpuinfo | sed --quiet '5p' model name : Intel ( R ) Core ( TM ) i5-4200U CPU @ 1 .60GHz CPython build (changeset b6a1a78818fe ): $ make distclean ; time ( ./configure && make --silent --jobs = 4 ) [ ... ] real 1m52.372s user 3m12.460s sys 0m6.764s CPython test suite: $ time ./python -m test --multiprocess = 0 [ ... ] real 3m34.582s user 5m12.260s sys 0m20.640s Linux kernel build (commit 6e4664525b1d ): $ make distclean && make defconfig && time make [ ... ] real 11m57.220s user 11m1.544s sys 0m38.260s So the machine still doesn\\'t compare with my work machine, a \\~2 year-old desktop. It is faster than my old laptop as expected, and comparable to the DigitalOcean VPS, no surprises there. The storage is a lot faster though... I\\'ve seen sustained read speeds of \\~500MB/s. Issues The corners of the laptop are rather sharp, making it a little uncomfortable to handle. The power button is not so easy to press, and offers very little \\'feedback\\'... it has very shallow movement. Luckily there should not be a frequent need to use it, but there are times when something is buggy enough to cause OS hangs and other misbehaviour. The fan is too quick to kick in, and easily gets noisy. Running the following commands does not help, at least not in a way I could notice: echo silent | sudo tee /sys/devices/platform/sony-laptop/thermal_control I don\\'t know why this happens, given that I have never seen the temperature rise above 60 °C: $ sensors acpitz-virtual-0 Adapter: Virtual device temp1: +48.0°C ( crit = +97.0°C ) coretemp-isa-0000 Adapter: ISA adapter Physical id 0 : +48.0°C ( high = +100.0°C, crit = +100.0°C ) Core 0 : +46.0°C ( high = +100.0°C, crit = +100.0°C ) Core 1 : +45.0°C ( high = +100.0°C, crit = +100.0°C ) The screen brightness control is painful. It requires one to press the combination of the Fn key and F5 (dim) and F6 (brighten), which is fine. But one cannot just hold the two latter keys, but has to repeatedly press them to reach the desired result. That would not be such a big problem, except that it takes such a long time to get there... more than 50 presses from the two extremes! I still haven\\'t got used to Pg Up/Dn and Home/End being accessible only via the Fn key. It\\'s so awkward. The touchpad is a great pleasure to use, except when pressing and dragging. It\\'s a hit-and-miss affair... you have to press quite hard, and that makes precise control challenging. The flexibility of the body results in keyboard marks on the screen. The worst problem, however, is the flexibility of at the bottom of the touchpad. Too often the touchpad fails to respond because I\\'ve put the thing at the wrong angle... I mostly use my laptop in bed.","tags":"computing","title":"'Sony Vaio Pro 13 (SVP13212SGBI)'"},{"url":"http://tshepang.net/pipe-dream-basic-income-for-south-african-adults","text":"There are too many people suffering from poverty in South Africa, and the quickest way to eliminate it is to provide income for all adult citizens (18+). If each of these 30 million individuals earned R500/week (\\$1 is about R10), that would cost R780 billion. Compare that to the R900 billion that SARS expects to make in 2013/2014 tax year. Sources of funding We will gain R140 billion by stopping the following: social grants (R120 billion) RDP (R10 billion) NSFAS (R5 billion) NSNP (R5 billion) We will gain an additional R450 billion by doubling the following: Income tax (R300 billion) Company Income Tax (R150 billion) After all that, we are left with a shortfall of R190 billion. Where does it come from? Settling for R375 per week makes the problem go away Settling for R280 per week means Company Income Tax need not be doubled, to avoid companies running away from the country. But that\\'s now lower than Old Age Grant, so we\\'ll stop there as the worst compromise. Why R500 This gets a person with a dependent: a room to live in, with access to running water and electricity transport and cellphone costs groceries","tags":"misc","title":"'pipe dream: Basic Income for South African adults'"},{"url":"http://tshepang.net/links-2014-03-20","text":"developing for Debian can be ugly, and [here are some excellent suggestions] [interesting idea on automated collection of Linux kernel (in)stability issues] Btrfs is unfortunately still not ready for production nice explanation of Linux kernel file monitoring technologies excellent post on Stack Overflow infrastructure [interesting idea on automated collection of Linux kernel (in)stability issues]: https://lkml.org/lkml/2013/11/7/95","tags":"computing","title":"'links 2014-03-20'"},{"url":"http://tshepang.net/project-of-note-debian-installer","text":"I\\'ve looked at pretty installers like that of Ubuntu and Fedora, and they are all very easy and slick. But whenever I install Debian, I don\\'t really see how much harder it is to use, though it\\'s a lot uglier. Anyways, what triggered this post is the following tit-bit: d-i [Debian Installer] is the very first thing many of our users see, and has a huge range of uses, from simple desktop installs to massive corporate deployments; it\\'s unspeakably important that it works well, and it\\'s a testament to its design that it\\'s been able to trundle along without actually very much serious refactoring for the best part of five years now. -- an interview of Colin Watson In addition, this tool (or rather, a set of tools) also happens to be rock-solid, and its great reliability and ease-of-use gets admiration from me on each install... I\\'ve done dozens, with not one instance of data loss.","tags":"computing","title":"'project of note: Debian Installer'"},{"url":"http://tshepang.net/where-i-live-on-the-web","text":"I spend perhaps too much of my time online, and these are among the greatest culprits: Debian : planet Debian , debian-devel Python : planet Python , python-dev , GitHub misc : Stack Exchange","tags":"misc","title":"where I live on the web"},{"url":"http://tshepang.net/top-tracks-hugh-masekela","text":"Although he made a lot of trash, Hugh Masekela remains one of the great South African artists. After all we judge artists based on their best works right? We are nice folk. 2 masterpieces Ha Lese Le Di Khanna ( Still Grazing - 2004) Stimela ( Hope - 1993) 3 excellent works Grazing In the Grass ( Still Grazing - 2004) Bajabula Bonke ( Still Grazing - 2004) Yei Baa Gbe Wolo ( Introducing Hedzoleh Soundz - 1973) There are separate posts where I celebrate his two albums, Introducing Hedzoleh Soundz and Still Grazing .","tags":"arts","title":"'top tracks: Hugh Masekela'"},{"url":"http://tshepang.net/top-tracks-house","text":"A list needing a lot of love landmarks Kutakatum : I grew up with, and prefer, the slower version found in Summer Rawkus (DJ\\'s At Work), as opposed to the original Love is the Answer masterpieces Love Revolution (Mysterious Revolution) All Night Long (Mood II Swing) excellent A Summer Song (Be My Friend) New Day (The Return) Pasilda (Afro Medusa) Summer Daze (Nick Holder)","tags":"arts","title":"'top tracks: House'"},{"url":"http://tshepang.net/developer-of-note-brett-cannon","text":"A core CPython developer , Dr. Brett Cannon is among the key people pushing Python 3 forward, examples being: He once developed a site that displayed progress of support by major Python projects. He repeatedly gives talks on the topic. Most recently, he has developed [a tool that checks which dependencies of a project lack Python 3 support]. It\\'s weird that a tool like this is only available now, over 5 years since Python 3.0 was released. In addition to that: He keeps improving the Python import system , which is reportedly a complex beast. I am grateful that [he championed the move from Subversion to Mercurial for CPython development]. I held back participating in CPython development until this move was complete... Subversion is that painful to use. He created Python Developer's Guide , a great guide for those wishing to help out with core CPython development. Personally, he inspired me to take a serious look at Gittip , resulting in my participation. There\\'s a lot more stuff he been doing for Python. Busy, busy guy. [a tool that checks which dependencies of a project lack Python 3 support]: https://github.com/brettcannon/caniusepython3 [he championed the move from Subversion to Mercurial for CPython development]: http://sayspy.blogspot.ca/2009/03/why-python-is-switching-to-mercurial.html","tags":"computing","title":"'developer of note: Brett Cannon'"},{"url":"http://tshepang.net/the-two-versions-of-water-no-get-enemy","text":"The first version of this song was released in 1975 as part of the album, Expensive Shit . It's among the best works of Fela Kuti , himself the best musician in history . It also has the special significance of being a great favorite of a great friend of mine . Now what compelled to write this post is the version made by one son of Fela Kuti, Femi Kuti. It was released in his not-so-good 2004 album, Africa Shine . I enjoy it more, perhaps because I've listened to way too much of the original, resulting in it feeling a lot more fresh. It has a faster pace, while being half as long (5 min). I love the lyrical performance, the most distinctive thing about it as compared to the original. I am sometimes tempted to call the whole thing superior, which would not be accurate.","tags":"arts","title":"the two versions of 'Water No Get Enemy'"},{"url":"http://tshepang.net/got-my-eyes-fixed","text":"On 2014-02-12 I had LASIK operation done to fix my being short-sighted. It cost over R30k (\\~\\$3000), but was worth it: I hate the inconvenience of spectacles, and the doctor claims I have better than 20/20 vision.","tags":"misc","title":"got my eyes fixed"},{"url":"http://tshepang.net/my-current-desktop-setup","text":"Following is how my GUI environment is set-up on my home machine (a laptop) and work machine (a desktop). For the (libre) tools I frequently use, see this post instead. With recent Debian GNOME updates (late 2013), something got broken enough that I could not login to my account. I saw this as a good opportunity to finally try something other than GNOME as my primary environment. I have before tinkered with other GUI environments (XFCE, KDE 3, FluxBox, LXDE, and most recently, Window Maker), but none lasted very long. But I think this time I will actually abandon GNOME permanently, after nearly a decade of use. I been playing with dwm for the past several weeks, and the experience has convinced me to stay. I am attracted to the philosophy of minimalism, though I find they do take things a bit far in requiring users to tinker with C source code in order to configure it. Luckily it\\'s not hard, and there\\'s examples out there. It just takes a while since there isn\\'t a comprehensive guide I could find. For my login manager, I use LightDM . I added this line to its configuration, in [SeatDefaults] section: greeter-hide-users=false It removes the need to manually enter my username each time I want to login. Reason I\\'m not using GDM? I wanted something light, which also wouldn\\'t pull in dozens of packages that I won\\'t use. For example: $ sudo apt-get install --no-install-recommends gdm3 Reading package lists... Done Building dependency tree Reading state information... Done The following extra packages will be installed: bluez dconf-cli evolution-data-server evolution-data-server-common gir1.2-accountsservice-1.0 gir1.2-caribou-1.0 gir1.2-gck-1 gir1.2-gcr-3 gir1.2-gdesktopenums-3.0 gir1.2-gdm3 gir1.2-gkbd-3.0 gir1.2-gmenu-3.0 gir1.2-gnomebluetooth-1.0 gir1.2-gnomedesktop-3.0 gir1.2-ibus-1.0 gir1.2-mutter-3.0 gir1.2-nmgtk-1.0 gir1.2-polkit-1.0 gir1.2-soup-2.4 gir1.2-telepathyglib-0.12 gir1.2-telepathylogger-0.2 gir1.2-xkl-1.0 gjs gnome-bluetooth gnome-settings-daemon gnome-shell gnome-shell-common gnome-themes-standard gnome-themes-standard-data libbluetooth3 libcamel-1.2-43 libcaribou-common libcaribou0 libebackend-1.2-6 libebook-1.2-14 libebook-contacts-1.2-0 libecal-1.2-15 libedata-book-1.2-17 libedata-cal-1.2-20 libedataserver-1.2-17 libgdata-common libgdata13 libgdm1 libgnome-menu-3-0 libgoa-1.0-0 libgoa-1.0-common libgweather-3-3 libgweather-common libibus-1.0-5 libical0 libmission-control-plugins0 libmutter0b liboauth0 libopenobex1 libpackagekit-glib2-16 libpulse-mainloop-glib0 librest-0.7-0 libsoup-gnome2.4-1 libtelepathy-glib0 libtelepathy-logger3 libwacom-common libwacom2 mutter-common obex-data-server obexd-client telepathy-mission-control-5 Suggested packages: evolution evolution-data-server-dbg gnome-orca gnome-user-share telepathy-haze Recommended packages: zenity gvfs-backends gnome-control-center pulseaudio gkbd-capplet gnome-contacts gnome-user-guide gtk2-engines-pixbuf gnome-accessibility-themes packagekit The following NEW packages will be installed: bluez dconf-cli evolution-data-server evolution-data-server-common gdm3 gir1.2-accountsservice-1.0 gir1.2-caribou-1.0 gir1.2-gck-1 gir1.2-gcr-3 gir1.2-gdesktopenums-3.0 gir1.2-gdm3 gir1.2-gkbd-3.0 gir1.2-gmenu-3.0 gir1.2-gnomebluetooth-1.0 gir1.2-gnomedesktop-3.0 gir1.2-ibus-1.0 gir1.2-mutter-3.0 gir1.2-nmgtk-1.0 gir1.2-polkit-1.0 gir1.2-soup-2.4 gir1.2-telepathyglib-0.12 gir1.2-telepathylogger-0.2 gir1.2-xkl-1.0 gjs gnome-bluetooth gnome-settings-daemon gnome-shell gnome-shell-common gnome-themes-standard gnome-themes-standard-data libbluetooth3 libcamel-1.2-43 libcaribou-common libcaribou0 libebackend-1.2-6 libebook-1.2-14 libebook-contacts-1.2-0 libecal-1.2-15 libedata-book-1.2-17 libedata-cal-1.2-20 libedataserver-1.2-17 libgdata-common libgdata13 libgdm1 libgnome-menu-3-0 libgoa-1.0-0 libgoa-1.0-common libgweather-3-3 libgweather-common libibus-1.0-5 libical0 libmission-control-plugins0 libmutter0b liboauth0 libopenobex1 libpackagekit-glib2-16 libpulse-mainloop-glib0 librest-0.7-0 libsoup-gnome2.4-1 libtelepathy-glib0 libtelepathy-logger3 libwacom-common libwacom2 mutter-common obex-data-server obexd-client telepathy-mission-control-5 0 upgraded, 67 newly installed, 0 to remove and 45 not upgraded. Need to get 0 B/31.0 MB of archives. After this operation, 90 .8 MB of additional disk space will be used. GNOME philosophy tends towards tight integration, leading to things being not as modular as I would like: how could a display manager end up depending on a Contacts tool, or the Bluetooth stack. It may be just how it was built in Debian, but that also means there were build options that allowed such tight coupling in the first place. GDM has served me well for years, but I\\'m not interested in all those tools it brings with. Anyways, enough with that. I added a custom .desktop file which will become selectable on LightDM UI: $ cat / usr / share / xsessions / custom . desktop [ Desktop Entry ] Name = Custom Exec =/ etc / X11 / Xsession Type = XSession On selecting the entry labeled Custom that appears on LightDM, and logging in, the following will get executed ( \\~/.xsession ): ``` {.sourceCode .sh} apps xfce4-terminal --hide-menubar --tab --tab --tab & firefox & nautilus --no-desktop & nm-applet & trayer --edge top --align right --widthtype request --distance 15 & quodlibet & if [ $HOSTNAME == 'twork' ]; then icedove & fi settings xset b off xmodmap -e \"clear Lock\" xmodmap -e \"keycode 66 = Super_L\" host-specific settings if [ $HOSTNAME == 'twork' ]; then xrandr --output VGA-0 --output DVI-0 --right-of VGA-0 else synclient TapButton1=1 TapButton2=3 TapButton3=2 MaxDoubleTapTime=100 syndaemon -dti 1 fi clock while true; do datetime=$( date +\"%F %R\" ) if acpi -a | grep off-line > /dev/null; then battery=$( python -c \"print(\\\"$(acpi)\\\".split(',')[1].strip())\" ) xsetroot -name \"$battery\"\" | \"\"$datetime\" else xsetroot -name \"$datetime\" fi sleep 1m done & exec dwm ``` Finally, this is what my dwm config changes look like ( config.def.h ): diff --git a/config.def.h b/config.def.h index 77ff358..78af5d6 100644 --- a/config.def.h +++ b/config.def.h @@ -14,12 +14,15 @@ static const Bool showbar = True; /* False means no bar */ static const Bool topbar = True; /* False means bottom bar */ /* tagging */ -static const char *tags[] = { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" }; +static const char *tags[] = { \"web\", \"files\", \"terminal\", \"misc\" }; static const Rule rules[] = { - /* class instance title tags mask isfloating monitor */ - { \"Gimp\", NULL, NULL, 0, True, -1 }, - { \"Firefox\", NULL, NULL, 1 << 8, False, -1 }, + /* class instance title tags mask isfloating monitor */ + { \"Iceweasel\", NULL, NULL, 1 << 0, False, -1 }, + { \"trayer\", NULL, NULL, 1 << 0, False, -1 }, + { \"Nautilus\", NULL, NULL, 1 << 1, False, -1 }, + { \"Xfce4-terminal\", NULL, NULL, 1 << 2, False, -1 }, + { \"Quodlibet\", NULL, NULL, 1 << 3, False, -1 }, }; /* layout(s) */ @@ -35,7 +38,7 @@ static const Layout layouts[] = { }; /* key definitions */ -#define MODKEY Mod1Mask +#define MODKEY Mod4Mask #define TAGKEYS(KEY,TAG) \\ { MODKEY, KEY, view, {.ui = 1 << TAG} }, \\ { MODKEY|ControlMask, KEY, toggleview, {.ui = 1 << TAG} }, \\ @@ -47,7 +50,7 @@ static const Layout layouts[] = { /* commands */ static const char *dmenucmd[] = { \"dmenu_run\", \"-fn\", font, \"-nb\", normbgcolor, \"-nf\", normfgcolor, \"-sb\", selbgcolor, \"-sf\", selfgcolor, NULL }; -static const char *termcmd[] = { \"uxterm\", NULL }; +static const char *termcmd[] = { \"xfce4-terminal\", \"--hide-menubar\" }; static Key keys[] = { /* modifier key function argument */ Note that this diff is against the Debian package (version 6.0-6 ). I could not change the modifier key with the upstream version of dwm. You will notice that I\\'m still using one major GNOME package, Nautilus, the file browser. It remains my favorite .","tags":"computing","title":"my current desktop setup"},{"url":"http://tshepang.net/top-music-videos","text":"These are the best music videos I\\'ve seen yet (with a disclaimer that the list is largely unmaintained). Excellence in the track concerned contributes to the magnificence of its video... I\\'m a fan of nearly all the corresponding tracks: Next Movement (The Roots) The odd positions that our stars take and the overall beauty of it makes it an eternal favourite of mine, not to mention fact that the track is among my hip-hop favourites. The simplicity of the video contributes and so is the fact it remains entertaining despite that it\\'s shot in just one room, which is the kind of inventiveness I admire in art. That Thing (Lauryn Hill) Flawlessly merges the views of two eras on one screen. Got Till It\\'s Gone (Janet Jackson) Great direction and cinematography as well as the casting makes this an eternal masterpiece. Stranger in Moscow (Michael Jackson; Director - Nick Brandt) Among the best camerawork and editing with magnificent slow-motion scenes.. towards perfection. The Sixth Sense (Common) Excellently capturing an unexplained event which looks like some sort of chaos, causing looks of despair and wonder among the characters concerned, some catching it on tv, some near the event... powerful. Everything is Everything (Lauryn Hill) Great VFX showcasing NYC as a turntable are hard to beat. Hey Mama (Black Eyed Peas) About as energetic as music videos get, it has great dance sequences and is very well-made, except the editing is just too frantic. There are a few highlights, but none beats the bridge section... nice use of retro visuals and more delicious dancing. Respiration (Mos Def & Talib Kweli feat. Common) Beautiful images of them great rappers strutting their style enhanced shot by the black and style camerawork with some wonderful busy city images. Ebumnandini (Doc Shebeleza) Few videos were aver able to capture the township party scene with such energy and believability. The cinematography is quite good too. Who We Be (DMX) I usually like DMX\\'s music videos because of their craftsmanship and the messages they portray -- staying away from the annoying booty-shows that so many successful other rappers employ. This one is armed with some excellent editing, some good visual effects, and some real-life footage all put in the mix. Love of My Life (Erykah Badu) Erykah Badu\\'s performance, as is the case in her videos, draws one\\'s attention, despite a huge anti-climactic slow-down in the middle of the song. All \\'n my Grill (Missy Elliot) This could have been higher in the ratings had its mighty New York settings -- with the dark lighting and that famous yellow-taxi scenery -- not been interrupted by the boring dancing that Missy likes so much in her videos. Feel It Boy (Beenie Man ft. Janet Jackson; Dir: Dave Meyers) Gorgeous, mellow, and digitally-manipulated environment which offers rare warmth. It boasts perhaps the largest collection of gorgeous gals of any music video I\\'ve seen. Jackson doesn\\'t look comfortable though, with unnatural poses.","tags":"arts","title":"top music videos"},{"url":"http://tshepang.net/the-one-i-revere-most-after-losing-madiba","text":"As far as I can remember, there was not a single living individual I respected more than I did Madiba. That would explain the fact of my weeping on the morning I heard of his death, which is something I never did for any single individual. For some time now, I actually asked myself which of his many deeds lead to such reverence, and I don\\'t really know. I do strongly suspect though that it\\'s the key role he played in ending government-sanctioned racism against non-Caucasians in South Africa. Being a Black citizen of that country, this is something that affected me personally, and something I will eternally be grateful for. In addition to that, this man is also not just a hero (being a freedom fighter), but also a saint (promoting reconciliation with the oppressors). It\\'s not only that, but also the fact that he is constantly hailed as an icon of peace. For a number of times, I would ask myself if there was anyone alive who garners greater respect, and the only person who came close is the current Dalai Lama , but I must admit I don\\'t know much about him, beyond his winning a Nobel Peace Prize. Another candidate is Desmond Tutu , who frequently speaks against injustice, and also happens to be a winner of that most prestigious of awards. There is one other candidate, Noam Chomsky , whose intellect and activism I deeply respect. Watching and listening to some of his political work some time in 2012 led me to consider him the most valuable person alive. His influence is likely smaller than that of the above-mentioned candidates, but being the world\\'s foremost Anarchist is quite something, especially given that it\\'s the most attractive of all political theories I\\'ve yet encountered. So, with a disclaimer that I am largely ignorant of world events, Noam Chomsky takes the place of Nelson Mandela as the living individual I admire the most .","tags":"misc","title":"'the one I revere most, after losing Madiba'"},{"url":"http://tshepang.net/still-grazing-2004","text":"My favorites from this, the best album by Hugh Masekela: track 2 - Ha Lese Le Di Khanna A remake of a track from Masekela\\'s 1993 album, Hope . It\\'s far superior to both the original and the second remake, found in the 2001 compilation, Grazing in the Grass: The Best of Hugh Masekela . It\\'s a masterpiece! I am tempted to call it the best of this musician. track 6 - Grazing In the Grass It\\'s perhaps not fair to place this old classic here since, if it was remade, doesn\\'t sound any different from its form when it was first released in track 5 - Bajabula Bonke (The Healing Song) Hugh Masekela must have really loved doing the vocals on this one. One could feel the passion. The song sadly doesn\\'t end too well... the last minute or so is anti-climactic. track 7 - Gold Not a very typical song, more like an experiment. Also quite sad... it\\'s about economical exploitation. The only let-down of a track in the whole 11 track album is the 10th, Been Such A Long Time Gone . You wonder how it slipped in there. The 11th track, Stimela (Coal Train) , is not the best version of this beloved song. It\\'s of mere decent quality. To be fair, it\\'s also not the worst.","tags":"arts","title":"'Still Grazing (2004)'"},{"url":"http://tshepang.net/pleasantly-surprised-by-replace-string-emacs","text":"If you want to replace some string in Emacs, the primary function to use is replace-string (I think). If the strings, \\'old\\' and \\'new\\' are provided, it will, by default, replace all occurrences, regardless of case, while also preserving case of whatever \\'old\\' was. It\\'s magical yes, but who doesn\\'t like some magic once in a while, especially when it\\'s so convenient... and so sane. ( official description )","tags":"computing","title":"'pleasantly surprised by replace-string (Emacs)'"},{"url":"http://tshepang.net/links-2013-11-18","text":"an impressively modest computing (and living) setup - this is probably the most respected of Debian Developers a nice explanation of why a specific Creative Commons license isn\\'t suitable for Debian ( source ) since it\\'s hard to trust any one of the major brand valuators , I will have to rely on an aggregator on the limitations of Planet Python nice paramiko tutorial","tags":"computing","title":"'links 2013-11-18'"},{"url":"http://tshepang.net/hierarchy-of-individuals-in-floss-projects","text":"From top to bottom: Author Sometimes referred to as primary author, to distinguish between other people who have contributed to the project, this is the creator. At times, someone in the lower ranks of the hierarchy happen to be more active in the project than the Author, in which case the Author often makes them Maintainer, explicitly or not. Maintainer This is someone ultimately responsible for the project: handles bug reports, decides which changes to accept from lower contributors, and performs releases. Note that there can be more than one, unlike is the case with Author. Contributor This is someone who submits improvements to project, either documentation or code. It can be a one-time contribution, but in case where this is frequent and spans a certain amount of time, she can move onto becoming a Maintainer. Bug Reporter This is someone who suggests improvements to the project. Depending on the project, any of these are used: a mailing list, an IRC channel, a social networking service, email, or a dedicated Issue/Bug tracking system can be used. User What the user is depends on the project, of course. Just to be clear, in the case of Python project, the user is a software developer, not the person who ends up using something written in the language. The \\'individual\\' in title means I\\'m ignoring non-human entities, like companies. I\\'m also ignoring non-core activities, like marketers or sysadmins, or even teachers. Those are not going to be easy to fit in this simple story, and are not common to that many FLOSS (Free/Libre and Open Source) projects. In the case of wajig , I am the Maintainer and Graham Williams is the Author. In the case of paramiko , a far more important project, Jeff Forcier is the Maintainer . The project was however created by Robey Pointer , and he did not imagine it would end up being THE Python SSH library today.","tags":"computing","title":"hierarchy of individuals in FLOSS projects"},{"url":"http://tshepang.net/introducing-hedzoleh-soundz-1973","text":"Several months ago, I bumped onto this jazz album by Hugh Masekela . It sounds quite different to his more popular tracks, and although it has a South African feel to it (Masekela is a citizen of that country), the more dominating feel is from elsewhere in Africa (just don\\'t ask me where). My favorites: track 3: Adade track 4: Yei Baa Gbe Wolo track 6: When track 7: Nye Tamo Ame track 8: Rekpete","tags":"arts","title":"'Introducing Hedzoleh Soundz (1973)'"},{"url":"http://tshepang.net/a-bit-of-benchmarking","text":"I was curious how my home machine performs compared to my work machine. Each of these have 4 logical processors (and 8GB of RAM), so are sort of comparable. I also added the DigitalOcean VPS with those specs ( currently \\$80 per month ) because... why not. Machine Specs Each machine runs Debian testing (codename \\\"jessie\\\"). Following is the output of these commands for each machine: uname --all cat /proc/cpuinfo | sed --quiet '5p' Home machine: Linux thome 3.11-trunk-amd64 #1 SMP Debian 3.11-1~exp1 (2013-09-12) x86_64 GNU/Linux model name : Intel(R) Core(TM) i5-2410M CPU @ 2.30GHz Work machine: Linux twork 3.10-3-amd64 #1 SMP Debian 3.10.11-1 (2013-09-10) x86_64 GNU/Linux model name : AMD Phenom(tm) II X4 970 Processor DigitalOcean VPS: Linux tcloud 3.11-1-amd64 #1 SMP Debian 3.11.5-1 (2013-10-17) x86_64 GNU/Linux model name : QEMU Virtual CPU version 1.0 CPython benchmarks I ran two benchmarks, both from the latest VCS version of CPython, development branch: $ hg identify --id --branch b6a1a78818fe default Build Here\\'s the command I used: make distclean; time (./configure && make --silent --jobs=4) Results Home machine: real 2m11.687s user 3m18.104s sys 0m9.964s Work machine: real 2m2.707s user 2m24.200s sys 0m12.280s VPS: real 2m30.931s user 3m7.272s sys 0m16.592s Test suite Here\\'s the command I used: time ./python -m test --multiprocess=0 --multiprocess=0 means that there will be 6 tests run in parallel; that is the number logical cores (4 in my case) + 2 (to avoid waiting too long for tests which are largely idle) Results Home machine: real 3m42.571s user 7m13.124s sys 0m33.320s Work machine: real 2m29.957s user 4m9.052s sys 0m27.364s VPS: real 2m19.174s user 5m5.444s sys 0m40.008s Linux kernel build Just for kicks, I decided to check how long building Linux would take; for this, I used latest \\'final\\' release from Linus\\' git tree: $ git log -1 commit 6e4664525b1db28f8c4e1130957f70a94c19213e Author: Linus Torvalds <torvalds@linux-foundation.org> Date: Mon Sep 2 13 :46:10 2013 -0700 Linux 3 .11 Here\\'s the commands I used: make distclean && make defconfig && time make Results Home machine: real 6m11.622s user 21m2.664s sys 1m15.324s Work machine: real 2m40.275s user 8m55.624s sys 0m42.860s VPS: real 3m41.240s user 12m21.120s sys 1m17.844s Conclusion My work machine is faster than the DigitalOcean offering of comparable specs, and much faster than my home machine, a laptop. ( detailed explanation of the output )","tags":"computing","title":"a bit of benchmarking"},{"url":"http://tshepang.net/projects-with-excellent-documentation","text":"Here is a list of projects whose documentation I found to be highly-detailed and well-written. big The introductory tutorial of GNU Emacs (looks a lot better when run from within Emacs), is written in a very gentle and careful way; it\\'s among the best tutorials I\\'ve seen. Same applies to [the Emacs manual], which I\\'m tempted to call the best I\\'ve read yet. It really, really goes into painstaking detail, and seems to have been written by professional technical writers. CPython - this is quite massive, so although quality is generally high, it varies depending on where you are; [an example of excellence] sqlite3 - quite extensive, especially for an embeddable DBMS small Suds - multiple, well-written examples rdiff-backup usage examples - much smaller than the others listed here, but nevertheless deserves mention because it\\'s both gentle and thorough While working on giving a product of ours at work the ability to speak SocketCAN , I really appreciated its [official documentation]. It is very well-written and thorough (though it assumes prior knowledge of working with Linux sockets).","tags":"computing","title":"projects with excellent documentation"},{"url":"http://tshepang.net/project-of-note-git-cola","text":"I use git-cola mostly when I want to commit various hunks separately; it makes that task real easy. I was impressed by its equivalent functionality for the git --amend option the first time I saw it. If you click on the Amend Last Commit radio button, it actually displays the commit message of that previous commit. I was surprised to see it, especially since on clicking that option, I quickly ran to the command-line to copy that commit message, only to see the message waiting for me, ready to be edited away. Another feature I really like is that if you attempt to commit something without staging it first, instead of just complaining, if offers to stage and commit all in one click. Nice. These functionalities are real simple, but they really make for a pleasant user experience. Pity I haven\\'t seen a tool as easy to use in the land of Mercurial. There, I use the command-line hg record which isn\\'t as pleasant.","tags":"computing","title":"'project of note: git-cola'"},{"url":"http://tshepang.net/easing-switching-between-git-and-mercurial","text":"Each chance I get, I use Mercurial (e.g. personal stuff), and use Git when I don\\'t have much of a choice (e.g. FLOSS and work). That is, I use both quite a lot, and too often I find myself running commands for one while on another\\'s repository... error. I therefore decided to ease the pain my creating a script which checks which VCS system I\\'m on, and displays the relevant command. Some examples of usage: ``` {.sourceCode .sh} $ cd $ ./vcs.py --log hg log --no-merges --patch --stat --verbose $ cd $ ./vcs.py --log git log --no-merges --patch --stat Here are the relevant BASH aliases: ``` {.sourceCode .sh} alias vb='$(~/scripts/vcs.py --branch)' alias vd='$(~/scripts/vcs.py --diff)' alias vl='$(~/scripts/vcs.py --log)' alias vp='$(~/scripts/vcs.py --push)' alias vs='$(~/scripts/vcs.py --status)' alias vu='$(~/scripts/vcs.py --pull)' alias vc='$(~/scripts/vcs.py --commit)' alias vo='$(~/scripts/vcs.py --checkout)' alias vr='$(~/scripts/vcs.py --revert)' This makes my life so much easier, since I no longer have to care which VCS I\\'m on, at least for the most common of commands. I am pleased with self. As a sidenote, if you want to cycle between the changesets (Mercurial term) or Commits (Git term), use the following search term on your pager (tested with less , which is Debian/Ubuntu default pager): (&#94;changeset)|(&#94;commit)","tags":"computing","title":"easing switching between Git and Mercurial"},{"url":"http://tshepang.net/developer-of-note-armin-rigo","text":"Co-founder and lead developer of arguably the most exciting project in the Python ecosystem, PyPy . He is also credited with doing the bulk of the work in building its legendary RPython translation framework . What inspired this post (originally published 2013-03-31) is the incredible honor given by the great Raymond Hettinger in one of his PyCon US 2013 talks , where he deems him \\\"probably the smartest person I have ever met\\\". Given that there isn\\'t a shortage of brilliance in the Python community, that\\'s some serious kudos. Also, here is what one of speakers at that conferences said: ... Armin Rigo is awesome - he\\'s perhaps the only incredibly intelligent person involved with programming I\\'ve met who seemed genuinely happy about life (and not grumpy at all). -- source","tags":"computing","title":"'developer of note: Armin Rigo'"},{"url":"http://tshepang.net/my-first-debian-upload","text":"Output of my first ever upload to Debian (using dput ): Trying to upload package to ftp-master (ftp.upload.debian.org) Checking signature on .changes gpg: Signature made Sun 13 Oct 2013 09:21:35 SAST using RSA key ID 500BF4A2 gpg: Good signature from \"Tshepang Lekhonkhobe <tshepang@gmail.com>\" Good signature on ../wajig_2.10_amd64.changes. Checking signature on .dsc gpg: Signature made Sun 13 Oct 2013 09:21:31 SAST using RSA key ID 500BF4A2 gpg: Good signature from \"Tshepang Lekhonkhobe <tshepang@gmail.com>\" Good signature on ../wajig_2.10.dsc. Uploading to ftp-master (via ftp to ftp.upload.debian.org): Uploading wajig_2.10.dsc: done. Uploading wajig_2.10.tar.gz: done. Uploading wajig_2.10_all.deb: done. Uploading wajig_2.10_amd64.changes: done. Successfully uploaded packages. ( the package was accepted within 30 minutes ) And, yeah, that means I am now Debian Maintainer . Other than giving me more freedom, this helps reduce the workload on Dirk Eddelbuettel , who has been uploading wajig for several years now. He even became an Advocate for my application . This process started several weeks ago when a Debian Developer named Tristan Seligmann signed my key (before applying to be a Maintainer, a Debian Developer needs to sign your key as a way of verifying your identity).","tags":"computing","title":"my first Debian upload"},{"url":"http://tshepang.net/links-2013-10-12","text":"nice artwork ( via ) They\\'re Made out of Meat - nice sci-fi humor How to Advertise on a Porn Website - interesting, with decent humor How to Frustrate Your Train Driver - delicious humor I have, for a long time, considered NYC the greatest city on the planet, which is actually quite vague. This article fixes that for me... the most important city in the world .","tags":"misc","title":"'links 2013-10-12'"},{"url":"http://tshepang.net/my-first-server","text":"The closest I ever came to needing own server is for hosting my blog , but I\\'ve had plenty of gratis services available to me, latest being GitHub Pages . When DigitalOcean offered a \\$10 credit (enough to buy two months of the most basic offering... 1 CPU core, 0.5GB RAM, 20GB storage), I thought why not. As for the experience, I was quite impressed by the performance. It\\'s no wonder why the service receives so much praise from all over the place; it\\'s quite a lot for that ridiculous \\$5 fee. I\\'ve never experienced storage this fast... my laptop has a hard-drive and the SSD on my work machine is unimpressive. The CPU also appears powerful, though I haven\\'t stressed it yet. I\\'ve spent the last few hours setting it up, after which I created a snapshot, which is something to restore from in case of trouble. I even destroyed and re-created it, just to make sure it works. This was the second-worst experience playing with this service... it\\'s so damn slow! And by that, I mean destroying a Droplet (their name for the VM) takes well over a minute, same as re-creating it. Maybe I\\'m being too demanding, maybe it can\\'t be helped, especially given the price, but it\\'s still slow as fuck. What about the worst experience? It\\'s the Console Access, which allows for recovery in case of issues. It was painful to use since it\\'s so slow, and kept inserting wrong characters in place of the username. It also tends to fail with the message: Failed to establish a connection to the console. Please reload. It\\'s not a big issue anyways, since this will be a rarely-used feature. And no, I still don\\'t know yet what I\\'ll use this for. Maybe I\\'ll host my blog there, moving it from the GitHub service. Regardless, it\\'s nice to have a machine accesible from anywhere on the web.","tags":"computing","title":"my first server"},{"url":"http://tshepang.net/links-2013-10-04","text":"a nicely summarised survey of fresh Debian contributors excellent response to an unpleasant reply - [I admire Michael Biebl], but don\\'t remember him be this harsh I enjoyed watching Skyfield and 15 Years of Bad APIs , a far more interesting talk than the earlier API Design for Library Authors . The former covers API design only in its 2nd half, and the latter is exclusively all API talk. The former is also more polished than the latter, both in terms of video editing, and how presentable the presentation is. great kudos for (the great) Guido van Rossum Falsehoods Programmers Believe About Names - interesting","tags":"computing","title":"'links 2013-10-04'"},{"url":"http://tshepang.net/from-pelican-to-liquidluck","text":"notes : This post was first published on 2012-07-05 , which is shortly after I started using liquidluck . I have since moved back to Pelican on 2013-09-29 , with [Elegant theme]. Reason: slow liquidluck development ([the author is busy with other projects]), though he has more recently been doing [some large changes in a branch], which I assume is not ready. There is also a backlog of doc improvements I submitted, which are not even acknowledged. Do not consider this a complaint... the author in fact gave me more than I gave him... a nice piece of software. In fact, I might go back at some point, and will keep maintaining [live demos of the various liquidluck themes]. Also, my movie blog is also still built with liquidluck. I have a separate post on [what I love about static website generators]. why Pelican rocks It has categories ( unlike nikola ) Post metadata: if Date is not specified, file mtime is used (unlike blogofile ) if Category is not specified, parent directory name is used (unlike blogofile) titles are allowed to have any character (unlike blogofile) there is an option to provide clean urls... remove trailing .html Does not force one into having ugly date-based filesystem structure (unlike Tinkerer ) why Pelican rocks not The default theme simply didn\\'t fit my tastes, and the other themes weren\\'t so satisfactory . I spent way too long fiddling with them, and just couldn\\'t be happy. why liquidluck So I have moved to liquidluck , and am hoping I will not be \\'forced\\' to move again. It\\'s way too much work, and it took multiple messages between me and the developer of this sleek new static site generator just to get it to behave the way I like it. I had to override stuff that\\'s done by the software, by using this script , which helped give it the advantages that Pelican has over the other generators I mentioned, while also solving the one problem Pelican has.. lack of a good-enough theme. This was achieved with the help of that very helpful and responsive developer. issues There is no visible way, at least for the default theme, to subscribe to RSS feeds of individual Categories. The text is a bit blurry/faint with the default theme, and none of the other ones are close to good-enough for my liking, all but the promising one named responsive . It got 2 issues so far (see live demo ): Date is displayed at the bottom of a post... why make user scroll that far before presenting such a key piece of info. There is no link anywhere allowing to visit Home. Background color for <code> text is too unusual, and results in an ugly look. It does not fit with the general general theme, so should be grey really, which would match with that of <pre> text. I fixed it myself with the following patch: diff --git a/liquidluck/_themes/default/static/style.css b/liquidluck/_themes/default/static/style.css index e90de80..94fa7e8 100644 --- a/liquidluck/_themes/default/static/style.css +++ b/liquidluck/_themes/default/static/style.css @@ -112,7 +112,7 @@ pre { border-radius: 3px; } code, tt { - background-color: #fee9cc; + background-color: #eee; color: rgba(0, 0, 0, 0.75); padding: 1px 3px; font-size: 12px;","tags":"misc","title":"from Pelican to liquidluck"},{"url":"http://tshepang.net/blogging-with-pelican","text":"notes : I have a separate post on [what I love about static website generators]. This post was first published on 2012-05-20 , which is before [I started using liquidluck], a competing tool. And then I moved back 2013-09-29 due to development inactivity of liquidluck. Pelican is a static blog generator; it converts marked-up text files to html (Pelican supports Markdown and reStructuredText ). The resulting site is complete with an index (Archives view), Tags, Categories, and Pages (for non-bloggy stuff like a CV or About Me file). As for my blog, its tree structure looks like this ( repo ): build/... pages/about-me.rst posts/{arts/, computing/, misc/} CNAME fabfile.py new-post.py README.rst settings.py The build directory is where the output of the build process is stored. The pages directory is for any content that isn\\'t blog posts. The posts directory is where the large chunk of content lives, the blog posts themselves. Each of the four directories in there represent a Category, for example: if you place some file in arts/ , the post will be marked as falling under arts Category. I host my blog on GitHub, using a service the call GitHub Pages. CNAME is a file required by that service in the case where I want to use a domain other than tshepang.github.io . It\\'s content is tshepang.net . fabfile.py contains the build instructions, all for convenience so that I only need to run 2 commands, one for the build, and another for GitHub upload. However, I mostly just run one command that does both. The settings.py file contains Pelican configuration. It should be somewhat mostly self-explanatory, but for those things that aren\\'t so obvious, do consult the documentation. README.rst has some basic instructions, as well as repository license. Now as for the post itself, you need metadata to go with it. This is stuff like title, date, and tags. It can be tedious to create all such mundate stuff, especially the date. That\\'s why I wrote a script that generates that file and populates it with the given metadata: $ python new-post.py 'my blogging setup' misc --tags blogging This is the metadata, and also the beginning of the file: my blogging setup ================= :date: 2012-04-12 :tags: blogging The script also opens the file in my favorite editor, so I can start adding content. When I\\'m done with the changes, I ensure I\\'m in the root directory of my blog, commit ( hg commit --message 'new post' ) and run: $ fab That\\'s a fabric command that uses the instructions found in fabfile.py . It builds the site, and then pushes it to GitHub Pages. It also pushes the sources to Bitbucket. Within a minute, the blog will be updated.","tags":"misc","title":"blogging with Pelican"},{"url":"http://tshepang.net/favorite-buildings","text":"Burj Khalifa : tallest building on earth beautiful, iconic design Petronas Towers : third tallest buildings on earth stunning design Willis Tower (was Sears Tower) long-time tallest building (a wonder of my teenage years, and beyond) icon of Chicago skyline The WTC Twin Towers would be here if they were still standing. At the time of their destruction, I admired them more than any other buildings on the planet. Together with the Statue of Liberty, they were to me the greatest structures in all of New York City, and perhaps the United States.","tags":"misc","title":"favorite buildings"},{"url":"http://tshepang.net/favorite-pelican-themes","text":"I don\\'t like the default Pelican theme, notmyidea : It is decent, but the post metadata feels cramped where its placed. The is no visible link to tags, never-mind a tag cloud (which is handy). I just don\\'t like the general look. So, I had a look at the others: Elegant This the least static-like of all themes I\\'ve seen yet which makes it the most innovative. The search feature, which sets it apart from its competitors, got me excited. It has some issues though ( to be fixed at some point ): ignores Twitter setting RSS feeds are supported, but the icons aren\\'t made visible It\\'s also not the prettiest of themes, but it will have to do, at least for now. gum I was impressed enough that I was strongly considering settling for this one, despite the following issues: no Tags on individual Posts no Categories on individual Posts it doesn\\'t display bullets ! monospace [ win ] simple and elegant design [ win ] displays pages as a list, all but the newest one in the view [ win ] me loving the Archives view Categories are not shown in a prominent place (e.g. menu bar) no Tags on individual Posts no Categories on individual Posts ignores Twitter setting Post titles are capitalised (minor issue) Just Read [ win ] elegant and simple design ( my favorite of all ) [ win ] displays pages as a list, all but the newest one in the view Categories are 2nd-class citizens: they aren\\'t shown on the index page bullets are done wrong: the bullet-ed text is not indented on post view, there is no distinction between Tags and Categories too much border space on code snippets ( pre tag?) background for code snippets is not distinctive [tuxlite_tbs] [ win ] clean and simple design: nice menu-bar and sidebars tags aren\\'t shown along-aside posts Mockingbird [ win ] very nice and clean design date on Archives looks like shit background for code snippets is not distinctive Categories only visible on individual Posts ignores Twitter setting does not support Disqus neat [ win ] the look is different; it feels calm Archives view is not ideal, though it\\'s not in a prominent location Categories are not shown in a prominent place (e.g. on menu bar) when custom fields are not specified, they are handled in a naive manner: ![naive handling of unspecified custom fields] Chunk [ win ] a trendy look oversized text, especially blog title background for code snippets is not distinctive Archives look like shit ignores Twitter setting Bootstrap 2 [ win ] the Menu bar is unbeatable the general look is too busy: the Categories and Tags on the right must go who wants snippets on posts showing Category and Tag on main views separate tag cloud page missing line length too long","tags":"misc","title":"favorite Pelican themes"},{"url":"http://tshepang.net/project-of-note-valgrind","text":"I have, since using Valgrind (and reading a bit of its documentation) some years ago, developed much respect for it. It is quite an advanced tool, and though its primary use is detecting memory leaks, I am here going to explore its other functionality... calculating the cost of each line of code in the CPU. This is useful when tuning programs for performance. Following is example code; it accepts 2 arguments, a filename and text that will be written to that file: ``` {.sourceCode .c} include include include include include int main (int argc, char **argv) { char path[0xFF]; char content[0xFF]; int fd; ssize_t written; if ( argc < 3 ) { fprintf (stderr, \" usage : % s < filename > < content > \\ n \", argv [ 0 ] ); return 1; } strcpy (path, argv [ 1 ] ); sprintf (content, \" % s \\ n \", argv [ 2 ] ); fd = creat (path, S_IRWXU); if (fd == -1) { fprintf (stderr, \" open error : % s ( '%s' ) \\ n \", strerror (errno), path); return 1; } written = write (fd, content, strlen (content)); if (written == -1) { fprintf (stderr, \" write error : % s ( '%s' ) \\ n \" , strerror ( errno ), path ); return 1 ; } return 0 ; } ``` Build command (using GCC 4.8.1): gcc -Wall -pedantic -g play.c -o play System details: $ uname -- all Linux thome 3.11 - trunk - amd64 # 1 SMP Debian 3.11 - 1 ~ exp1 ( 2013 - 09 - 12 ) x86_64 GNU / Linux $ sudo lshw - class processor *- cpu description : CPU product : Intel ( R ) Core ( TM ) i5 - 2410 M CPU @ 2.30 GHz vendor : Intel Corp . physical id : 4 bus info : cpu @0 version : Intel ( R ) Core ( TM ) i5 - 2410 M CPU @ 2.30 GHz serial : To Be Filled By O . E . M . slot : CPU 1 size : 2300 MHz capacity : 4 GHz width : 64 bits clock : 100 MHz capabilities : x86 - 64 fpu fpu_exception wp vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer xsave avx lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid aes cpufreq configuration : cores = 2 enabledcores = 1 threads = 2 Running the resulting binary with Callgrind : $ valgrind --tool = callgrind --callgrind-out-file = out ./play filename filecontent == 5308 == Callgrind, a call-graph generating cache profiler == 5308 == Copyright ( C ) 2002 -2012, and GNU GPL 'd, by Josef Weidendorfer et al. ==5308== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info ==5308== Command: ./play filename filecontent ==5308== ==5308== For interactive control, run ' callgrind_control -h ' . == 5308 == == 5308 == Events : Ir == 5308 == Collected : 107520 == 5308 == == 5308 == I refs: 107 ,520 $ cat filename filecontent And finally, seeing closely the cost of each function call, where Ir stands for Instruction cache reads , which you can read as number of CPU instructions . I have used tree=calling option so that I can see the cost of all operations called by a parent (marked with a * ) : $ callgrind_annotate --tree = calling out play.c -------------------------------------------------------------------------------- Profile data file 'out' ( creator: callgrind-3.8.1 ) -------------------------------------------------------------------------------- I1 cache: D1 cache: LL cache: Timerange: Basic block 0 - 22326 Trigger: Program termination Profiled target: ./play filename filecontent ( PID 5308 , part 1 ) Events recorded: Ir Events shown: Ir Event sort order: Ir Thresholds: 99 Include dirs: User annotated: play.c Auto-annotation: off -------------------------------------------------------------------------------- Ir -------------------------------------------------------------------------------- 107 ,520 PROGRAM TOTALS -------------------------------------------------------------------------------- Ir file:function -------------------------------------------------------------------------------- 24 ,113 * /build/eglibc-TepTGA/eglibc-2.17/elf/dl-lookup.c:do_lookup_x [ /lib/x86_64-linux-gnu/ld-2.17.so ] 1 ,053 > /build/eglibc-TepTGA/eglibc-2.17/elf/dl-misc.c:_dl_name_match_p ( 25x ) [ /lib/x86_64-linux-gnu/ld-2.17.so ] 13 ,423 > /build/eglibc-TepTGA/eglibc-2.17/elf/dl-lookup.c:check_match.9345 ( 88x ) [ /lib/x86_64-linux-gnu/ld-2.17.so ] 18 ,264 * /build/eglibc-TepTGA/eglibc-2.17/elf/dl-lookup.c:_dl_lookup_symbol_x [ /lib/x86_64-linux-gnu/ld-2.17.so ] 38 ,589 > /build/eglibc-TepTGA/eglibc-2.17/elf/dl-lookup.c:do_lookup_x ( 94x ) [ /lib/x86_64-linux-gnu/ld-2.17.so ] 15 ,836 * /build/eglibc-TepTGA/eglibc-2.17/elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object 13 > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/memmove.c:memcpy@GLIBC_2.2.5 ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] 81 > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/strcmp.S:strcasecmp ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] 6 > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/strcmp.S:strncasecmp ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] 7 > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/memset.S:memset ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] 51 ,501 > /build/eglibc-TepTGA/eglibc-2.17/elf/dl-lookup.c:_dl_lookup_symbol_x ( 86x ) [ /lib/x86_64-linux-gnu/ld-2.17.so ] 18 > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/../memcpy.S:memcpy ( 1x ) [ /lib/x86_64-linux-gnu/ld-2.17.so ] 67 > /build/eglibc-TepTGA/eglibc-2.17/time/../sysdeps/unix/sysv/linux/x86_64/time.c:time ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] 67 > /build/eglibc-TepTGA/eglibc-2.17/time/../sysdeps/unix/sysv/linux/x86_64/gettimeofday.c:gettimeofday ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] 6 > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/strnlen.S:strnlen ( 1x ) [ /lib/x86_64-linux-gnu/libc-2.17.so ] [ snip ; to be continued ] I have trimmed the output to bring focus to the most interesting output of all, which is the total cost for each line of my code: [continued] -------------------------------------------------------------------------------- -- User-annotated source: play.c -------------------------------------------------------------------------------- Ir . #include <string.h> . #include <errno.h> . #include <stdio.h> . #include <fcntl.h> . #include <unistd.h> . . int . main (int argc, char **argv) 5 { . char path[0xFF]; . char content[0xFF]; . int fd; . ssize_t written; . 2 if (argc < 3) { . fprintf (stderr, \"usage: %s <filename> <content>\\n\", argv[0]); . return 1; . } . 7 strcpy (path, argv[1]); 21 = > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/strcpy-sse2-unaligned.S:__strcpy_sse2_unaligned (1x) 799 = > /build/eglibc-TepTGA/eglibc-2.17/elf/../sysdeps/x86_64/dl-trampoline.S:_dl_runtime_resolve (1x) 8 sprintf (content, \"%s\\n\", argv[2]); 1,188 = > /build/eglibc-TepTGA/eglibc-2.17/stdio-common/sprintf.c:sprintf (1x) 805 = > /build/eglibc-TepTGA/eglibc-2.17/elf/../sysdeps/x86_64/dl-trampoline.S:_dl_runtime_resolve (1x) . 5 fd = creat (path, S_IRWXU); 766 = > /build/eglibc-TepTGA/eglibc-2.17/elf/../sysdeps/x86_64/dl-trampoline.S:_dl_runtime_resolve (1x) 7 = > /build/eglibc-TepTGA/eglibc-2.17/io/../sysdeps/unix/syscall-template.S:creat (1x) 2 if (fd = = -1) { . fprintf (stderr, \"open error: %s ('%s')\\n\", strerror (errno), path); . return 1; . } . 10 written = write (fd, content, strlen (content)); 7 = > /build/eglibc-TepTGA/eglibc-2.17/io/../sysdeps/unix/syscall-template.S:write (1x) 14 = > /build/eglibc-TepTGA/eglibc-2.17/string/../sysdeps/x86_64/multiarch/strlen-sse2-pminub.S:__strlen_sse2_pminub (1x) 1,567 = > /build/eglibc-TepTGA/eglibc-2.17/elf/../sysdeps/x86_64/dl-trampoline.S:_dl_runtime_resolve (2x) 2 if (written = = -1) { . fprintf (stderr, \"write error: %s ('%s')\\n\", strerror (errno), path); . return 1; . } 1 return 0; 2 } -------------------------------------------------------------------------------- Ir -------------------------------------------------------------------------------- 0 percentage of events annotated As an aside, note that the indentation is messed up a bit. --- Since I normally work at too high a level to care about CPU instructions cycles at this detail, I found the exercise eye-opening.","tags":"computing","title":"'project of note: Valgrind'"},{"url":"http://tshepang.net/person-of-interest-season-2-episode-16","text":"I am a big fan of the series, Person of Interest . There is much to celebrate, among which is the wonderful portrayal of the brilliant creator of the machine that (illegally) looks for patterns in society so as to predict, with high certainty, which people will be involved in violent crimes, either as victims or perpetrators. The series\\' normal formula is that our heroic, bespectacled hero would mention the details of the new person, and his very capable sidekick, a former assassin, would go follow this person, to try avert the impending crime. In the 16th episode of the 2nd season, however, this formula isn\\'t followed (by the camera). Instead we follow the person who would be victim, and our heroes only appear midway through, like they were secondary characters. It\\'s beautiful. I love it when such breaks from normal routine occur, especially when they are as well-made. Not to say this is the best episode of this series so far (I can think of a few which were superior), nor was this the first time such a break from normal routine occur (there were some in the earlier episodes of the season), but it felt fresh enough to be worth a mention in this blog of mine. What added to the excitement is that it was the first time in the series that a so-called Relevant 1 crime prevention was showed. This means relevant to (U.S.) national security. This is as opposed to the sort solved by our heroes, which only involve civil cases. ↩","tags":"arts","title":"'Person of Interest - Season 2 Episode 16'"},{"url":"http://tshepang.net/mentioning-alternatives-on-a-prominent-place","text":"It\\'s an honorable thing to mention alternative and/or competing technologies on a project website. It\\'s even more interesting when this is done on a promiment page. Here\\'s a few of those who do it: Linux Target Image Builder (LTIB) Liferea vnStat LinkChecker (linked from main page) Gittip (project README file) vcs (a top-level section in the official documentation)","tags":"computing","title":"mentioning alternatives on a prominent place"},{"url":"http://tshepang.net/packaging-my-first-qt-app","text":"Someone asked me to try get some KDE package into Debian. I estimated that it would take me around 10 hours to get it into good enough shape before asking some Debian Developer to upload it for me. Here goes some rough estimates: hour 1 : Find documentation on the subject; I got a few after a quick search, which include the following: Ubuntu Packaging Guide Debian Packaging Tutorial (from Debian package, packaging-tutorial ) hour 2-3 : Reading the Debian Packaging Tutorial which led me to reading dpkg-source manpage, using dh_make to create a debian/ skeleton, and modifying the contents of that directory. hour 4-6 : Struggling to kill the lintian complaint, binary-without-manpage . I went as far as reading the source code (Perl) that performs the check, but that didn\\'t help much. I could have saved hours by looking at the Debian New Maintainers\\' Guide earlier. I also added export LDFLAGS=-Wl,-z,relro to debian/rules file to kill hardening-no-relro lintian warning. hour 7-8 : Determine what dependencies would be needed by building from a clean chroot (pbuilder). This was with the help of Debian New Maintainers\\' Guide, again. hour 9-10 : Reading Debian wiki page on Hardening let me simplify my packaging further... removing the need to specify hardening flags explicitly ( commit ). I also uploaded the package to http://mentors.debian.net , with the help of DebianMentorsFaq . ( 2014.03 update : it has since been removed due to lack of activity) The resulting package now lives at https://bitbucket.org/tshepang/ksig/src . The changes I made, the actual packaging work, are in this directory .","tags":"computing","title":"packaging my first Qt app"},{"url":"http://tshepang.net/letta-mbulu-vs-miriam-makeba","text":"I\\'ve been wondering for years which of these two music legends is superior. Miriam Makeba : 3 masterpieces ( Gauteng ; A Luta Continua ; Welela ) 5 excellent works ( Mam Ndiyalila ; Meet Me At the River ; Goodbye Poverty ; Jolinkomo ; Olili ) Letta Mbulu : 1 landmark ( Jikijela ) 3 masterpieces ( Not Yet Uhuru ; Nomathemba ; Zimkile ) 6 excellent works ( Music In the Air ; Ndi-Phendule ; Buza ; I Need Your Love ; Maru a pula ; Kube ) My simple rating system gives Makeba 11 points and Mbuli gets a 15. That\\'s a scary number since it would mean she\\'s superior to Salif Keita ! This I should revisit. [ sidenote ] Oh, and I\\'m sure there\\'s a lot of Miriam\\'s work that I haven\\'t trawled through. Either that or Miriam Makeba is, though excellent, is overrated, since I suspect she becomes a common answer to the question \\\"who\\'s the greatest female South African musician?\\\". That\\'s the answer that I also once had until I savoured much of Letta Mbulu\\'s work and walked away amazed.","tags":"arts","title":"'Letta Mbulu vs. Miriam Makeba'"},{"url":"http://tshepang.net/links-2013-08-09","text":"some of the challenges of maintaining a popular FLOSS project ( via ) great summary of current status of Gittip what it would take to build a general purpose search engine lots of impressive activity around Libreoffice How A Web Design Goes Straight To Hell - nice humor","tags":"computing","title":"'links 2013-08-09'"},{"url":"http://tshepang.net/project-of-note-sphinx","text":"Sphinx is a tool that is used to generate documentation from reStructuredText (rST) markup language, and is mainly used in the Python ecosystem. I honor it much for it is a really powerful system, and I have come to appreciate it a lot recently, with my work on documentation of software that falls under the Pylons project. It is a pity that the markup is not as simple as that of the more popular Markdown , but maybe that was out of necessity, since it is far more advanced: it was initially built as a replacement for the tools that build CPython documentation, which is quite extensive and needs lots of rails. As an example of that power, have a look at these changes I made for [pyramid_tutorials]. In that commit, the feature I used allows you to include code snippets directly from files, instead of doing the copy-paste dance, avoiding duplication and rot. This feature is known as literalinclude . Another feature I recently worked with in the recent past is [intersphinx_mapping]. It allows one to generate references in rST as if those reference were local. For example, if you wanted to generate a link to the CPython open() built-in function, you would need only specify it as :func:open . This is as opposed to finding the actual link and specifying it normally. One other feature I discovered (but haven\\'t used yet) is Info field lists feature. To see it in action, visit this link , and then look at its markup . It\\'s gorgeous!","tags":"computing","title":"'project of note: Sphinx'"},{"url":"http://tshepang.net/challenges-facing-python-from-other-languages","text":"The following four points were made in this article : JavaScript has become a fairly big competitor in the desktop and server spaces, and particularly in mobile. Lua is increasingly used as an embeddable extension language Go\\'s concurrency and ability to create easily deployable binaries that you can just drop on a system and run. R\\'s statistical and graphic abilities","tags":"computing","title":"challenges facing Python from other languages"},{"url":"http://tshepang.net/links-2013-07-17","text":"why Python 3 my first Bitbucket follower Open Products is an excellent essay by the admirable Chad Whitacre, Gittip founder impressive Libreoffice clean-up work Money and Open Source - an insightful opinion piece","tags":"computing","title":"'links 2013-07-17'"},{"url":"http://tshepang.net/links-2013-07-09","text":"I was surprised to find that most sex workers enjoy their trade ; it\\'s a refreshing perspective, but as made clear by the post itself, there isn\\'t sufficient scientific research to confirm it. Consensus failure looks like worthy criticism of consensus decision-making in large groups. great explanation of the concept of Confirmation Bias ([honorable mention]) great advice on which Charities to give to whoever said anything involving bowel humor can\\'t be beautiful is wrong; here is proof","tags":"misc","title":"'links 2013-07-09'"},{"url":"http://tshepang.net/links-2013-06-01","text":"a detailed look at the shortcomings of GitHub Pull Requests workflow it is sad seeing projects using Git, instead of Mercurial; it\\'s sadder still seeing them move from Mercurial to Git ; I am scared that my favorite VCS is becoming less and less relevant Using Sphinx to Write Technical Books - nice guide HTML history intro to computer video","tags":"computing","title":"'links 2013-06-01'"},{"url":"http://tshepang.net/top-sites","text":"atheist writing : Pharyngula Linux-related news : LWN rationality : Less Wrong software development : Stack Overflow HTML5 : diveintohtml5","tags":"misc","title":"top sites"},{"url":"http://tshepang.net/god-of-war-trilogy","text":"The last time I played any of the 3 games from the God of War trilogy was nearly 2 years ago, but the experience still lives vividly in my mind; they offered among the greatest gaming experiences I ever had. I haven\\'t played any of the other 4 games in the series. I have known about the first game for years, before playing it, and it was among the top of my wishlist. The appeal was simply the imagery of the angry lead character (Kratos), the giants he was portrayed to battle, the setting (ancient Greek mythology), as well as the title. When I finally managed to get my hands on the games (about 2 years ago), they did not disappoint. The epic feel of it all, the character design (the best ever that covers ancient Greek mythology), and (as regards God of War III ) impressive realism, makes for a fantastic series. Sadly, this trilogy is only available for PlayStation (2 & 3). My favorite characters: Hercules (demigod, son of Zeus), who appears in the 3rd game of the trilogy, is a mini-giant with a massive muscle structure and an interesting attitude, not to mention armed with some awesomely large and powerful weapons, that the playable character (Kratos) luckily gets to play with. The moment where this Hercules character appears is among my most favorite battle scenes in the whole trilogy. Hades (God of the Underworld), who we also only get to fight in the 3rd game of the trilogy, is another great design, and his underworld the best environment of the whole trilogy. His assortment of weapons is also quite impressive, but the battle involving him, though quite good, could be more epic. The Centaur General (human-horse being) were quite a presence. Not only were they rather tough to beat, but they were also the most charming characters in the whole trilogy. One wishes they had a greater screen time. Note that there were other Centaurs in the trilogy, but these particular ones were most interesting, and their slaying most... beautiful. They appear first time in the 3rd game in the trilogy. Poseidon (God of the Sea), is an interesting one. His represents the most complex (and hardest) fight sequence in the entire trilogy, it it also happens on the third installment of this fine trilogy. It\\'s not exactly my favorite, but his character has a certain level of charm, and the final kill is particularly brutal. Kratos, the protagonist, was most impressive in the first game, but he was getting less interesting later on and the novelty of his anger was wearing off. He was also getting petty at times, and too bloodthirsty to be convincing. Regardless, he is a work of superb character design, and this well-enhanced by the pale color and red stripes on his skin, as well as a body that makes him look like pure lethal. Stone Talos are a one-of-a-kind character... muscular stone statues that come to life to incur damage on our protagonist. Awesome as it is, the series does have weaknesses: There is one notable bad work of character design, which is Ares, the original god of war (a title Kratos took from him after defeating him). He is totally uninresting (and clumsy), and the battle in which the two fight is the worst in the trilogy. One other horrible character was the goat-snake-lion combo character. It was probably a first in gaming history, but it was a real stupid idea. There were also some particilarly hard stages to pass, where I had to ask for help from a friend to proceed to the next level. I hate stuff like that... I normally pick the easiest difficulty level in games, for I hate to struggle for too long.","tags":"arts","title":"God of War trilogy"},{"url":"http://tshepang.net/developer-of-note-barry-warsaw","text":"This guy, both an official Ubuntu developer and a core CPython developer, is a great example of a FLOSS collaborator. He is always polite on mailing list discussions, kindly and patiently helps foster collaboration between Debian and Ubuntu (there\\'s been some conflicts between the two camps). This is on top of his superb technical efforts demonstrated by his highly-detailed guides on various things, like upgrading various Python projects to run on Python 3 ( example 1 , example 2 , example 3 ).","tags":"computing","title":"'developer of note: Barry Warsaw'"},{"url":"http://tshepang.net/developer-of-note-nick-coghlan","text":"This is easily among the most active of all core CPython developers. His productivity is ridiculous, and I seriously wonder how he manages to do all he does, especially since he does it in his free time . He also tends to be quite stern, which is extra kool since he does it while displaying great depth of knowledge and maturity . Also, his great work has been officially recognized by the Python Software Foundation . The first work that prompted this recognition as developer of note is the proposal, PEP 413 . The idea is that the Python standard library (stdlib) should release at a quicker rate than the Python language itself. This is a nice balance between two camps: those favoring stability over quicker availability of features, and those favoring the opposite. The PEP (Python Enhancement Proposal) is quite thorough, and is partly in opposition to the earlier PEP 407 , which proposes that all of CPython (the language and its stdlib) should release faster. Nick Coghlan outlines the disadvantages with that approach in PEP 413 as well. Another PEP he is working on is PEP 432 . Titled Simplifying the CPython startup sequence , it\\'s a highly detailed proposal to re-organise some of CPython code to ease maintenance. His deep knowledge on the project\\'s internals is also on display. Nick also builds and maintains a collection of notes known simply as Nick Coghlan\\'s Python Notes . There is much wisdom there (complete with high quality clear writing), favorite of which is the just-updated Incremental Plans to Improve Python Packaging , a thorough write-up on the history, current state, and future plans regarding the story of packaging (and installation) in the Python ecosystem. He also happens to be a great champion in pushing for progress on that front.","tags":"computing","title":"'developer of note: Nick Coghlan'"},{"url":"http://tshepang.net/my-current-plans-for-wajig","text":"Some stuff I might work on in future: I want to start using argcomplete at some point, a more dynamic shell completion tool, replacing the current hand-rolled solution. I find shell programming hard, and argcomplete, which is inspired by optcomplete , is a brilliant workaround. Someone asked me to restore gjig, the GUI tool that [I removed from wajig] some releases ago. This will be an opportunity to learn GTK+ again. I did a bit of it, even contributing patches ([Tracker project]), but was never quite confident. It\\'s very likely that I won\\'t work on this... too much work. But ultimately, I would love for the standard Debian packaging tools to get the point where they make wajig irrelevant. After all, wajig was created to be a wrapper that helps ease the mess. Here\\'s the work I did in the past working on wajig, have a look at its tag . Off the top of my head: improved, simplified packaging port to Python 3 port to argparse (from getopt), which also meant proper handling of subcommands increased usage of python-apt, instead of hand-crafted (and ugly) code a few feature additions (lots of) modernising the code (lots of) cleaning up And over 800 commits later, I am glad.","tags":"computing","title":"my current plans for wajig"},{"url":"http://tshepang.net/shutilwhich-rocks","text":"Unix/Linux systems have a simple (but useful) tool named which, whose main purpose is to indicate where in the filesystem a particular executable is installed. This functionality was added in Python 3.3, and though simple, I was looking forward to its availability in Debian, just so I could replace wajig\\'s own equivalent functionality, which only checked for file presence, and was hard-coded and therefore inflexible. shutil.which() , OTOH, looks for the given executable name in user\\'s PATH and is more thorough, since it also checks if the executable name points to something that is actually executable. So, making use of this new function resulted in code that is both more robust and cleaner . As a sidenote, this functionality was first proposed in 2001 !","tags":"computing","title":"'shutil.which() rocks'"},{"url":"http://tshepang.net/enter-the-wu-tang-36-chambers","text":"I very much enjoyed listening to this album, which also happens to be the first by the group, Wu-Tang Clan . My favorite tracks: track 04: Wu-Tang: 7th Chamber ; also redone (track 12) track 09: Method Man - me loving the playfulness; also redone (track 13) track 07: Wu-Tang Clan Ain\\'t Nuthing ta Fuck Wit - some more playfulness","tags":"arts","title":"'Enter the Wu-Tang (36 Chambers)'"},{"url":"http://tshepang.net/links-2013-05-11","text":"Python interpreter finally gets tab completion by default ; to see wide use, this will have to wait for 3.4 release, [which will only arrive early 2014]. I submitted my first bug report for Emacs , perhaps my first ever to a pure GNU project; I say this because GNOME claims to be one, but it\\'s really only by name. Excellent guide on improving Python performance ; it\\'s written with PyPy in mind, but has excellent generic advice. I enjoyed this podcast where Jeff Atwood talks about his new project, Discourse .","tags":"computing","title":"'links 2013-05-11'"},{"url":"http://tshepang.net/project-of-note-discourse","text":"The announcement by project lead, Jeff Atwood, sold me. This is one rather incredible guy, a game changer of sorts, most notable for helping create what is likely the most important programming resource on the web . So whenever he goes and creates something else, I naturally do pay attention, and this Discourse thing looks amazing, at least from by limited usage so far.","tags":"computing","title":"'project of note: Discourse'"},{"url":"http://tshepang.net/me-loving-auto-fill-mode-emacs","text":"For the past 2 weeks or so, I have been learning Emacs, something I\\'ve been meaning to do for years now. I decided to do it seriously (not skip a day, sometimes hours at a time), and am really liking it. It\\'s a very well-designed application with a great amount of polish, far more than any editor I\\'ve seen yet (I\\'ve used Vim, Geany, Scribes, and Eclipse). It also helps that the documentation is so well-written . So far, my single most favorite feature is Auto Fill Mode , which allows you to keep typing without caring about line breaks, for they get automatically get applied for you. Am very sure that this feature exists elsewhere, but I actually never used it. Related to that is the fill-paragraph command, which is invoked via the Alt+q shortcut (M-q) in Emacs speak. What it does is reformat the paragraph as if it was typed while in Auto Fill Mode. Is gorgeous!","tags":"computing","title":"'me loving Auto Fill Mode (Emacs)'"},{"url":"http://tshepang.net/how-many-by-busta-rhymes","text":"Busta Rhymes has a mixtape named Cut Master C With Busta Rhymes , and in there is a version of How Many Mics from the album, The Score (simply titled How Many ). Busta Rhymes is among the most highly-skilled of all rappers, ever, but hardly ever performs in supreme tracks, so I was excited to listen to his take on one of the best hip-hop tracks ever (from one of the best ever hip-hop albums ).","tags":"arts","title":"'How Many' by Busta Rhymes"},{"url":"http://tshepang.net/links-2013-04-25","text":"Apple is a scary company this is one incredible web designer ( via ) [nice and detailed post about Pyramid\\'s powerful View configuration] how to evaluate competing technologies for use http://blog.delaguardia.com.mx/pyramid-view-configuration-let-me-count-the-ways.html","tags":"computing","title":"'links 2013-04-25'"},{"url":"http://tshepang.net/the-not-grateful","text":"This is sad, but the author should have probably used the term Free software , instead of open source ... politics vs. convenience.","tags":"computing","title":"the not grateful"},{"url":"http://tshepang.net/notes-on-desirism","text":"Stuff I scribbled down after listening to the first Season of a now-defunct series on applied ethics , all an attempt to make sense of it all: morality: a subset of a theory of values it deals with: obligation prohibition permission value: concerned with reasons for action desires: the only reasons for action that exist all value is ultimately based on desires all intentional actions are grounded on believes and desires believes are motivationally inert what good people do: promote desires that tend to fulfill other desires inhibit desires that tend to thwart other desires what tools to use: use praise to promote good desires use condemnation to inhibit bad desires there are two forms of desires: desires-as-means desires-as-ends (the type that actually matters) shortcuts: the only desires relevant to the discussion are malleable desires the only actions relevant to the discussion are intentional actions","tags":"misc","title":"notes on desirism"},{"url":"http://tshepang.net/project-of-note-m-cross-environment","text":"I spend several hours researching how to build a Qt app (written in C++) on Debian for users who will run it on Windows. I also wanted it be just one binary at the end so that deployment is just a matter of copying and running the one executable. This means I needed to statically-link the app, and the sad news is that I first needed a statically-linked Qt. If I had actually known of M cross environment (MXE), I would have shaved nearly all of those \\'wasted\\' hours. I am very grateful to the developers, especially because building Qt was mainly a matter of installing a few build dependencies and running make qt . An hour or two later, I had a newly cross-compiled Qt waiting for my use. It was also pleasant that the app, in a form of a .exe file, just worked on Windows 7. Having a look around, the build system actually looks elegant, and is a lot simpler than the scary mess that is JHBuild . I have published two guides on Stack Overflow on how this works, one for Qt 4 and another for Qt 5 .","tags":"computing","title":"'project of note: M cross environment'"},{"url":"http://tshepang.net/am-joining-gittip","text":"In Why I\\'m signing up for Gittip , a core CPython commiter, Brett Cannon, mentions a great reason to reward FLOSS contributors financially: ... a way for the community to thank someone\\'s family for letting them share their loved one with open source. For instance, tips for me would be a way of thanking my wife for letting me spend the hours I do contributing to Python in my various ways by letting me treat my wife to a night out so neither of us has to cook. He inspired me to actually go find a bit more about this Gittip thing, after which I decided to participate as well. In terms of money, I previously fooled around with flattr too, but stopped along the way for some reason (after a few months), so will see how long this one relationship lasts.","tags":"computing","title":"am joining Gittip"},{"url":"http://tshepang.net/looking-at-liquidluck-themes","text":"Following are demos of all liquidluck themes I could find, all running this source , but each slightly modified to change theme name ( settings.py ). moment (the default theme; demo ) responsive ( demo ) reveal ( demo ) thegrey ( demo ) lovelymod ( demo ) cb3f20 ( demo ) chiang ( demo ): I get a blank page When building, it fails with: [E 130413 20:53:48 base:42] 'None' has no attribute 'strftime' icbu ( demo ): When building, I get 2 of these messages: [E 130413 23:40:19 base:42] 'dict object' has no attribute 'package' octopress ( demo ): When building, I get 4 of these messages: [E 130413 23:33:53 base:42] list index out of range bootstrap : broken","tags":"misc","title":"looking at liquidluck themes"},{"url":"http://tshepang.net/links-2013-04-12","text":"a nice post on why static blog generation rocks; much better (and more detailed) than mine the fallacy of fast growth being hardcore ; nice humor embracing an ever-changing language loving the clean design of this page ; most of all, I love the code/pre tag rendering.","tags":"misc","title":"'links 2013-04-12'"},{"url":"http://tshepang.net/me-likes-subprocessdevnull","text":"If you want to run an external process from within Python, and are not interested in any errors that process may emit, there are a few ways you can go about it. I will demonstrate this by opening a Python shell in a directory that isn\\'t version-controlled by Mercurial : So, we don\\'t want to see this ugliness: >>> from subprocess import call >>> call(\\'hg status\\'.split()) abort: no repository found in \\'/home/tshepang/projects/pyramid\\' (.hg not found)! 255 So, here\\'s the simplest solution: >>> import os >>> from subprocess import call >>> call(\\'hg status\\'.split(), stderr=open(os.devnull)) 255 Problem: it leaves the file descriptor open... not good. We fix: >>> import os >>> from subprocess import call >>> DEVNULL = open(os.devnull) >>> call(\\'hg status\\'.split(), stderr=DEVNULL) 255 >>> DEVNULL.close() Much better, much uglier. ( example usage ) Something better: >>> import os >>> from subprocess import call >>> with open(os.devnull) as DEVNULL: ... call(\\'hg status\\'.split(), stderr=DEVNULL) 255 Looks much nicer, and is more convenient, unless we wanted to do something similar multiple times, in which case the previous example would be preferable. Best solution: >>> import os >>> from subprocess import call, DEVNULL >>> call(\\'hg status\\'.split(), stderr=DEVNULL) 255 This small and wonderful feature is new as of Python 3.3 .","tags":"computing","title":"'me likes subprocess.DEVNULL'"},{"url":"http://tshepang.net/a-bit-of-poetry","text":"English can be a beautiful language: There will always be justifications that a war is needed because of this oppressor or that incursion or this unforgivable action. -- source","tags":"misc","title":"a bit of poetry"},{"url":"http://tshepang.net/what-me-loves-about-static-website-generation","text":"There\\'s a ridiculous amount of power and flexiblity in having all the blog sources locally: One can use text editor of choice, which is a big help, given the quality of web-based editors in general. What this implies is that I can now put the blog in a VCS . This acts as some sort of backup too, since I place my sources on [a remote server]. 1 This also means that I can do a heck of a lot of edits without being connected to the web, or deeper changes like playing search-replace through the entire blog. cons The complexity of the setup is going to scare many people away. It can take a lot of time to setup; For me, this was made worse by having a lot of posts, as well as being rather particular about the look and functionality of the output. I used to run a command like wget --mirror http://tshepang.net once in a while, just in case! ↩","tags":"misc","title":"what me loves about static website generation"},{"url":"http://tshepang.net/links-2013-04-05","text":"I don\\'t care much for C#, but this \\'negative\\' book review by a luminary in the .NET community is worthy. a video on the awesome Disqus commenting system LibreOffice progress is quite impressive. pros of text over video going from simple to complex in teaching/learning programming","tags":"computing","title":"'links 2013-04-05'"},{"url":"http://tshepang.net/project-of-note-postgresql","text":"It is among those rather quite (in terms of controversy) but highly-respectable projects. It also looks like no other FLOSS DBMS system compares. It even bills itself the most advanced open source database on its main page . I\\'ve had great respect for the project for years now, but what prompted this post is its 2013-04-04 Security Release FAQ ( via ), a highly-detailed and thorough explanation of an important security issue affecting a few of its releases. Reading this, one gets the idea that it\\'s some serious developers running the project, and I deeply appreciate.","tags":"computing","title":"'project of note: PostgreSQL'"},{"url":"http://tshepang.net/me-loving-the-kiln-harmony-concept","text":"I tend to work a lot with both Git and Mercurial, and to ease the pain of forgetting which I\\'m using at a given moment, I created a setup I described on another post . An even better solution is having all this sorted out on the server side, so that it doesn\\'t matter which of the two I\\'m using. This comes in a form of a product named Kiln Harmony , which also turns out to be a complex beast behind-the-scenes. Would be kool to see a FLOSS implementation of this.","tags":"computing","title":"me loving the Kiln Harmony concept"},{"url":"http://tshepang.net/developer-of-note-vinay-sajip","text":"Vinay Sajip is the maintainer of logging , a Python logging library/module, available in the standard library. What prompted this post is his tireless improvements, not just to the software itself, but also the documentation surrounding it ( example ). It\\'s all the more impressive that he continuously blogs about various ways to use the module, and maintains a bunch of nuggets on advanced usage . One early event, which is likely the first time I noticed him, is the time when he rebutted some apparently inaccurate claims against the module, at which he responded in a highly-detailed post , which that lent credence to the module. This inspired me to give it a try, and it\\'s not that hard . There\\'s one other project he works on, sarge , which is like subprocess on steroids. Have a look at why he created it . Lately, he is working on distlib , a library which implements low-level functions that relate to packaging and distribution of Python software. This excites me a lot since it\\'s a key piece in the latest attempt at fixing Python packaging once and for all. On top of all this, he is very active on Stack Overflow, having answered hundreds of questions there. Amazing!","tags":"computing","title":"'developer of note: Vinay Sajip'"},{"url":"http://tshepang.net/links-2013-03-24","text":"great IRC humor nice CSS white-space explanation an interesting chart on the pain beginners may feel when trying to use Python for particular tasks writing a solid feed reader is not a joke ( via ) I got deeply excited as I read about [a nice scheme of manual package management], one of the many LFS hints . I am looking forward to the challenge (which may result in me ditching Debian for home use).","tags":"computing","title":"'links 2013-03-24'"},{"url":"http://tshepang.net/links-2013-03-14","text":"each feature release of Python comes with a great amount of changes, but I was particularly impressed by those of 3.2 ; the latest such release isn\\'t too shabby either the all-important factor of success in business... luck one interesting way of measuring Python 3 adoption is download numbers: 0.8 million out of a total of 2 million another sad case of Ubuntu diverging from GNOME... [Online Accounts] ( via ); as the author of that quality post says, they may have good reasons for this; it\\'s just that it looks bad on the surface a detailed defense on the choice of technology for Stack Exchange chat","tags":"computing","title":"'links 2013-03-14'"},{"url":"http://tshepang.net/on-growing-up","text":"Enjoyed this: Martijn Faassen used to ask us \\\"how fast is PyPy\\\" so we decided to name an option enabling all optimizations \\\"--faassen\\\". Then \\\"--no-faassen\\\" was naturally added too. Later we decided to grow up and renamed it to \\\"-O2\\\", and now \\\"-Ojit\\\". -- a summary of 10 years of PyPy history Amazing energy and intellectual prowess the project participants possess, and a very respectable project at that.","tags":"computing","title":"on growing up"},{"url":"http://tshepang.net/six-shooter-2005","text":"This 27 minute short is worthy mainly due to the loud and fascinating young guy sitting next to the lead character on a train trip. He happens to be the most insensitive character I have seen anywhere (if my poor memory serves me well), and is funny at times. The ending is strange though, and I guess deliberately pointless. I was inspired to watch this due the director, who later on made the weird and wonderful Seven Psychopaths .","tags":"arts","title":"'Six Shooter (2005)'"},{"url":"http://tshepang.net/great-praise-for-the-rpython-translation-toolchain","text":"The highly-detailed article is about the adventures of building a language VM using the RPython toolchain .","tags":"computing","title":"great praise for the RPython translation toolchain"},{"url":"http://tshepang.net/nice-review-of-fedora-18","text":"I really enjoyed reading this review of the experience of installing Fedora 18 and first use. Other than being well-written, I like the fact that he gives points to each pro and con. I also liked this bit of opinion, which I totally agree with: Logging in. Being told there are updates. Holy crap -- 218 updates -- for a release that's a day old. Does the word 'release' mean anything anymore? -5. Seriously, freeze that crap for a few days, only real security issues or facepalm bugs.","tags":"computing","title":"nice review of Fedora 18"},{"url":"http://tshepang.net/developer-of-note-jeff-forcier","text":"The strength of character that Jeff \\'bitprophet\\' Forcier possesses is admirable. He is the lead developer of fabric , the most popular deployment tool written in Python. I honor him here due to how he handled the issues with paramiko , the library that fabric uses heavily. He had to make tough decisions, like embedding that library in fabric source (due to various issues), and even forking it. All of this of course involved a lot of work and discussing, and thankfully at the end, the original \\'owner\\' of that indispensable piece of software relented and transferred it to this bitprophet character. This means Jeff now runs 2 of the most important tools in all of the Python world... more of the gory details .","tags":"computing","title":"'developer of note: Jeff Forcier'"},{"url":"http://tshepang.net/links-2013-01-02","text":"Go language looks good for web apps: comparison with Python evaluation after writing some important apps combines elegance of Python with speed of C/C++ The Python import system can be a scary beast . I appreciate this summary of the differences between upstream kernel and one included in Debian; would be nice to get more of this, and also on other major software included in Debian The highest-voted answer I ever gave on Stack Exchange .","tags":"computing","title":"'links 2013-01-02'"},{"url":"http://tshepang.net/misconceptions-i-had","text":"From one of the most important articles on Wikipedia : the most surprising one is that microwaves do not work by emitting waves at resonance frequency of water; they work using [some other method] the Great Wall of China is not visible from space (unaided) seasons are not caused by the Earth being closer to the Sun in the summer than in the winter we are not born with all brain cells we will ever have; this is a recent discovery (2000s) Frankenstein was actually the name of the creator of the monster, not the monster itself Thomas Edison did not invent the light bulb","tags":"misc","title":"misconceptions I had"},{"url":"http://tshepang.net/top-tracks-the-roots","text":"1 masterpiece In the Music ( Game Theory ) 8 excellent works The Lesson - Part III (It\\'s Over Now) ( Come Alive ) Distortion to Static ( Do You Want More?!!!??! ) Don\\'t Feel Right ( Game Theory ) Respond/React ( Illadelph Halflife ) Section ( Illadelph Halflife ) Wot They Do ( Illadelph Halflife ) Next Movement ( Things Fall Apart ) Push Up Ya Lighta ( Illadelph Halflife ) This is my most favorite of all hip-hop groups. The intensely-talented Black Thought , its lead vocalist, is my most favorite of all hip-hop artists.","tags":"arts","title":"'top tracks: The Roots'"},{"url":"http://tshepang.net/links-2012-12-19","text":"This guy presents 2 incredible ideas; one has been running for years (humans translating text that\\'s hard to read by machines, while authenticating themselves as humans - reCAPTCHA ), and another that is brand new, known as Duolingo . Sbhonyonyo the ugly mermaid - this is habsolutely (sic) hilarious! on the supremacy of Japanese toilets ; whoever said toilet humor can\\'t be smart and hilarious at the same time Connoisseur - poking fun at the definition of the word Bored With the Internet - very relevant cartoon, except it applies to my love for movies, whereby, while watching, am already thinking what I will write in my review; sometimes I think I am a loser","tags":"misc","title":"'links 2012-12-19'"},{"url":"http://tshepang.net/errors-resulting-from-setting-named-pipes-to-be-non-blocking","text":"Using C, I have been writing to named pipes in a non-blocking way and have been getting a whole bunch of EAGAIN errors. I have spent way too long on the web trying to find out why, and bumped onto this excellent answer . Looking at the manpage, I see that this would give the same value as EWOULDBLOCK, which is a far more meaningful name in this case. This is what will display those errors: ``` {.sourceCode .c} if (write(fd, buffer, strlen(buffer)) == -1) fprintf (stderr, \"error writing to file '%s': %s (errno %d)\", path, strerror(errno), fd); } And here is how to avoid them: ``` {.sourceCode .c} if ((write(fd, buffer, strlen(buffer)) == -1) && (errno != EWOULDBLOCK)) { fprintf( stderr, \"error writing to file '%s': %s (errno %d)\", path, strerror(errno), fd); } To avoid this kind of confusion, I just wish these two variables did not refer to the same errno value.","tags":"computing","title":"'errors resulting from setting named pipes to be non-blocking'"},{"url":"http://tshepang.net/links-2012-11-18","text":"Challenges for Linux networking ; sad to read of these shortcomings refusal to accept a reasonable, popular, and easy-to-implement request, an option to never turn off the screen great praise for Qt and its docs ; me was led to it when researching a cross-platform (Linux and Windows) GUI toolkit I found using gaming to explain version control unbeatable; that is the great appeal of Git Magic","tags":"computing","title":"'links 2012-11-18'"},{"url":"http://tshepang.net/what-i-do-after-debian-installation","text":"I think anyone who has never done any OS install before can install Debian without any issue at all, provided they will not be doing any partitioning. It is that easy. As for me, I do a lot more installations than the average person, so I semi-automate the setup process with the help of this script: ::: {.sourcecode} sh #!/bin/bash # some convenience shopt -s expand_aliases source \\~/nna/conf/bash_aliases # config files sudo cp \\~/nna/conf/sources.list /etc/apt sudo cp \\~/nna/conf/sudoers /etc # APT sudo apt-get update sudo apt-get --allow-unauthenticated upgrade sudo apt-get --allow-unauthenticated dist-upgrade sudo apt-get --allow-unauthenticated install devscripts debhelper build-essential python3-apt gpm # wajig (cd \\~/src/wajig && iiwajig) ibase && inondebian && itracker && icpython && ipurge # for Tracker sudo sh -c \\\"echo \\'fs.inotify.max_user_watches=100000\\' >> /etc/sysctl.conf\\\" # so I can share via a webserver, or easily access from browser sudo ln -s \\~/.custom_repo /var/www/custom_repo ::: Contents of Debian repository list file: ``` {.sourceCode .sh} $ cat /etc/apt/sources.list deb file:/home/wena/.custom_repo tshepang main deb http://debian.mirror.ac.za/debian wheezy main contrib non-free The ` tshepang ` codename refers to my custom repository , the one managed by [ reprepro ]. Contents of ** sudo ** setup file : ``` {. sourceCode . sh } $ sudo cat / etc / sudoers Defaults env_reset Defaults mail_badpass Defaults secure_path = \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" root ALL = ( ALL ) ALL %sudo ALL = ( ALL ) ALL Defaults ! tty_tickets Defaults timestamp_timeout = 100 The one change from default sudo setup is so that each bash session can inherit sudo powers from another. It\\'s one case where I trade security for convenience. Another such case is increasing the ask-for-password timeout to 100 minutes, instead of the default 15 minutes. And then these aliases, which point to scripts that install some packages: ibase : basic stuff I got to have, stuff like the components I use for my desktop apps, some CLI tools, and some documentation inondebian : packages that aren\\'t part of Debian, e.g. stuff from external repositories, or nonm-free stuff from Debian repos itracker : I always run the git version of Tracker , so these tools help me build it ipurge : stuff that was installed as Recommends dependencies of the above (e.g. gnome-bluetooth ) or during Debian installation (e.g. vim ), but that I won\\'t use The symbolic links is so that those I share a network with (LAN) can have easy web browser access to some stuff on my machine.","tags":"computing","title":"what I do after Debian installation"},{"url":"http://tshepang.net/links-2012-10-23","text":"I did not expect this question of mine to be loved so much. In fact, I thought it would see some resistance, due to so many Python-related threading/multiprocessing questions on Stack Overflow, such that it might be closed as a duplicate. This blog post makes me wanna contribute to LibreOffice, which is made even more appealing by fact that I\\'m using the language a lot at work . It is a sad fact that for large Python codebases, the pain of porting to Python 3 is quite high. Here\\'s an example for Twisted . I am a fan of argparse , but this specific CLI parsing library takes an interesting direction. great web app design advice","tags":"computing","title":"'links 2012-10-23'"},{"url":"http://tshepang.net/links-2012-09-28","text":"A look at the high fragmentation of programming languages What happens after loading the Linux kernel image into RAM Development process for putting hardware support in Linux-based systems Why choose N9 (Meego) over anything Android and iPhone ([and why not])","tags":"computing","title":"'links 2012-09-28'"},{"url":"http://tshepang.net/developer-of-note-michael-meeks","text":"Being the most visible LibreOffice (and formerly, OpenOffice.org) developer for a number of years now, he is also a tireless communicator and organiser. The switch from OpenOffice.org to LibreOffice was not exactly a smooth ride, but this guy kept showing a positive attitude throughout. In the latest of his longer-form blog posts (he normally writes tiny updates), he exposes the great progress that LibreOffice has had. This is not the most glamorous of software projects, but it certainly is among the most important in the world of FLOSS , and it\\'s kool to have people keeping it going.","tags":"computing","title":"'developer of note: Michael Meeks'"},{"url":"http://tshepang.net/me-got-meself-another-coding-job","text":"Some years ago, I was totally excited by having my first job working on software . I am very grateful for the chance the owner, who interviewed me for the position, took on me. I learned an incredible amount of stuff. Some months ago, a friend enticed me to the idea of doing something else, giving me contacts for some company building software and electronics products for the mining industry. So I wasn\\'t actually looking for work, but I was glad of the opportunity since I was sort of stagnating, and it really looked like this new company did some fun stuff, and I got the vibe that I\\'d really get challenged. It\\'s been 3 months now, and my guess was right. I keep getting surprised by the levels of smart I encounter regurlarly. These are the sorts of people I simply can\\'t match with my lesser brain, but am glad to work with, since they teach me so much. The systems we build are embedded, so I spend most of my time working with C and C++, and it tends to be a serious challenge, given that there\\'s a lot less hand-holding with those than with my favorite, Python.","tags":"misc","title":"me got meself another coding job"},{"url":"http://tshepang.net/matplotlib-rocks","text":"Have a look at this code: ::: {.sourcecode} python from matplotlib import pyplot import random x_axis = range(10) pyplot.plot(x_axis, random.sample(range(10), 10)) pyplot.plot(x_axis, random.sample(range(10), 10)) pyplot.show() ::: With matplolib installed, running the code above should resulted in the following image: ![image resulting from running the code above] You will notice that there\\'s 2 graphs drawn over the same axis, nothing special. What I really loved about matplotlib is that I did not need to specify what colors to use for any of the graphs ( as I did previously ). The colors were chosen automatically. It was helpful especially in my case because I needed a way to specify an arbitrary number of graphs. Without this magical feature, the code would be a lot uglier. Here goes: ::: {.sourcecode} python from matplotlib import pyplot import argparse import random parser = argparse.ArgumentParser() parser.add_argument(\\'number_of_graphs\\', type=int) args = parser.parse_args() x_axis = range(10) for n in range(args.number_of_graphs): pyplot.plot(x_axis, random.sample(range(10), 10), label=str(n)) pyplot.legend() pyplot.show() ::: If I provide 3 as command line argument, I get this: This feature left me pleasantly surprised.","tags":"computing","title":"matplotlib rocks"},{"url":"http://tshepang.net/debian-7-will-release-with-wajig-273","text":"I once claimed that Debian 7 \\\"wheezy\\\" will release with version 2.7 of wajig, but soon after, I experienced an exception that occurs if you run a command like wajig new if one of the newly-available packages was available for the configured foreign architecture, but not for the native one ( bug 679969 ). To fix that, I released 2.7.1, but I submitted a dirty tarball for upload, so had to resubmit, ending up releasing 2.7.2. Later on, someone noticed that a certain subcommand wasn\\'t recognized , and I released 2.7.3 which fixes the issue.","tags":"computing","title":"'Debian 7 will release with wajig 2.7.3'"},{"url":"http://tshepang.net/valve-appears-anarchistic","text":"While reading how this legendary game creator is run (or at least used to be), I was pretty much reminded that\\'s kinda how an anarchistic business would be run. I was pleasantly surprised to later encounter a section named The Workers Control the Means of Production on the same article. Kool stuff. [ via ]","tags":"misc","title":"Valve appears anarchistic"},{"url":"http://tshepang.net/zero-punctuation-rocks","text":"I recently discovered an incredibly entertaining and scathing game reviewer, Zero Punctuation . None of the reviews I\\'ve seen so far are any shallow, and there\\'s even solid social commentary.","tags":"arts","title":"Zero Punctuation rocks"},{"url":"http://tshepang.net/links-2012-07-07","text":"some women get their pussies mutilated for some shitty reasons! Luke Muehlhauser on feminism - superb writing the futility of theist vs. atheist debate I really enjoyed the humor in the humorous Threw It On the Ground music video; even the music is nice me not sure I would qualify for a job at Netflix, due its [highly demanding culture] would be extra kool if more large companies adopted something similar","tags":"misc","title":"'links 2012-07-07'"},{"url":"http://tshepang.net/wajig-26-and-27","text":"Version 2.6 of wajig has changes so small that I did not bother writing about its release, but was nevertheless very important because the bash-completion now works a lot better than before, thanks to Reuben Thomas . I also stopped wajig from accepting UPPERCASE subcommands, since a few people on the mailing list expressed dislike, and that includes project founder. Version 2.7, the version that will be in the next stable release of Debian [ update ], Wheezy (Debian 7), fixes two bugs, one of which I sort of intentionally broke in order to fix some issues with the --simulate and/or --teaching options. Someone did complain about this which was good since it\\'s a good indicator that someone actually cared about the feature. That motivated me to fix it, and I ensured that the fix was in before Debian 7 freeze. This work is my greatest contribution for this upcoming Debian release.","tags":"computing","title":"'wajig 2.6 and 2.7'"},{"url":"http://tshepang.net/sorting-dictionary-items-by-value","text":"Following should be self-explanatory: ``` {.sourceCode .python} $ python numbers = dict(zero=0, one=1, two=2, three=3) numbers {'three': 3, 'zero': 0, 'two': 2, 'one': 1} sorted(numbers) ['one', 'three', 'two', 'zero'] sorted(numbers, key=numbers.get) ['zero', 'one', 'two', 'three'] ``` The second-last command sorts by keys, but that\\'s easy. Sorting by value, as shown by the last command above, is what trips many novices, and I had to spend too much time on the web finding how to do it, and I still don\\'t really understand how it works, except that it works :)","tags":"computing","title":"sorting dictionary items by value"},{"url":"http://tshepang.net/when-a-floss-project-gets-real-big","text":"Serious scale: Developers typically send their changes to the maintainer of the file that is being changed. Those maintainers, who number around 700, feed those changes up to the 130 subsystem maintainers. From there, the patches make their way into linux-next, then to Linus Torvalds, and, eventually the mainline---if they get accepted at each step along the way. -- source","tags":"computing","title":"when a FLOSS project gets real big"},{"url":"http://tshepang.net/advice-to-aspiring-nanotechnologists-by-eric-drexler","text":"Software systems will be vital to nanotechnology and to enabling technologies along the way. A basic introduction to computers and software will be of value to anyone in any area of science or technology. Those interested in software related to nanotechnology should pay special attention to numerical simulation methods for molecular mechanical and quantum electronic systems, and to the design of programs for highly parallel computer systems, since this is the direction hardware will be moving in the coming years. Parallel systems will help designers develop nanotechnology, and nanocomputers will later be used to build massively parallel (trillion processor and up) computer systems. Finally, if powerful systems are to be useful in molecular design, they will need to be accessible through fast, clean, intuitive interfaces that let designers see and manipulate model molecules. The great Eric Drexler offers extensive guidance for those considering studying towards molecular nanotech, and that quote is most relevant to me, since I'm doing software and all. The end-notes, where he encourages supreme rigour and discipline, would scare most away. This appears to be a demanding career.","tags":"computing","title":"'Advice to Aspiring Nanotechnologists' by Eric Drexler"},{"url":"http://tshepang.net/developer-of-note-victor-stinner","text":"Depending on the change, contributing to open source software can be intensely challenging. Referring specifically to CPython, the reference implementation of my favorite programming language, you can have hundreds of messages on the mailing lists, and at times, many more in the issue tracking system, all discussing the change in mind. Such changes are most often accompanied with a PEP (Python Enhancement Proposal), a document which is basically a design spec for such a change. It also, helpfully, summarises the arguments against the change, and addresses them while at it. Given all that, it can be quite challenging for any one individual to champion such important changes, and an example of one such heroic individual is Victor Stinner , a core CPython developer. He is the most visible of the guys who helped ensure acceptance of PEP 418 , which proposes some time-related additions and improvements to the standard library\\'s time module . The sheer amount of discussion that went around this particular PEP was ridiculous. The mailing list discussions were practically endless, and so were the updates to the PEP, not to mention the amount of research involved, which was needed in order to have CPython expose this functionality in a cross-platform manner. Now, that\\'s some serious perseverance. In addition to this work, the guy has done a heck of a lot of work in cleaning up, re-factoring, and optimizing the string-handling code. I can\\'t imagine that this stuff is easy, especially since a large portion of it is in C! There\\'s a whole lot more work he has done... he\\'s among the most prolific of all core CPython developers.","tags":"computing","title":"'developer of note: Victor Stinner'"},{"url":"http://tshepang.net/links-2012-05-17","text":"The rate of Linux kernel development is seriously impressive Why bundle stuff in one library instead of a few From humble beginnings to extreme success Joel Spolsky is a wonderful writer, and has great humor. Check [his impressive effort] at making an oft-boring task of reading a tutorial fun. Check especially his reference to one obscure tv actor.","tags":"computing","title":"'links 2012-05-17'"},{"url":"http://tshepang.net/me-loves-new-git-site-design","text":"I really like the new website design of the Git project ( story ). It even gained a nice and fresh icon, replacing the old which looked like it was created in 1995. Note that the old site wasn\\'t crap either, and was already pretty much modern, following the \\'simple and bold\\' design trend I\\'ve witnessed in recent years. I\\'m jealous it\\'s better than that of Mercurial , my favorite VCS.","tags":"computing","title":"me loves new Git site design"},{"url":"http://tshepang.net/developer-of-note-martin-pitt","text":"I suspect that PostgreSQL isn\\'t a trivial piece of software, and I consider it among the greatest of all FLOSS. It even bills itself the most advanced of all FLOSS databases. That\\'s what brought Martin Pitt to my attention, for he is it\\'s Debian (and now also Ubuntu) maintainer. One other notable thing about him is his quiet persona (I follow Debian development fairly closely, and I don\\'t remember seeing him take part in any of the arguments in its mailing lists). I only ever notice him when he\\'d give some random status update .","tags":"computing","title":"'developer of note: Martin Pitt'"},{"url":"http://tshepang.net/project-of-note-reprepro","text":"I have given kudos to reprepro twice before , and though those 2 posts are actually outdated, I still keep a custom repository, a subset of the official repository of a specific arch, but only of packages that I ever install. Every once in a while, I run this command: $ reprepro -vv --basedir ~/.custom_repo/ includedeb tshepang \\ /var/cache/apt/archives/*deb What it does is add packages that are stored by the Debian package management system (located in /var/cache/apt/archives ) to the custom repository (located in ~/.custom_repo ). That ensures that I only keep packages that matter to me for any later install. Note that tshepang is the name of the repository. It\\'s an unofficial equivalent of testing and unstable . Another command that I sometimes run, though less frequently, is: $ reprepro -vv --basedir ~/.custom_repo/ includedeb tshepang \\ /var/cache/apt/archives/*deb This one is used to help keep the repository fresh. Check out this post for an explanation. Even less frequently, it happens that some package files are no longer referenced (i.e. not found in Package.gz ) for some reason. Here\\'s handy command to display them: $ reprepro --basedir ~/.custom_repo dumpunreferenced And here\\'s another that actually gets rid of them: $ reprepro --basedir ~/.custom_repo deleteunreferenced","tags":"computing","title":"'project of note: reprepro'"},{"url":"http://tshepang.net/dry-and-heavy-1977","text":"A very laid-back Burning Spear album, with a mere 9 short tracks, the best of which is a re-imagining of one of my eternal favorite tracks of all time, Creation (live versions). It\\'s named It\\'s A Long Way Around , and I could not stop myself from repeating it. Each of the other tracks is quite good, though not catchy at all.","tags":"arts","title":"'Dry And Heavy (1977)'"},{"url":"http://tshepang.net/my-argparse-tutorial-now-part-of-official-python-documentation","text":"I am very glad that a tutorial I started writing over 2 months ago has finally been added to the howto section of CPython documentation. It took a lot of iteration (over 7) in total before finally being accepted. But even then, it\\'s still not fully satisfactory for me, and I really hope that someone else with fresh eyes is going to go through all of it and offer improvements. Even better, I hope people will find it useful. I know I would have when I started doing argument parsing. I found the main module documention overwhelming, and the very first example is in fact why I even started writing this tutorial at all, as is evident on the relevant issue .","tags":"computing","title":"my Argparse tutorial now part of official Python documentation"},{"url":"http://tshepang.net/accessibility-on-debian","text":"Accessibility is one of those things we the privileged (those with workable eyesight and hearing) tend to forget about; That\\'s why developers like Debian\\'s Samuel Thibault deserve great respect. The guy was brought to my attention by the great Raphael Hertzog through one of his all-important People Behind Debian series of interviews . This is one of those things that make me wish I was rich... pay a bunch of people interested in this kind of work to do it full-time.","tags":"computing","title":"accessibility on Debian"},{"url":"http://tshepang.net/developer-of-note-stefano-zacchiroli","text":"I admire this guy a lot: his great passion for Debian (he speaks on behalf of it on a variety of events) mature and thoughtfulness in a variety of debates regarding this or that decision within Debian his ongoing push for collaboration between Debian and other distros his positive outlook for Debian, at a time when many are worried about its loss of relevance his passion for software freedom (we need people like this in an age where people tend to trade freedom for pragmatism) To prove I\\'m not the only one, there a bunch more guys who were happy enough with his 2010 term as Debian Project Leader (DPL), that they re-elected him again. What\\'s more interesting is that no one else stood for election. He also won the term the third time , so will reign over Debian in 2012.","tags":"computing","title":"'developer of note: Stefano Zacchiroli'"},{"url":"http://tshepang.net/links-2012-04-12","text":"Books Programmers Don\\'t Really Read avoid being too concise -- a Python example [excellent review of a book that uses Python to teach kids programming] mailing lists are less than ideal for debate/extended discussion [excellent review of a book that uses Python to teach kids programming]: http://inventwithpython.com/blog/2010/09/27/i-want-to-teach-my-kid-how-to-program/","tags":"computing","title":"'links 2012-04-12'"},{"url":"http://tshepang.net/wajig-25-released","text":"The release of wajig 2.3 , though important to me, caused varius complaints because it changed much of the UI. 2.5 goes a long way towards fixing those. What particularly helped guide this release is my creating a mailing list , just so that I can ask users for opinions on whether or not to do this or that change. There was much feedback and complaints of course, sometimes to a point where I felt like I\\'m just messing up, as in not helping make the world a better place. Luckily there were also words of appreciation of my efforts in maintaining it. Here\\'s the gory details .","tags":"computing","title":"'wajig 2.5 released'"},{"url":"http://tshepang.net/david-beazleys-pycon-us-2012-keynote","text":"David Beazley's PyCon 2012 key note talk is among the best I've seen in the field of software development. It's not even the content (the complexity and hackability of PyPy), but rather the presentation itself. The guy must have put a lot of effort in his slides, and what's better is that he was also doing live demonstrations. From those, you could gather that this isn't a mere mortal. He's brilliant (and humorous). And I've never even heard of him before, but he appears to be some sort of legend in the Python community.","tags":"computing","title":"David Beazley's PyCon US 2012 Keynote"},{"url":"http://tshepang.net/links-2012-04-09","text":"What You\\'ll Wish You\\'d Known is one the best essays I\\'ve read yet; it basically is advice for people still in high school. Beware though that the writer, Paul Graham, is very bold person. He makes a lot of assertions, without much in the way of backing it all up. Sure he\\'s well-read and experienced, but it appears he relies a lot on his intuitions. Inaccurate as it may be, this essay has a lot of insight and is very encouraging (e.g. don\\'t underestimate your abilities). a nice objection to loud noise the (un)greatness of Bell Labs On Parenthood - incredible write-up on the joys of having a child... this isn\\'t material I normally read, but I felt compelled considering my admiration for the writer, a famous software developer; it almost makes me look forward to my first an impressive criticism of anti-abortionists ( via )","tags":"misc","title":"'links 2012-04-09'"},{"url":"http://tshepang.net/links-2012-04-08","text":"a great post about the advantages of undo over warning dialogs [the great success of Stack Overflow, and the associated Stack Exchange network] -- lots of light humor why Python 3 is more suitable for teaching programming history of HTML -- the research and presentation is impressive a look at the high fragmentation of programming languages [the great success of Stack Overflow, and the associated Stack Exchange network]: http://blog.stackoverflow.com/2011/01/state-of-the-stack-2010-a-message-from-your-ceo/","tags":"computing","title":"'links 2012-04-08'"},{"url":"http://tshepang.net/finding-great-developers-by-joel-spolsky","text":"Reading the article today reinforced my view that Joel Spolsky is among the best bloggers on the topic of software development. Here he discusses a few strategies on finding excellent developers, and my favorite moment is when he mentions how hard he spoils interns in NYC: They're met at the airport here by a uniformed limo driver who grabs their luggage and whisks them away to their hotel, probably the coolest hotel they've ever seen in their life, right in the middle of the fashion district with models walking in and out at all hours and complicated bathroom fixtures that are probably a part of the permanent collection of the Museum of Modern Art... The article is of course a lot deeper than that, and goes to show the deep passion this guy has for excellence in the field.","tags":"computing","title":"'Finding Great Developers' by Joel Spolsky"},{"url":"http://tshepang.net/trying-out-calepin","text":"update : The lack of reliability, worst of which was constant unavailability of my blog, led me to move on. This time it\\'s Pelican , hosted by GitHub Pages . Here\\'s the setup . I\\'ve been meaning to move my blog(s) away from Posterous, due to its UI problems and ridiculously-slow page loads. I finally did it with the help of Calepin , which itself has a bunch of problems. These are forgivable since it\\'s a Beta product: The presentation is way too simple/plain, and doesn\\'t provide a way to customise it. I spent hours struggling with Dropbox login integration, where I often had to go to Chrome\\'s Incognito mode, and at some point, had to delete my Dropbox account as well, just to get it to work. It seems crazy that each time I want to publish I have to visit the web page to hit Publish, when Calepin should simply monitor the Dropbox account. The blog is unreachable whenever I publish. This isn\\'t such a big deal of course, but c\\'mon. When hitting Publish, it takes way too long (several seconds) before the page is rendered on the blog. ...and am sure there will be more as time goes (proven by the fact that this list kept growing as I typed this post) Despite all these problems, it will have to do for now, until I find another host, and maybe this time I will have to spend some cash. In the interest of balance, here\\'s what attracted me .","tags":"misc","title":"trying out Calepin"},{"url":"http://tshepang.net/wajig-24-released","text":"Less than a week after releasing 2.3, someone discovered a bug when running the NEW subcommand. All wajig did was fall flat with an ugly exception, making this some sort of emergency release. Anyways, I already had some nice improvements, so I released those as well: The INSTALL subcommand can now be given a mixture of filenames, .deb files, and normal package names, and will be able to install the packages specified. Previously, only one of these 3 types could be installed at a time. Apparently the reasons I gave for removing the ---simulate and ---teaching (now renamed to ---teach) options in 2.3 weren\\'t good enough, so I reinstated them. The bash completer now completes both lower-case and upper-case subcommands, thanks to Reuben Thomas , an avid wajig user. There\\'s a few other changes, so here\\'s the gory details .","tags":"computing","title":"'wajig 2.4 released'"},{"url":"http://tshepang.net/links-2012-03-27","text":"A highly detailed demonstration of SQLite performance , which also goes through various ways of tuning it. Advice to Aimless, Excited Programmers ; this sort of advice is not nothing new but the writer is so good and the site design so clean that it oughta be kinda canonical. Nobody Wants to Learn How to Program ; interesting advice on teaching programming. a gentle tutorial on Python\\'s xml.etree.ElementTree module It\\'s very interesting to see a browser with relatively little use continue getting developed, while monsters like Firefox, Chrome/Chromium, and Safari have (almost) taken over the world.","tags":"computing","title":"'links 2012-03-27'"},{"url":"http://tshepang.net/wajig-23-released","text":"It\\'s been many months since wajig was released, but this was about as good as any since I probably did far more work on it than on any other release so far: The most user-visible change is that I changed the UI to feel more standard/natural, where each of the wajig COMMANDS are 1st-class citizens. Let me give an example of user wanting to install a package named nautilus, but avoid installing its Recommends depencencies: ``` {.sourceCode .sh} ole wajig —norecommends INSTALL nautilus new wajig INSTALL —norecommends nautilus ``` I call this natural because it makes more sense to have the --norecommends command line option to be specified after the (wajig) subcommand it modifies. Also, the way it was implemented previously, the option would silently be ignored if it was used in a case where it was irrelevant. That\\'s not good, and it links to the next user-visible change. There is less magic and more strictness. Previously, these commands resulted in the same outcome: wajig REMOVEORPHANS wajig REMOVE-ORPHANS wajig R-____EMOVE-ORPH----___AN_S What wajig did was simply sanitise the commands, getting rid of the junk. Well, I don\\'t like that, but since I didn\\'t want to break people\\'s commands/aliases/scripts I actually tried to preserve that functionality, but argparse didn\\'t let me do that, and messing around with sys.argv before argparse jumped in was an error-prone mess, which links us to the next change, this time behind-the-scenes. I replaced the archaic getopt CLI parser with a far more powerful argparse . This change alone, when I truly embraced it, using its subcommand methods (see point 1 above), resulting in a ridiculous work that involved mainly unfun work and resulted in changing (adding and removing) thousands of lines code. The output of command wajig COMMANDS is now generated dynamically, instead of simply being read from a separate file. Advantage is that it should now remain more up-to-date. The usage info for each COMMAND was store on its own file, and the aliases were symblic links to them. Now that\\'s ugly, but I did it that was some time ago because I could not think of a better, quick way. The ugly solution is simple, but it added over a 100 files in user machines, which is just bad design. Well, modern Linux-based package management makes such invisible to all but the most avid/curious users, but I never liked it anyways. Now, all of that help info is auto-generated by argparse (you can imagine I\\'m a big fan of that module by now). There\\'s bunch of other changes, though most was code stuff. As for the user-visible stuff, a few COMMANDS were removed, a few options added/removed. Here\\'s \\'all\\' the gory details .","tags":"computing","title":"'wajig 2.3 released'"},{"url":"http://tshepang.net/removing-obsolete-packages-from-a-local-debian-repository","text":"background info Bandwidth in South Africa is neither readily-available nor cheap, so whenever I fetch and install Debian packages (e.g. apt-get upgrade ), I also keep them in a local custom repository. I use a great tool named reprepro for this, and this is the command I use to update that repository, given the location of the fresh package files: $ reprepro -vv --basedir ~/.custom_repo/ includedeb tshepang /var/cache/apt/archives/*deb What\\'s nice about the command is that, if there is an older version of the pacakge I\\'m adding, it gets replaced, and the package index is update accordingly. and now to the topic at hand I run that command more or less regularly, but very often the repository accumulates some junk: If a package gets renamed, reprepro has no way of knowing (at least as far as my setup goes). One notable case of this is Debian kernels, whose names match the major release versions (e.g. linux-image-3.1.0-1-686-pae becomes linux-image-3.2.0-1-686-pae when a new upstream release gets packaged). Lots other packages change names, and very often, for a variety of reasons (Debian is a little chaotic, often out of necessity, and it\\'s amazing that its developers keep it so damn stable given all this change). If I add a package from an external repository or that I converted from an rpm, reprepro has no way of knowing that fact. Now if I stop using that package, it is just a waste of resources (CPU and disk usage). To help with the cleanup, I have written the following simple script: ``` {.sourceCode .python} !/usr/bin/env python3 import apt_pkg import gzip import subprocess CUSTOM_REPO = (\"/home/wena/.custom_repo/dists/tshepang/main/\" \"binary-i386/Packages.gz\") WHEEZY_REPO = (\"/var/lib/apt/lists/ftp.de.debian.org_debian_dists_testing_{}_\" \"binary-i386_Packages\") def main(): custom_repo = apt_pkg.TagFile(gzip.open(CUSTOM_REPO, \"rb\")) archive_areas = \"main contrib non-free\".split() wheezy_packages = list() for archive_area in archive_areas: repo = WHEEZY_REPO.format(archive_area) repo = apt_pkg.TagFile(gzip.open(repo, \"rb\")) wheezy_packages.extend([pkg[\"Package\"] for pkg in repo]) for package in custom_repo: package_name = package[\"Package\"] if package_name not in wheezy_packages: cmd = \"apt-cache policy \" + package_name subprocess.call(cmd.split()) choice = input(\"remove from cache [Y/n]? \") if not choice or choice.lower().startswith(\"y\"): cmd = (\"reprepro -vv --basedir /home/wena/.custom_repo/ \" \"remove tshepang \" + package_name) subprocess.call(cmd.split()) if name == \" main \": main() ``` And here\\'s a snippet of its output: cx-oracle: Installed: 5.1.1-2 Candidate: 5.1.1-2 Version table: *** 5.1.1-2 0 500 file:/home/wena/.custom_repo/ tshepang/main i386 Packages 100 /var/lib/dpkg/status remove from cache [Y/n]? What it does is look for packages which are only available in my custom reposity, as compared with the one in Wheezy (soon to be Debian 7). It then prompts me on whether or not to remove it from that custom repository. Today, it helped me get rid of dozens of junk.","tags":"computing","title":"removing obsolete packages from a local Debian repository"},{"url":"http://tshepang.net/links-2012-02-15","text":"The amount of testing SQLite goes through before each release is impressive. A stern slap on the wrist of noisy people; it\\'s a well-informed rebuttal against the famous \\\"the CPython GIL sucketh\\\" complaint. This subprocess wrapper looks immensely powerful; I haven\\'t needed its extra features yet, but I love the elegance and seeming ease-of-use. A superb, highly-detailed code review by Winston Ewert . This guy (same one mentioned above) exposed [my sloppiness] as a programmer; I was nearly embarassed.","tags":"computing","title":"'links 2012-02-15'"},{"url":"http://tshepang.net/attachment-can-lead-to-irrational-behaviour","text":"In my previous job , we used to use some Java framework, Mule ESB , for our clients. The project is distributed with a lot of jar files, supposedly for the convenience of users. When we work on a project, we just add all those jars to the classpath (we use Eclipse, an excessively powerful and ugly IDE). Now, me being a sucker for the Debian way of doing things, I\\'d install packages providing all those jars from a Debian repository, then remove those Mule-distributed files, then add symlinks in place of them pointing back to the actualy files. Imagine how much time it took! Either that, or even easier (but still time-consuming), skip the symlink thing entirely and just add those jars (found in /usr/share/java directory) directly. Beyond just wasting time, the are other potential problems with my approach: Debian\\'s jar versions did tend to be different to Mule-supplied versions. You can imagine what problems this can cause, especially because the versions included there are most likely the ones used for testing Mule. Even if the versions were the same, what if there are slight changes from Debian\\'s side. Debian\\'s strict software guidelines implies that they\\'ll strip out some stuff that doesn\\'t adhere. The good thing is that Debian appends dfsg to the version number, but [not everybody knows that]. And even if they did, they would then need to spend time checking exactly what changed. Debian doesn\\'t merely re-distribute the jar files. They actually rebuild them, with Debian-supplied compilers. Maybe this isn\\'t an issue for Java projects, but who knows. This is not to knock the Debian way of doing things. It\\'s actually quite excellent (hence my love), but it can\\'t fit all scenarios. See Matt Zimmerman\\'s excellent post , where he touches on this issue. I did wise up a bit by simply doing things the way the makers of Mule intended.","tags":"computing","title":"attachment can lead to irrational behaviour"},{"url":"http://tshepang.net/links-2012-02-01","text":"\\\"A prayer to the programming gods\\\" - decent humor A bit of Zope history, how it rocked, and how it sucked - makes me respect Pyramid even more. A scathing read regarding incompencies of developers - for the sake of completeness, he should have mentioned that developers often don\\'t have time to fully understand technologies they are often commanded (by employers) to work with. on the frustrations of waiting too long to get help - great humor","tags":"computing","title":"'links 2012-02-01'"},{"url":"http://tshepang.net/surprising-discovery-of-the-day","text":"I was not aware that there were two separate words, quiet and quite . I used them for their meanings interchangeably, using both spellings unaware.","tags":"misc","title":"surprising discovery of the day"},{"url":"http://tshepang.net/project-of-note-requests","text":"Requests is a Python module that makes it real easy to deal with HTTP. As an example, something as scary as fetching a web page that needs authentication requires only a single line of code: ``` {.sourceCode .python} requests.get(\"https://example.com\", auth=(\"user\", \"pass\")) It\\'s capable of [a lot more] of course ([tutorial]), and it\\'s weird that something this nice hasn\\'t been around for ages. There is another that is much simpler to use and more advanced than Python\\'s standard library named [httplib2], but it\\'s not quite as simple/elegant: ``` {.sourceCode .python} h = httplib2.Http(\".cache\") // ugly h.add_credentials(\"user\", \"pass\") resp, content = h.request(\"https://example.com\") An example for achieving the same with only the standard library is far messier.","tags":"computing","title":"'project of note: Requests'"},{"url":"http://tshepang.net/battlestar-galactica-season-3-episode-20","text":"I hardly ever write anything about tv productions regardless of how many times I tend to get impressed, and there hasn\\'t been a shortage of that. That\\'s mainly due to laziness/motivation, but this time I just have to mention this one gem. The very last episode of the Season mainly focuses on the trial of one former president who is accused of treason due to surrendering to the cylons (a species created by humans) as well as giving them official approval to execute dozens of people. The defence given by an assistant lawyer is a masterpiece, and would match well with any court thing I\\'ve seen in my tv/movie-watching history. The performance matches as well, and that\\'s interesting because the performer/character combination is among the least interesting in the series. As a sidenote, I find this Season to be the best (in a series of four), because it covers more interesting events (the capturing of the humans, the resistance, their eventual rescue, and a lot more, best of which was the trial of course). This positiveness could make it look like I\\'m a huge fan of the series, but I\\'m not. There\\'s a whole lot of religious non-sense that I can\\'t bear, some seriously annoying characters, at least overly eccentric one, too much day-dreaming, some too-stupid plot decisions... but Episode 20 goes some way to help me forgive the rest of the shit.","tags":"arts","title":"'Battlestar Galactica - Season 3 Episode 20'"},{"url":"http://tshepang.net/java-gripes","text":"Okay, so Java sucks \\'a bit\\', but the following surprised me: I struggled to find a way to count the number of elements in an array. In a string it\\'s done thus: \"four\".length() . Given that, I expected that {'f', 'o', 'u', 'r'}.length() would gimme the same result. Nah! I found that I had to do new char [] {'f', 'o', 'u', 'r'}.length , and yes, without the brackets after length. WTF! There might be a good reason for such (seeming) inconsistency of course, but I\\'ve been spoilt by Python\\'s elegant equivalents: len(\"four\") and len(['f','o', 'u', 'r']) which all give the same result. (sidenote: len() is a Python built-in function, which explains why there\\'s no dot notation there). The standard library doesn\\'t have CSV handling! I had to find an external library for that! Given 2 strings, I can\\'t do str1==str2 for comparison, but am forced to use the string method, equals: str1.equals(str2) . This bit me a few times, and am sure am not the only one. The standard library doesn\\'t have .INI file handling ([Someone pointed to a 3rd party library]).","tags":"computing","title":"Java gripes"},{"url":"http://tshepang.net/top-tracks-bob-marley","text":"1 landmark No Woman, No Cry 2 masterpieces Stir It Up One Love 6 excellent works Waiting in Vain Kaya Sun is Shining Satisfy My Soul Redemption Song Rastaman Chant","tags":"arts","title":"'top tracks: Bob Marley'"},{"url":"http://tshepang.net/top-tracks-salif-keita","text":"5 masterpieces Mandjou ( Folon... The Past - 1995) Inigiche ( Mouffou - 2002) Souareba ( Soro - 1987) Cono ( Soro - 1987) Yamore ( Mouffou - 2002) 4 excellent works Nyanafin Tekere Seydou Madan Sina (aka Soumbouya)","tags":"arts","title":"'top tracks: Salif Keita'"},{"url":"http://tshepang.net/developer-of-note-john-palmieri","text":"Every so often, there appears a developer who pressures me away from my lazy, unfocused, and undisciplined ass to go do some useful programming. This time around it\\'s John Palmieri, the most visible of the developers of PyGObject (Python bindings for GTK+ and GLib). The old way of using GTK+ with Python has for years been PyGTK and this guy has been tirelessly working to move the world to the more modern PyGObject, and has led at least one coding sprint to help achieve this goal. He also appears friendly and humble. He rocks!","tags":"computing","title":"'developer of note: John Palmieri'"},{"url":"http://tshepang.net/moving-from-acer-travelmate-to-hp-probook-using-debian","text":"I have been using an Acer TravelMate 6592 laptop for close to 3 years (ever since I got my coding job ). It had some issues: it\\'s damn ugly , though not as much as Lenovo ones it requires Intel non-free firmware for its Wi-Fi chipset it frequently refused to make the LAN accessible from Linux on boot; this was likely a BIOS issue the battery capacity was below 50% so it didn\\'t last the hard drive was developing bad sectors Other than that, it truly was an excellent laptop, and I never complained about its performance, ever since I added a 2GB RAM stick, to make it a total of 4GB (except that I wished my HDD was faster, tempting me to buy an SSD). What else I really liked about it is the feature-packed touchpad: Beyond the normal two-finger and side-scrolling, it also had up-down-left-right buttons which allowed constant-speed scrolling. It\\'s interesting that such a touchpad is very rare. I now got an HP Probook 4530s and its pros: it\\'s stunning it\\'s got a real fast hard drive; there were times when I saw speeds upwards to 70MB/s, which I never saw with the older laptop its Wi-Fi doesn\\'t require non-free software it\\'s far more modern (USB3 support) and supposedly faster (Core i5-2410M vs. Core 2 Duo T7500), but my typical workload made even the TravelMate more than adequate And the cons: a less featureful touchpad keyboard keys placed in weird locations (e.g. pg up and pg dn buttons are placed far away, at the top-right corner; I blame the (needless for me) numeric keypad the screen resolution is on the low side and so is the screen size; the older laptop is much bigger even if they are both labeled 15.4\\\" ...and Debian: Quite a few times, I tend to want to stick to a stable release of Debian. Following Debian development does take time (frequent updates, curiosity to see what changed, and something getting broken here and there). So I tried to do the same here. Sadly, some of the software in Squeeze is too outdated to be optimal, so am glad to have teams like Debian Backports folk . But that wasn\\'t enough, so I ended up installing Xorg components from Debian Unstable (Suspend doesn\\'t work well with Squeeze (Debian 6) and backports doesn\\'t have a newer X version. Let\\'s see how long I last trying to keep pure by running as little from outside Squeeze as possible. update : This didn\\'t even last for 1 day. I was having issues with my X hanging the entire OS, forcing me to do a hard-reboot. This happened when I was watching a video using VLC, so I blamed it and installed the version from Debian Unstable. Sadly, doing things that way resulted in a VLC that refused to die normally, forcing me to do kill -9 vlc . I then just screwed my plans and upgraded fully to Unstable, and now VLC quits gracefully. Let\\'s see if I\\'ll have the X lockup again. update 2 : Well, I still experience machine lock-ups, the bad ones forcing a hard-reboot. This might be related to Wi-Fi because I used the system for quite a while using the wired link, without any such lock-up. update 3 : No more lock-ups, except very rarely. I run a mix of Testing and Unstable at the moment, but my \\\"/etc/sources.list\\\" file points solely at my custom repository and Testing, for it just is tiring to keep tracking Unstable... way too much bandwidth.","tags":"computing","title":"'moving from Acer TravelMate to HP Probook, using Debian'"},{"url":"http://tshepang.net/links-2011-07-15","text":"What\\'s up with MeeGo? a really good bug report -- I found this because I was having the same issue with Eclipse wonderful openness -- the sort of reporting that raises the expectations of web applications providers a real nice Chromium dictionary Extension a graph showing the history FLOSS video editors","tags":"computing","title":"'links 2011-07-15'"},{"url":"http://tshepang.net/thanks-to-the-debian-backports-team","text":"So I got this new HP laptop, Probook 4530s, and installed Debian 6 (Squeeze) on it. I was left sitting with two unbearable problems: The touchpad wasn\\'t fully operational (GNOME Mouse Preferences didn\\'t have a Touchpad tab where I could change the settings). The video driver seemed to have a problem according to the output of xvinfo ( no adaptors present ). I curiously looked at the backports , and found Linux kernel 2.6.38 (Squeeze has 2.6.32). I didn\\'t expect much from it, but installed it anyway (I heard that it has improved desktop responsiveness). I was pleasantly surprised to find that it fixed the above two problems. Loveliness. On another note, I found that Mercurial 1.8 also has a backport. This is great news because I have repositories I created with that version and the format is incompatible with Squeeze\\'s 1.6.","tags":"computing","title":"thanks to the Debian backports team"},{"url":"http://tshepang.net/my-first-code-contribution-to-the-cpython-project","text":"Looking at the long list of people who have contributed to Python, you will notice that my name is somewhere. This moment excites me, considering my deep respect for the project (the only other mega FLOSS project I have comparable respect for is Debian). Interestinly, my patch went through a few iterations before it was accepted, and even then, with some modifications. It was an eye-opening experience, and made me learn a little more than I thought I needed to. Now, I just need to do a few more of these.","tags":"computing","title":"my first code contribution to the CPython project"},{"url":"http://tshepang.net/wajig-22-released","text":"Our friendly Debian developer agreed to upload yet another release of wajig to Debian. This one is quite special since it now uses Python 3. It also does automatic dependency installation for DEB files. This part of the work took me longer because python-apt doesn\\'t exactly make it easy. I even had to look in the code to be sure what exactly is happening. I ended up using a mixture of dpkg (for installation of stated DEBs, and to configure them) and python-apt (for the automatic installation part). The WHICHPACKAGE command, which displays which packages the given file path belongs to, got improved. It was using custom implementation which was broken for some uses, but there are available tools ( dpkg --list for locally-installed packages and apt-file search for both local and remote packages) that do the job better, and I made use of them. These tools were probably not avaialable the time this feature was added to wajig.","tags":"computing","title":"'wajig 2.2 released'"},{"url":"http://tshepang.net/wajig-21-released","text":"Today I released a new version of wajig , first time in about half a year. It\\'s not even like there\\'s some major stuff or anything; I just haven\\'t put as much time. Regardless, it\\'s quite a good release. One of the changes is getting rid of gjig, the GUI interface. I actually did like it, but it was never a production standard piece of code. It was actually quite nifty and useful, but the interface was not at all modern or usual. It also needed a lot of polish. I learned a lot from trying to port it away from the deprecated libglade library to a more modern gtkbuilder (part of GTK+). But the porting documentation wasn\\'t really good, so I was left with the option of doing it from scratch... not exactly a small task. Worse still is the fact that there were more pro-looking GUI package managers out there. It didn\\'t keep up with the pace of development wajig. It was a 2nd-class citizen. Oh, and I\\'m so afraid of GUI developement, or should I say GTK+. It was never an easy domain for me, and I still don\\'t really get it. And yes, I\\'ve tried. Maybe other toolkits are easier, and I\\'m too lazy to check them out. I wanted to move wajig forward into Python 3 land, and given that GTK+ support for that Python version isn\\'t exactly mature (at time of writing), I felt that I was being held back.","tags":"computing","title":"'wajig 2.1 released'"},{"url":"http://tshepang.net/from-squeeze-to-unstable-and-back-again","text":"With all the noise regarding GNOME 3, I decided to lose patience and go check it out. Thing is it\\'s currently in Debian Experimental suite, so I installed the essential components from there, stuff like gnome-shell, mutter and gnome-panel, and things weren\\'t so smooth. So I thought that it might be because I was still using Squeeze (Debian 6, released in February), so I upgraded my entire system to Sid (the main Debian development suite). Well, the new hotness wasn\\'t as usable as I\\'d like, so I decided to go back to my rock-solid and familiar GNOME 2 environment. I was surpride that I could to downgrade the whole thing back to Squeeze, without any major hitch. Of course the downgrading process wasn\\'t exactly smooth (lots of package removals before re-installation for one), but I\\'m running Squeeze as we speak. It would have been quicker for me to just re-install of course, especially because I have some installation and setup scripts to make it quick. But doing that would imply I wouln\\'t have access to my computer for minutes on end. Not good. Also, it\\'s nice that I continued running that fine-looking GNOME 3, while under-the-hood it was being removed. It took just a logout and back in to be back home... GNOME 2 from Squeeze. Note that this sort of thing is not officially supported by Debian. It\\'s probably going to be harder to do this as Unstable develops further. But this exercise gave me newfound respect for the strength and stability of the Debian system.","tags":"computing","title":"'from Squeeze to Unstable, and back again'"},{"url":"http://tshepang.net/the-need-for-quality-in-healthcare","text":"Some scary shit: For every drowned and pulseless child rescued by intensive care, there are many more who don\\'t make it---and not just because their bodies are too far gone. Machines break down; a team can\\'t get moving fast enough; a simple step is forgotten. Such cases don\\'t get written up in The Annals of Thoracic Surgery, but they are the norm. Intensive-care medicine has become the art of managing extreme complexity---and a test of whether such complexity can, in fact, be humanly mastered. -- The Checklist Read the whole article to get the context (i.e. the heroic work involved in saving that girl\\'s life). It\\'s a great read.","tags":"misc","title":"the need for quality in healthcare"},{"url":"http://tshepang.net/developer-of-note-josselin-mouette","text":"The efforts that Josselin Mouette puts into maintaining Debian\\'s GNOME are amazing (and seemingly thankless). He is the most visible member of that team-maintained part of Debian. He also portrays deep knowledge of GNOME\\'s oft-inconsistent and oft-complex internals, and does participate in upstream discussions. Here are two examples of his heroic efforts: His great summary of GNOME\\'s then-current release status. With the release of GNOME 3, here he prepares a migration plan .","tags":"computing","title":"'developer of note: Josselin Mouette'"},{"url":"http://tshepang.net/cleansing-multiple-build-directories","text":"In my adventures of building GNOME with JHBuild , it often happens that when I tweak something that affects the build environment (e.g. use system Python instead of JHBuild-built one), I get a heck of a lot of build failures. This will happen even after I run jhbuild clean (which runs make clean on the modules), testimony to the weakness ofthe GNOME build infrastructure (autotools, ...). This means that I need to run make distclean or better still (where applicable) git clean -dfx . Note that I sometimes even have to uninstall one or two modules (on JHBuild path) to get a build failure fixe ( jhbuild uninstall modulename ). This is laborious work, so I sometimes just wipe out the entire installation. Note that there\\'s dozens of modules to build, so I wrote this little script to take care of it: ``` {.sourceCode .python} import os import subprocess top_level = os.path.expanduser(\"~/src/gnome\") for filename in os.listdir(top_level): full_path = \"{}/{}\".format(top_level, filename) if os.path.isdir(full_path): cmd = \"cd ~/src/gnome/{} && git clean -dfx\".format(filename) if subprocess.call(cmd, shell=True) != 0: cmd = \"cd ~/src/gnome/{} && make distclean\".format(filename) if subprocess.call(cmd, shell=True) != 0: cmd = \"cd ~/src/gnome/{} && make clean\".format(filename) subprocess.call(cmd, shell=True) update ====== Someone very kind guy made [ a bunch of suggestions ], making my code much better : `` ` { . sourceCode . python } import os import subprocess top_level = os . path . expanduser ( \"~/src/gnome\" ) for filename in os . listdir ( top_level ): full_path = os . path . join ( top_level , filename ) if os . path . isdir ( full_path ): os . chdir ( full_path ) if subprocess . call ( \"git clean -dfx\" . split ()) != 0 : if subprocess . call ( \"make distclean\" . split ()) != 0 : subprocess . call ( \"make clean\" . split ()) further reading modules: os , os.path , subprocess","tags":"computing","title":"cleansing multiple build directories"},{"url":"http://tshepang.net/my-jhbuild-setup","text":"JHBuild is a powerful and flexible build tool for GNOME. It does takes some getting used to in terms of set-up, but this wiki page is quite gentle, and it details how to get the code running on your machine. If you use Debian (or Ubuntu), you can use run this command: ``` {.sourceCode .sh} wajig --norecommends install build-essential docbook-xsl flex \\ bison cvs gperf cmake {uuid,ppp}-dev \\ libx{composite,randr,damage,ft2,i,t}-dev \\ libxcb-{event1,aux0,atom1}-dev \\ lib{pam0g,iw,db,gdbm,png12,ffi,tiff,vorbis,gl1-mesa,unistring} \\ lib{quvi,icu,neon27,usb-1.0-0,asound2,ncurses5,udev,usb,acl1} \\ lib{boost-signals,ldap2,sasl2}-dev It\\'s installs the development packages that will be needed by the build process. The `--no-recommends` option means I want to limit the installation to packages I really need, avoiding the extra stuff deemed by the packager to be useful for me. My \\\"\\~/.jhbuilrc\\\" contains the following: ``` {.sourceCode .python} # build directory checkoutroot = os.path.expanduser(\"~/src/gnome\") # don't spew lots of distracting status messages notrayicon = True # attempt to build modules even if their dependencies weren't successfully built nopoison = True # don't build these since they have issues; this implies that I must install my distro's development versions skip = ['nss', 'nspr'] # dont fetch moduleset xml files from the web; use ones that are installed locally use_local_modulesets = True # where html-formatted logs are kept tinderbox_outputdir = os.path.expanduser(\"~/temp/tinderbox\") See Configuration File Reference for a detailed explanation of these options. After this, I run jhbuild bootstrap --ignore-system . This downloads, builds, and installs the basic tools for building packages (here\\'s the xml file it uses to determine what these tools are, and where it downloads them from). To avoid issues with some incompatibility with my OS, I use --ignore-system , which ensures that the bootstrap command will use the blessed versions of these tools. When the bootstrap process is complete, I run the not-so-descriptive command jhbuild tinderbox (See Command Reference for a detailed explanation of this and the other options). This is the same as build, except that the output is stored in html files, in a directory specified by tinderbox_outputdir in the config file. Ideally, some hours later, the process should be complete. Reaching for \\\"\\~/temp/tinderbox\\\" will present you with a whole bunch of html files, one for each module. The file \\\"index.html\\\" will give a decent page that acts like a summary of the entire build process, showing which modules failed, and on what build stages. Gorgeous! sidenotes : This process is rather simplified, for the sake of clarity. I run Debian 6, codenamed Squeeze. There is a more thorough tutorial elsewhere.","tags":"computing","title":"my JHBuild setup"},{"url":"http://tshepang.net/cat-python-and-perl","text":"I came across a tutorial that showes how to implement a simple cat in Perl. I\\'ve modified their example for the sake of simplicity: ``` {.sourceCode .perl} sub cat { foreach my $filename (@_) { open FILE, $filename; while (my $line = ) { print $line; } } } cat @ARGV; Running this script ( e . g . `perl cat.pl file` ) will display those files as if you ran `cat file` . I decided to see how the Python example would look like : `` ` { . sourceCode . python } import sys def cat ( files ): for filename in files : with open ( filename ) as FILE : for line in FILE : print ( line , end = \"\" ) cat ( sys . argv [ 1 :]) Running this script (e.g. python3 cat.py file1 file2 ) will give exactly the same result as above. notes The Perl keyword, my , indicates that the variabe it refers to is local. Without that, it\\'s taken to be global. As for Python, this is implicit, and depends on where the variable is placed (scope). Perl has special ways of identifying data types. In our example, $ is used to identify a variable that has a single value, and is known as a scalar in Perl talk. This can be tedious of course (so much typing!). In Python, the data fed into the variable is the only thing that determines what type of the variable it is. I see this as noise from Perl. It results in some badness, as in you can have two variables names be the same, but given different types (e.g. my $var; my @var; ) The upper case file handler, FILE , is a matter of convention for Perl, and can be named \\'anything\\'. I used it in the Python sample only for the sake of clarity. The <> operator is special syntax that means a file is being manipulated. Python has no such. The @_ is an argument list ( @ARGV ) from the function call, cat . This is one other thing that is implicit about Perl, where you have to learn extra syntax (and concepts), where a simple argument list should have been provided during the function declaration, as in Python\\'s cat(files) . Note that I didn\\'t need to import anything to get Perl to work with command line arguments. With Python, I need to explicitly do so, and that\\'s via the sys module , which is part of its standard library. The Python with statement is meant to make our lives easier, but also adds syntax to the language. What it does is close a file for us so we don\\'t have to do it. The Python print() function adds a newline by default, and that would results in ugly output from our code, that\\'s why we used the end=\"\" . The [1:] from the last statement in the Python example means that we are slicing the list, removing the first element (element 0), and keeping everything else. We do this because the current running script is considered by Python as element 0, while in Perl, the 1st element is actually the first thing that appears on the command line after the script name. One would say that Perl does this more elegantly. further reading Python scope Python print function Python with statement","tags":"computing","title":"'cat, Python, and Perl'"},{"url":"http://tshepang.net/music-is-the-weapon-2004","text":"I have deep respect for Fela Kuti\\'s musicianship, and more than any other musician I\\'ve ever listened to. His intense love for the craft, though I suspect that it may at times been detrimental to those surrounding him, is hard to beat. His political views seemed relevant too, as he mentions Nigerian government\\'s oppressive acts, one of which resulted in the death of his mother. How he was going to help correct these injustices is another thing altogether Fela Kuti was an eccentric character, at least as portrayed. He had the fearless attitude of an traditional activist, which is a quality I admire (and lack). He also promoted and practiced traditional African religion (while opposing Christianity and Islam), and polygamy, which is okay in itself, until the fact that the women themselves would not be allowed to have other partners. Maybe Fela didn\\'t mind it (he din\\'t mention it), but I doubt it. That\\'s some double standards which I really hate. The documentary itself is pretty decent, but lacks the depth I was hoping for. I guess I\\'m more interested in the musical Fela Kuti than the politics, even though one heavily influenced the other, making it hard to separrate the two. But check out this quality review , which is far better and more detailed than I can muster.","tags":"arts","title":"'Music is the Weapon (2004)'"},{"url":"http://tshepang.net/another-visit-to-eastern-cape","text":"Last time , I raved about my experiences at a friend\\'s home place, Nyosini. My memory is not to be completely trusted, but this second (or third, if we count attending a funeral ) one was even better. Such hospitality is what I feel most people on the planet have never experienced. We (me and two friends, who were just as impressed) were treated like royalty. We slept there just one night though, so we spent nearly all our time there in one yard. I have never seen a family quite like this. My own (maternal) family is quite close, but definitely not as kindly as this one. And by the way, there are no exceptions. The love they have, and express, for each other is... damn I wish I could express self better. I met Bongo again, and the guy\\'s character hasn\\'t changed a bit... maybe even more shy than last time, I can\\'t tell. Lwazi and Siya weren\\'t there (boarding school). One could say it was me (us?) paying homage to that wonderful family (it\\'s been over 3 years), but also an excuse to go enjoy the warmth of their welcome, not to mention the gorgeous scenery of the surrounding hills.","tags":"misc","title":"another visit to Eastern Cape"},{"url":"http://tshepang.net/floetic-2002","text":"I love the smooth melody that is [*Floetic*] by Floetry. It is the sort of sound you find in Jill Scott\\'s near-masterpiece of an album, Who\\'s Jill Scott . Here\\'s my favorites: track 5: \\\"Getting Late\\\" -- not nearly as seductive as \\\"Say Yes\\\", but what it\\'s a masterwork track 8: \\\"Say Yes\\\" -- it\\'s most notable thing is the sensual play by one them gals; makes me wanna say... yes track 2: \\\"Floetic\\\" -- energetic and nearly-formulaic; beautiful arrangements","tags":"arts","title":"'Floetic (2002)'"},{"url":"http://tshepang.net/project-of-note-iotop","text":"Iotop displays disk I/O usage of individual process, in a way similar to top. What I really loved though is that it allows one to display the accumulated amount of I/O on any of the DISK READ, DISK WRITE, SWAPIN, and IO (overall). This is through a nifty interface: You just press a on the keyboard, and it will sort the hungriest processes on top. Reversing the order, you just press r . If you want to sort by other colums, you just press the left/right key. The presentation is rather busy, and it doesn\\'t have the myriad options that top has (e.g. I can\\'t chose to hide any of the columns I\\'m uninterested in), but it\\'s more than good enough for it\\'s specific purpose.","tags":"computing","title":"'project of note: Iotop'"},{"url":"http://tshepang.net/beethovens-symphony-9","text":"I was led to listen to Beethoven's critically-acclaimed \"Symphony No. 9\". Well, this may be because I'm a novice regarding Classical music, but I didn't find anything amazing in there. Let's call it acquired taste, but I've heard dozens of Classical tracks that were superior. Let's say maybe I wasn't focusing much on the music (I was listening to it while browsing the web). Oh, and I even played it twice just to make sure, and still... nothing. NOTE : the version I listened to is formally titled Symphony No.9 in D minor, Op.125 – \"Choral\" and was played by Wiener Philharmoniker, Orchestra.","tags":"arts","title":"Beethoven's Symphony 9"},{"url":"http://tshepang.net/the-b-sides-1990-2000-2002","text":"I\\'m currently enjoying the wonderful \\\" The B-Sides 1990-2000 \\\" (2002) by U2. It\\'s a bunch of real nice Dance re-mixes. Here\\'s my favorites: track 8: Salomé (Zooromancer Remix) track 9: Even Better Than The Real Thing (The Perfecto Mix)","tags":"arts","title":"'The B-Sides 1990-2000 (2002)'"},{"url":"http://tshepang.net/hold-it-down-1995","text":"I recently got hold of \\\"Hold It Down\\\" (1995) by Das EFX . Real good ole-style hip-hop, thanks to a friend who, when I asked who he reckoned the best hip-hop group is, he mentioned Das EFX. In my investigations, I also got hold of their \\\"Generation EFX\\\" (1998) which is really bad. Strange that just 3 years later people can fuck up like that. Here\\'s my favorites: track 18 -- Hardcore Rap Act track 12 -- Alright track 05 -- Real Hip Hop","tags":"arts","title":"'Hold It Down (1995)'"},{"url":"http://tshepang.net/plotting-with-matplotlib","text":"Here\\'s drawing a simple graph: ``` {.sourceCode .python} from matplotlib import pyplot x = range(10) # a list of 10 integers, 0-9 y = range(10) pyplot.plot(x, y) pyplot.show() And now for something a little more interesting : `` ` { . sourceCode . python } import random from matplotlib import pyplot x = range ( 10 ) y = random . sample ( range ( 10 ), 10 ) pyplot . plot ( x , y ) pyplot . show () We can have more than one graph on a single figure: ``` {.sourceCode .python} import random from matplotlib import pyplot x = range(10) y1 = random.sample(range(10), 10) y2 = random.sample(range(10), 10) pyplot.plot(x, y1, x, y2) pyplot.show() What if the two graphs have much differing ranges : `` ` { . sourceCode . python } import random from matplotlib import pyplot x = range ( 10 ) y1 = random . sample ( range ( 10 ), 10 ) y2 = random . sample ( range ( 100 , 110 ), 10 ) pyplot . plot ( x , y1 , x , y2 ) pyplot . show () Depending on need, that might not be ideal. So let\\'s create two separate y-axes: ``` {.sourceCode .python} import random from matplotlib import pyplot x = range(10) y1 = random.sample(range(10), 10) y2 = random.sample(range(100, 110), 10) pyplot.plot(x, y1) pyplot.twinx() pyplot.plot(x, y2) pyplot.show() Yeah , not exactly ideal . We lost the automatic coloring , and we don \\ 't even know which graph is which . Let \\ 's do better: `` ` { . sourceCode . python } import random from matplotlib import pyplot x = range ( 10 ) y1 = random . sample ( range ( 10 ), 10 ) y2 = random . sample ( range ( 100 , 110 ), 10 ) pyplot . plot ( x , y1 , \"red\" ) pyplot . ylabel ( \"y1\" , color = \"red\" ) pyplot . twinx () pyplot . plot ( x , y2 , \"blue\" ) pyplot . ylabel ( \"y2\" , color = \"blue\" ) pyplot . show () This was done with the help of this example . There\\'s a heck of a lot more . further reading built-in function: range module: random 3rd-party module: matplotlib.pyplot matplotlib documentation","tags":"computing","title":"plotting with matplotlib"},{"url":"http://tshepang.net/project-of-note-matplotlib","text":"I believe matplotlib is THE plotting library for Python. It happens to be highly advanced too, and has extensive documentation to show up for it, including a large collection examples and a gallery of plots (and the code used to produce them). I played a bit with it and was later on impressed by its versatility .","tags":"computing","title":"'project of note: matplotlib'"},{"url":"http://tshepang.net/links-2011-02-15","text":"my first CPython feature request ; unsurprisingly, it was rejected I still can\\'t comprehend why Ubuntu gods decided to put their window controls on the left, and so does this guy ( via ) Operating Systems Lifecycle Chart -- nice presentation, nice site design The tools used by one very advanced Debian user; this is quality and in-depth writing. Someone claimed Gnucash was to blame for her move to Linux-based systems; for another, the tool was Meld .","tags":"computing","title":"'links 2011-02-15'"},{"url":"http://tshepang.net/comparing-debian-repositories","text":"If you got two Debian repositories, it\\'s quite easy to check the differences in package versions between them: ``` {.sourceCode .python} import os import gzip import apt_pkg repo1 = \"~/.repo_custom/dists/cache/main/binary-i386/Packages.gz\" repo1 = os.path.expanduser(repo1) repo1 = apt_pkg.TagFile(gzip.open(repo1, \"rb\")) repo1 = dict([(pkg[\"Package\"], pkg[\"Version\"]) for pkg in repo1]) repo2 = \"~/.repo_bin/dists/squeeze/main/binary-i386/Packages.gz\" repo2 = os.path.expanduser(repo2) repo2 = apt_pkg.TagFile(gzip.open(repo2, \"rb\")) repo2 = dict([(pkg[\"Package\"], pkg[\"Version\"]) for pkg in repo2]) apt_pkg.init_system() for pkg in repo1: if pkg in repo2: vc = apt_pkg.version_compare(repo1[pkg], repo2[pkg]) if vc > 0: print(\"{0}t{1}t({2})\".format(repo1[pkg], repo2[pkg], pkg)) ``` The line import apt_pkg implies that python3-apt is installed. Here\\'s a snippet of what the output will look like: 2.32.1-2 2.28.1-6 (gconf-defaults-service) 0.23.0-1 0.21.1-1 (pylint) 2.91.5-2 2.30.2-2 (libgnomekbd-common) 0.21.2-1 0.16.4-1 (libpixman-1-dev) 2.91.7-1 2.30.1-2 (nautilus) 0.9.22-1 0.9.21-3 (pulseaudio-utils) Here, we get a display of package versions where the repo1 (custom repo in this case) is greater than repo2 version. To do it the other way around, use the < character in the comparison line, if vc > 0 . further reading modules: gzip , os 3rd party library: [apt_pkg]","tags":"computing","title":"comparing Debian repositories"},{"url":"http://tshepang.net/links-2011-02-07","text":"The Law of Leaky Abstractions Open Source Contribution Etiquette a gentle intro to Unix processes, and the Python [subprocess module] [How does one make Java ignore the number of spaces in a string when splitting?] on the importance of decent documentation -- a great post [How does one make Java ignore the number of spaces in a string when splitting?]: http://stackoverflow.com/q/4861803/321731","tags":"computing","title":"'links 2011-02-07'"},{"url":"http://tshepang.net/splitting-strings","text":"If I have a string with spaces, and wanted to split it into a list/array, I would use this: ``` {.sourceCode .python} split_string = \"a b c\".split() print(split_string) Output: ['a', 'b', 'c'] I can go ahead and specify a delimiter (which character the string must split on): ``` {.sourceCode .python} split_string = \"string with spaces\".split(\" \") print(split_string) I get the same result: ['a', 'b', 'c'] But what if my string wasn\\'t so forgiving? ``` {.sourceCode .python} split_string = \"a b c\".split(\" \") print(split_string) Output : [ 'a' , 'b' , '' , 'c' ] Not exactly what we want . Leaving the delimiter out gives us the exact same list as when we had this with a forgiving string . Anyways , the point is that for a lot of cases , probably a majority , when one wants to perform a string split , it \\ 's because they want to delimit it with spaces . So , Python covers for that common use - case . That \\ 's a bit of [ magic ] ([ justification ]) one might take for granted , because it \\ 's not available in PHP and Java. I \\' m here only going to show Java examples . PHP examples aren \\ 't that much different though. Here goes : `` ` { . sourceCode . java } import java.util.Arrays ; String [] splitString = \"a b c\" . split ( \" \" ); System . out . println ( Arrays . asList ( splitString )); Output: [a, b, , c] That\\'s not what we want, so in order to cover for my unforgiving string, I get to use regular expressions (regexp)? ``` {.sourceCode .java} import java.util.Arrays; String[] splitString = \"string with spaces\".split(\" +\"); System.out.println(Arrays.asList(splitString)); Output: [a, b, c] The `+` in the `split()` method indicates that the match can either be one or more consecutive spaces. That\\'s not what we want, so in order to cover for my unforgiving string, I get to use regular expressions (regexp)? ``` {.sourceCode .java} String[] splitString = \"string with spaces\".split(\" +\"); System.out.println(Arrays.asList(splitString)); Output: [a, b, c] But what if the string was even less forgiving. In this case, having tabs as well? We need some more regexp help: ``` {.sourceCode .java} import java.util.Arrays; String[] splitString = \"a bnc\".split(\"\\s+\"); System.out.println(Arrays.asList(splitString)); Output: [a, b, c] The `s` matches any white space. With Python, I expected the default way to work but it didn\\'t, but came back disappointed: ``` {.sourceCode .python} split_string = \"a bnc\".split(\" \") print(split_string) Output: ['at', 'bnc'] Perhaps it\\'s a philosophical difference, but it\\'s harder to do this with Python. This is the only thing so that I found easier to achieve in Java than in Python: {.sourceCode .python} import re split_string = re.split(\"s+\", \"a bnc\") print(split_string) ...and we finally get what we want: ['a', 'b', 'c']","tags":"computing","title":"splitting strings"},{"url":"http://tshepang.net/basic-configparser-usage","text":"Reading .INI files is very easy with Python. Say you had a file, \\\" config.cfg \\\", with this content: [numbers] one: 1 two: 2 The code to read that content is: ``` {.sourceCode .python} import configparser conf = configparser.ConfigParser() conf.read(\"config.cfg\") items = conf.items(\"numbers\") print(items) Output : [( 'one' , '1' ), ( 'two' , '2' )] That \\ 's a list of tuples, each tuple a key-value pair. Even better , since these are key - value pairs , why not use a more suitable data type ? Here goes : `` ` { . sourceCode . python } import configparser conf = configparser . ConfigParser () conf . read ( \"config.cfg\" ) items = dict ( conf . items ( \"numbers\" )) print ( items ) Output: {'two': '2', 'one': '1'} That\\'s the dict function, which takes a list of tuples, and converts them to a dictionary. You might also have noticed that the ordering is now a bit off. That\\'s because the dict type doesn\\'t care about ordering. Remember that in order to access dictionary content, you use a key and not an index: ``` {.sourceCode .python} d = {1: 'one'} d[0] Traceback (most recent call last): File \"\", line 1, in KeyError: 0 d[1] 'one' ``` further reading configparser module dict mapping type","tags":"computing","title":"basic ConfigParser usage"},{"url":"http://tshepang.net/dangerous-inconsistency-in-symlink-removal","text":"Here\\'s how to make a symlink and to delete it: ``` {.sourceCode .sh} mkdir dir ln -s dir dirlink rm -r dirlink Here\\'s another way to delete it: ``` {.sourceCode .sh} rm -r dirlink/ Although it will do the job, it will actually complain with: `` {.sourceCode .sh} rm: cannot remove dirlink': Not a directory Note that we could have achieved the deletion with just: ``` {.sourceCode .sh} rm dirlink This is because the symlink is just a single file. So there\\'s no need to treat it like a directory when deleting. Sadly, this behaviour is inconsistent when there is a mounted voulem. The first way of deletion has no problem, but the second one will wipe out the entire drive, if it so happens that dir is the mount directory (i.e. ln -s /media/my_drive dirlink && rm -r dirlink/ ). I learned this the hard way :( [ sidenote ] Here\\'s some explanation .","tags":"computing","title":"dangerous inconsistency in symlink removal"},{"url":"http://tshepang.net/basic-usage-of-python-with-oracle-db-in-debian","text":"What if you wanted to access Oracle using Python? Once you are set up , it\\'s real easy. We use [cx_Oracle], the most popular Python library to read Oracle DBs. Let\\'s start by simply reading the DB: ``` {.sourceCode .python} import cx_Oracle conn = cx_Oracle.connect(\"usr\", \"pwd\", \"tns\") cursor = conn.cursor() cursor.execute(\"SELECT * TABLE_NAME\") for item in cursor.fetchall()[0]: print(item) conn.close() The [ cx \\ _Oracle ] explain exactly what each of these means . If we wanted instead to modify stuff in there , we only add one extra line , which is `cursor.commit` , like this : `` ` { . sourceCode . python } import cx_Oracle conn = cx_Oracle . connect ( \"usr\" , \"pwd\" , \"tns\" ) cursor = conn . cursor () cursor . execute ( \"SELECT * TABLE_NAME\" ) cursor . commit () conn . close () For real-world code, you are of course going to add exception handling for all this, something like this: {.sourceCode .python} import cx_Oracle try: conn = cx_Oracle.connect(\"usr\", \"pwd\", \"tns\") cursor = conn.cursor() cursor.execute(\"SELECT * TABLE_NAME\") for item in cursor.fetchall()[0]: print(item) conn.close() except Exception as e: print(e) That exception handling is rather oversimplified though, but is good enough for illustrative purposes. Also, note that there is no timeout set in case of problematic/slow network access, so my code will just sit there waiting to connect.","tags":"computing","title":"'basic usage of Python with Oracle DB, in Debian'"},{"url":"http://tshepang.net/using-pythons-subprocess-module","text":"There are at least 2 ways to run a simple command like echo test in Python: via the shell, or directly (via the kernel). This is via the shell: import subprocess subprocess . Popen ( \"echo test\" , shell = True ) Output: test This is via the kernel: import subprocess p = subprocess . Popen ([ \"echo\" , \"test\" ], stdout = subprocess . PIPE , stderr = subprocess . PIPE ) output = p . communicate () print ( output ) Output: (b'testn', b'') Not exactly what we want. The output is actually a tuple ( stdout , stderr ). Note that by default, shell=False , and that's why it's not stated here. To get the equivalent of what we get from the first example, we have to do a bit more work: import subprocess p = subprocess . Popen ([ \"echo\" , \"test\" ], stdout = subprocess . PIPE , stderr = subprocess . PIPE ) output = p . communicate () print ( output [ 0 ] . decode (), end = \"\" ) Output: test The b thing indicates that the string is in bytes format. To get a normal string from that, just run the string's decode method . Also, that I had to use the end argument on the print function , was to avoid an empty line on the terminal output. As can be seen, this means we do much of the work ourself, but the benefit is that we now have finer-grained control (e.g. we get to control when to display the output). Another benefit is that it is more secure to do it this way (I don't know the details, so see shell injection for the argument). further reading There is a whole wealth of info on this from a gentle tutorial where I learned this stuff. It also explains what pipes are ( subprocess.PIPE ) Also, take a look at the official doc for the Popen.communicate() method a great explanation of what strings really are, and how they relate to Python 3","tags":"computing","title":"using Python's subprocess module"},{"url":"http://tshepang.net/shlex-and-subprocess","text":"I learned about a module called shlex . It\\'s stated to be a simple lexical analyzer, and I don\\'t really know what this means, but I found at least one of its uses. It provides a convenience method that lets me split a command line string, to feed into subprocess module. Let\\'s say I want to run the command /bin/cat 'file with spaces' from within python . A normal split won\\'t work, because it uses white space as a delimiter (by default). To test, I will create a file named \\\" file with spaces \\\" and add text ( content of 'file with spaces' ). ``` {.sourceCode .sh} $ echo 'content of file with spaces' > 'file with spaces' And here \\ 's the code, using the normal split method: `` ` { . sourceCode . python } import subprocess cmd = \"/bin/cat 'file with spaces'\" formatted_cmd = cmd . split () subprocess . Popen ( formatted_cmd ) Output: ``` {.sourceCode .sh} /bin/cat: 'file: No such file or directory /bin/cat: with: No such file or directory /bin/cat: spaces': No such file or directory That \\ 's when `shlex` module gets to be useful. `` ` { . sourceCode . python } import shlex , subprocess cmd = \"/bin/cat 'file with spaces'\" formatted_cmd = shlex . split ( cmd ) subprocess . Popen ( formatted_cmd ) Output: content of 'file with spaces'","tags":"computing","title":"shlex and subprocess"},{"url":"http://tshepang.net/getting-rid-of-junk","text":"PZ Myers of Pharyngula fame is the best atheist writer I\\'ve read yet, and his blog challenges that of Luke Muehlhauser\\'s Common Sense Atheism as the best atheism blog I\\'ve read yet. Watch him trash away his Bible and Koran, in a far more symbolic way than I did with my Bible some years ago... I simply piled it on top of the rest of the trash.","tags":"misc","title":"getting rid of junk"},{"url":"http://tshepang.net/project-of-note-geany","text":"I\\'ve been a satisfied user of Geany, a lightweight IDE, these past few months: automatically detects if it should auto-indent (EG after a function definition in Python) got code-folding can highlight #include file and open it (on new tab); does not do this if it\\'s a system file (/usr/include) though got terminal emulator on bottom (though I don\\'t use it) can automatically detect tab width (or so it claims) has a usage finder which shows where a given function is called, even among multiple files got autosave option as a plugin got file browser option as a plugin (although it does not detect filesystem changes, EG when a file is deleted the view is not updated to reveal such a change) when space-indent is chosen, backspacing through such behaves as if they were tabs which enhances navigability","tags":"computing","title":"'project of note: Geany'"},{"url":"http://tshepang.net/project-of-note-linkchecker","text":"Weeks ago, I looked for a utility that would help me check for my blog\\'s dead links, and I bumped onto LinkChecker (version on my system is 6.2). It turned out to be impressively advanced, and here\\'s the summary from its manpage: LinkChecker features recursive checking, multithreading, output in colored or normal text, HTML, SQL, CSV or a sitemap graph in GML or XML, support for HTTP/1.1, HTTPS, FTP, mailto:, news:, nntp:, Telnet and local file links, restriction of link checking with regular expression filters for URLs, proxy support, username/password authorization for HTTP and FTP, robots.txt exclusion protocol support, i18n support, a command line interface and a (Fast)CGI web interface (requires HTTP server).","tags":"computing","title":"'project of note: linkchecker'"},{"url":"http://tshepang.net/project-of-note-mailman","text":"Mailman is most likely the most popular mailing list manager in the FLOSS ecosystem. What I like about it is the ease-of-use it provides for the end-user: if u wanna subscribe to topic@host.org mailing list, you simply append -request to the recepient name ( topic-request@host.org ) and use the subject \\\"subscribe\\\", and simply send. To unsubscribe, you do the same, except the subject becomes \\\"unsubscribe\\\". There\\'s also the web interface for those who won\\'t remember/know these simple instructions of course. Another bonus: it\\'s written in Python!","tags":"computing","title":"'project of note: Mailman'"},{"url":"http://tshepang.net/project-of-note-rdiff-backup","text":"So I got my hands on a 250GB 2.5\\\" portable HDD, which led to me to go do proper backups again. I decided to go back to the familiar rdiff-backup and I became exceedingly impressed by its thorough documentation ( manpage , FAQ , and the one place beginners should start, examples ), a myriad capabilities (over 60 command line options), and an elegant design (the target directory looks exactly like the original except for an extra directory named rdiff-backup-data, which contains all that\\'s needed to roll-back, restore, check stats, ...). My usage: $ rdiff-backup --include-globbing-filelist rdiff-backup ~/ /media/backup There, ~/conf/rdiff-backup is a file that has a list of directories I want to exclude in the backup, and /media/backup is the backup destination. There is a credible competitor in a form of duplicity, which is probably superior since it\\'s got encryption. This duplicity also got a bonus of being used by some hot new GUI backup utility now endorsed by Fedora and may in future be an official part of GNOME , Déjà Dup.","tags":"computing","title":"'project of note: rdiff-backup'"},{"url":"http://tshepang.net/project-of-note-sudo","text":"Some of the benefits of Sudo: The password I authenticate with to perform admin tasks is the same as the one I use to log in as normal user. This means, in simple setups, one need only remember one password, instead of two. The extra command you have to type before performing any admin task reduces the danger of running dangerous commands... the sort of thing that is easy to do when logged in as root. And some of the more advanced benefits: [gives users] permission to do certain tasks as a different user (which doesn't even have to be root) without giving them complete access to that user or root. On server systems or multiuser systems with different people working on different tasks not everyone need complete access to the system, one hands out only the amount of access that is required for the task. -- source","tags":"computing","title":"'project of note: Sudo'"},{"url":"http://tshepang.net/project-of-note-twisted","text":"I\\'ve been impressed by the claims made for Twisted , which erased the erroneous thought I\\'ve been having that it\\'s just another web framework. Well, it appears it doesn\\'t really have an equal, and is something completely different. What prompted me to award it project of note honor is its patch review process , a good indicator that this isn\\'t a toy.","tags":"computing","title":"'project of note: Twisted'"},{"url":"http://tshepang.net/links-2011-01-17","text":"a wealth of info on \\'kill -9\\' the best comparison of vi and emacs I\\'ve seen yet the complexity of programming language benchmarking high profile FLOSS developers employed by Google I have never seen such detailed criticism of a programming language.","tags":"computing","title":"'links 2011-01-17'"},{"url":"http://tshepang.net/accessing-oracle-db-using-python-in-debian","text":"The following instructions assume that you are using Debian Squeeze , the current \\'stable\\' release. The instructions here are very specific, so look elsewhere for something more generic. downloads : Get registered on Oracle website, and download oracle-instantclient11.2-basic*.rpm (\\~40MB). Get cx-Oracle rpm for your specific Python version and your specific processor (in my case, 3.1 and i386 respectively). installation and setup : {.sourceCode .bash} sudo apt-get install libpython3.1 libaio1 alien sudo alien --install oracle-instantclient11.2-basic*rpm cx_Oracle*rpm sudo ln -s /usr/lib/python3.1/site-packages/cx_Oracle.so /usr/lib/python3.1/lib-dynload sudo ln -s /usr/lib/oracle/11.2/client/lib/libnnz11.so /usr/lib sudo ln -s /usr/lib/oracle/11.2/client/lib/libclntsh.so.11.1 /usr/lib echo export LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client/lib >> ~/.bashrc source ~/.bashrc python3 -c 'import cx_Oracle' If that last line executes without printing a message to the screen, the install is most likely successful. For basic usage, see this tiny tutorial .","tags":"computing","title":"'accessing Oracle DB using Python, in Debian'"},{"url":"http://tshepang.net/poll-results-of-debian-users-favorite-floss","text":"Here's an index of the poll results where I asked on debian-user mailing list what their favorite FLOSS is. It's a yearly poll which has been running for a few years now, and is now defunct: 2009 2008 2007 2006 2005","tags":"computing","title":"poll results of debian-user's favorite FLOSS"},{"url":"http://tshepang.net/barry-whites-top-tracks","text":"6 points : 1 landmark ( Bring Back My Yesterday ) 1 masterpiece ( Let Me Live My Life Lovin' You Babe ) 1 excellent work ( Just the Way You Are )","tags":"arts","title":"Barry White's top tracks"},{"url":"http://tshepang.net/bioshock","text":"I enjoyed a negative review of BioShock partly because everything else I\\'ve read so far was full of praise, and partly because, immersive as it is, really is overrated. For one, I couldn\\'t believe that I was restricted to basically one environment, and I got so lost around the repetitive-looking environment just as I was in Halo: Combat Evolved (a superior game, even considering it was released over 5 years earlier). What I like about the game: an amazing array of genetic weapons great art direction the fearsome Big Daddies an appealing gloomy storyline of genetic engineering gone awry The whole thing did alert me what a tremendously useful tool 3D games could be as exploration tools to unfamiliar worlds. Note that I\\'ve lived through such an experience with the vastly underrated Conflict: Desert Storm .","tags":"arts","title":"BioShock"},{"url":"http://tshepang.net/body-bags","text":"I was reading Body Bags comic early this morning and it\\'s devastatingly unique and fresh, with some seriously interesting characters. Nice stuff. Am not big on comics, but if they tend to come like this, I\\'ll definitely get hooked.","tags":"arts","title":"Body Bags"},{"url":"http://tshepang.net/evil-edits","text":"It gets disgusting when re-releases, usually in a form of \\'the best of X\\', gets their tracks\\' lengths reduced, all to make space for a larger number of tracks on that album. The worst such a situation is in the case of Don\\'t Leave Me This Way (Harold Melvin & the Blue Notes) which had a release that cut it to about 5 minutes of its original 10 minutes, effectively getting rid of the most exciting part of that track, the climactic second act. A similar thing happened to Brenda Fassie\\'s Weekend Special whose climax was also mercilessly cut in her Greatest Hits album.","tags":"arts","title":"evil edits"},{"url":"http://tshepang.net/gamespys-bioshock-review","text":"Last year, I got seduced by GameSpy with their 2006 review , and this time around, I got seduced yet again by their review of BioShock . Going through their various categories, that game got mentioned more than twice, being among the top10 PC games, winning Art Direction award, and then, in what truly caught my attention, winning the Best Story award. The review makes me salivate. [ update ]","tags":"arts","title":"GameSpy's 'BioShock' review"},{"url":"http://tshepang.net/halo-3","text":"I could not spot a real improvement from Halo 2, bar the hyper-realistic environments of Flood-infested walls, the addition of some vehicles, and the ability to dislodge heavy guns. It seems most effort went into just the environments while ignoring gameplay and a fresh and good storyline. It\\'s quite a pity because the first Halo was such an epic achievement, while the second, while unable to replicate the first\\'s grandeur, had quite a few innovations.","tags":"arts","title":"Halo 3"},{"url":"http://tshepang.net/ma-brrr","text":"Following are my experiences of a musical play currently seen at State Theatre, Pretoria. It\\'s about the life and career of Brenda Fassie, a South African vocalist who was arguably the most popular artist in the history of the country. First viewing The first night was the best experience I\\'ve so far had in my stage play experience. It was electrifying and the audience agreed with me, with a few goose-bumps here and there. It\\'s amazing how larger-than-life one person can be made. It brought me much appreciation of South African art, that there\\'s such a rich culture to export. So what are some the elements that made me so excited, the first time around: lead performance: I gained new-found respect for Lesego Motsepe, who is famous for her long career in Isidingo, a soapie generally regarded as South Africa\\'s best; the director even mentioned that someone stated that she wasn\\'t LIKE Brenda, but rather, she WAS Brenda; the result of the voice training she went through was amazing, because she really sounded like her character music: the compositions were remixed, and the live band bringing it alive rocked; I wish it would get recorded because some of it were improvements on the originals dancers: though the dancing merely okay, their energy was tops, especially the guys, and the quality of the choreography also helped costume design: what the dancers had to wear was mostly impressive, and often offered an accurate display of dressing styles through a bit of South Africa\\'s past backing vocalists: wonderful, notably the fat guy, who had a tiny moment to act, which was hilarious extra emotion: well, Bongani Fassie, Brenda\\'s son, pitched on stage unscheduled, and even joined the lead performer to sing \\\"Too Late for Mama\\\" miscellaneous: a bunch of scenes and moments are too many to mention The fact that this was opening night may have helped a lot, as well as close to sold-out venue. Now, the shitty thing about stage is that such moments can\\'t be replicated, and even though it may have been recorded, it\\'s just not the same. Second viewing The revisit was something else. The attendance was really bad this time around (a Thursday after Friday\\'s opening night): lead performance: she was probably tired and/or discouraged by the small and unresponsive crowd; she mostly didn\\'t even try to sound like Brenda music: there\\'s wasn\\'t a degradation, so kudos! dancing: less energy, and that there were fallen beads on stage probably didn\\'t help costume design: same shit, so nothing to say here backing vocalists: wonderful, but the fat guy was just reciting his words this time extra emotion: well, the Bongani Fassie thing can\\'t be replicated miscellaneous: no surprises, nothing new worth mentioning Third viewing I went to see this for the third time, this time on a Saturday, so the audience was much bigger than last time, and the show was far better, making me a little bit obsessed. lead performance: she did better than last time, but maybe not as good as the first night music: I recall enjoying the previous moments better, maybe because I got used to it dancing: the energy seemed as high as the first time around, and I enjoyed it more (I really the super-cool guys at the jazz club) costume design: same shit, so nothing to say here backing vocalists: the nice fat guy was replaced by a less interesting one extra emotion: I kept getting (unbearable) attention from one dancer, since I was on the front row seats; I guess she wanted to steal the show, and I didn\\'t allow her (she was unrelenting) so I shifted my attention away miscellaneous: the kids called up on stage were much more fun than on previous occasions","tags":"arts","title":"'Ma-Brrr'"},{"url":"http://tshepang.net/me-loves-cherry-poptart","text":"This morning I read \\\"Cherry Does the Time Warp\\\", part of the funny and politically satirical adult comic series, Cherry . It\\'s not the first time I\\'ve read a Cherry installment, but this specific one parodies some characters in history and popular media in a fun manner, but it\\'s highlight is Cherry\\'s encounter with her teenage, sexually-inept mom (and you can imagine what transpires).","tags":"arts","title":"me loves Cherry Poptart"},{"url":"http://tshepang.net/sabc-1-glory","text":"I got captivated by the new SABC 1 theme presentation (for lack of a better name), which is a fusion of computer animation and live footage with reddish filtering, an artistic impression reminding me of the visual landmark that is 300. It\\'s however not nearly as popular or memorable as the previous theme which portrayed South African Black and White people having switched roles (as in White people living in townships and Black people leading a more affluent lifestyle). This, the latter, is an interesting play on the stereotypical both races have on each other and was notably also because of the superb camerawork and some interesting acting. It\\'s interesting as regards the former for I thought the latter couldn\\'t be bettered.","tags":"arts","title":"SABC 1 glory"},{"url":"http://tshepang.net/simple-rating-system-for-music","text":"I use a simplistic point system to rate top music tracks: landmark = 3 points masterpiece = 2 points excellent work = 1 point I wonder what others use and am too lazy to search.","tags":"arts","title":"simple rating system for music"},{"url":"http://tshepang.net/too-long-in-slavery-by-culture","text":"The mood of Too Long In Slavery (performed by Culture and found in Greatest Hits - The Frontlne Years ) matches it's title pretty well (the vocalist sounds like he's in pain and so is the melody). The track still sounds is near-playful, though it has nearly brought me to tears on a few occasions; it's a powerful delivery of a painful message. It's my favorite among the group's work.","tags":"arts","title":"'Too Long In Slavery' by Culture"},{"url":"http://tshepang.net/top-music-tracks","text":"All these are landmarks (i.e. beyond masterpiece level): Bring Back My Yesterday (Barry White) Confusion (Fela Kuti) Crying Guitar (The Movers) Diamante (Zucchero) Django\\'s Castle (Eddie Harris) Do You Feel Like We Do (Peter Frampton) Gauteng (Miriam Makeba) Give Me (Burning Spear) Igbe (Fela Kuti) Jikijela (Letta Mbuli) Lady (Fela Kuti) My Love is Free (Double Exposure) No Woman, No Cry (Bob Marley) Old Marcus Garvey (Burning Spear) Tomorrow is Forever (Dolly Parton) With or Without You (U2) This list is far from complete and notably won\\'t include tracks from Hip-Hop and House for they just don\\'t fit, maybe as a matter of prejudice, as in, \\\"how could I append KRS-One next to the mighty Fela Kuti\\\", or maybe such genres are simply incomparable.","tags":"arts","title":"top music tracks"},{"url":"http://tshepang.net/toxic-by-britney-spears","text":"I had developed a negative attitude towards Britney Spear's music due bad quality (though to be fair, I haven't listened to much of her work, all but the most popular few tracks). But there is one particular gem, Toxic , and I was surprised to find that it's critically acclaimed , especially since I reduced it to a guilty pleasure.","tags":"arts","title":"'Toxic' by Britney Spears"},{"url":"http://tshepang.net/up-with-donald-byrd-1964","text":"I thoroughly enjoyed Donarl Byrd\\'s superb album, \\\"Up With Donald Byrd\\\", most especially the masterpiece House of the Rising Sun and My Babe. I have listened to a few the guy\\'s albums and nothing quite comes close, in fact some are so bad that it\\'s strange it\\'s the same artist. Anyways, I went onto the interwebs looking for like-minded people and found one who disagreed , calling it forgettable. Either that\\'s a critic with a more sophisticated taste and much more listening experience, or she\\'s got twisted taste. I was actually surprised since I\\'m even tempted to call this the best Jazz album yet!","tags":"arts","title":"'Up With Donald Byrd (1964)'"},{"url":"http://tshepang.net/links-2011-01-10","text":"the greatest threat to religion a nice collection of links regarding scientific studies of religion [the single most beneficial thing we can do in order to make the world better place], according to Alonzo Fyfe How to Save the World ( via ) among the most controversial of Alonzo Fyfe\\'s posts (judging by the huge number of comments), Tivial Hobbies talks about the uselessness of things like watching sports and playing video games [the single most beneficial thing we can do in order to make the world better place]: http://commonsenseatheism.com/?p=9539","tags":"misc","title":"'links 2011-01-10'"},{"url":"http://tshepang.net/factors-affecting-choice-of-tools","text":"technical : speed resource-usage features stability non-technical : ease-of-use polish standards-compliance popularity politics support familiarity taste monetary cost","tags":"computing","title":"factors affecting choice of tools"},{"url":"http://tshepang.net/blog-of-note-well-see-matt-zimmerman","text":"I'm a regular reader of Planet Debian , so I frequently bump onto Matt Zimmerman's blog. This a Debian Developer who also happens to do paid work on Ubuntu as well (employed by Canonical). He writes clearly and with a sober and mature tone. It's very interesting when you see a software developer conversant with non-technical stuff, and able to write about it so well. I started with one post with an obviously interesting title, \" How to decide what to read (and what not to read)? \". This piqued my interest also because I've been thinking about my own activities on the web too. Also, his mention of News closely match mine, other than that I'm simply (mostly) not interested in traditional big news (presidents approves blah) and tabloids, and normally get enough of a dose from co-workers and friends, and mostly face-to-face. This led to another, \" Breadth and depth \", in which he touches on the social effects of web-enabled technology. This is a topic that has been beaten to death of course, but he fortunately keeps his contribution very brief and fresh, and I like that he doesn't claim to offer any solutions, but merely exploring them. And there was \" Internet discussion trends: from Usenet to micro-blogs \", where he discussed various ways forms of on-line discussion, which is the first topic of its type I've seen yet. He even dabbled with a bit of poetry in \" Breathing information \". Nice attempt. He also displays an insightful understanding of what package management in \" We've packaged all of the free software...what now? \". There's a whole bunch of gorgeous-sounding posts that I didn't care to read yet, and hope to keep the above list updated when I do.","tags":"computing","title":"blog of note: We'll See (Matt Zimmerman)"},{"url":"http://tshepang.net/great-customer-service","text":"So these guys at BMW Bavarian East Pretoria (it has since been closed), a motorbike dealership, got me impressed with their great customer service. The standard procedure is to lend customers a bike for a few hours to use during the day, which normally happens when one takes the bike in for service. My F650CS was giving me some trouble which actually perplexed them for more than those few hours... a few weeks actually. So why I says they rock: I wasn\\'t charged for the extra (perhaps dozens) hours of labour. I was lent a bike (actually 3, since the troubleshooting went for so long that they needed to sell 2 of those bikes in the meanwhile). Not sure if I should call this negligence, but there seems to be some deep trust these guys have for their customers, because no one cared to check if I could ride the variety of bikes they lent me. That\\'s gorgeous, especially considering that one of the bikes they lent me was the superhot BMW F800S . Of course there is also the element of them encouraging loyalty, but this still goes beyond the normal \\\"customer is king\\\" routine.","tags":"misc","title":"great customer service"},{"url":"http://tshepang.net/obama-administration-not-too-shabby","text":"Given that I have very little interest in American politics, I find some of the Obama administration\\'s achievements impressive (with great help from a refreshing presentation). ( via )","tags":"misc","title":"Obama administration not too shabby"},{"url":"http://tshepang.net/its-less-work-building-from-a-vcs-than-from-a-tarball","text":"tarball: find the website find download link download the tarball navigate to the tarball (using a GUI file browser) extract the tarball (using a GUI extractor) navigate to the extracted directory (using the shell) and finally... $ ./configure && make && sudo make install VCS : find the website find clone link clone the repository navigate to the cloned directory (using the shell) and finally... $ ./configure && make && sudo make install So, that's 2 extra steps for going the tarball way.","tags":"computing","title":"it's less work building from a VCS than from a tarball"},{"url":"http://tshepang.net/when-it-seems-ok-to-compromise-on-software-freedom","text":"Stack Exchange is a network of websites built to make the internet better by providing quality Answers to Questions on specific topics. Its flagship product is Stack Overflow , which is likely the single most important programming resource on the web. Part of the reason of this site\\'s success is the excellent community built around it. Among the sites that Stack Exchange has built is Unix & Linux , and it\\'s stated goal is to be THE place to get answers on non-programming topics related to Unix and Linux-based systems. Note that this family of comupter system is highly fragmented; there\\'s literally hundreds of them, though most can further be classified under few families: Debian (includes Ubuntu) RedHat (includes SuSE) BSD Given that there\\'s a lot of similarities between them, to have one unified place to ask questions about each of them rocks. Now that\\'s well and good, until one realises that these StackExchange sites run on non-FLOSS. Now, consider that there are FLOSS alternatives to these. Debian folk maintain and participate in an instance of one such alternative, named Shapado . This instance is a place where one can ask Debian-related questions, and is in essence a competitor to StackExchange\\'s Unix & Linux site, and this had me in a seriously painful dilemma: do I continue using the superior but non-FLOSS service or the inferior but FLOSS Shapado. The following evaluation makes the choice real easy: Debian Q&A : FLOSS (+1) ---> total=1 Unix & Linux : better community (+1), better site experience (+1), caters to more than just Debian (+1) ---> total=3","tags":"computing","title":"when it seems OK to compromise on software freedom"},{"url":"http://tshepang.net/tumblr-suckage","text":"update : after an unbearably-long downtime, I decided to make the switch, this time to Posterous (now-defunct). As much as I love Tumblr, I got a few complaints: performance for some tasks is really bad; the most annoying one is the time it takes for the Edit button to appear search is real bad; often it doesn\\'t find stuff I know is there; sometimes I have to re-run the search before seeing results Pages : I can\\'t use Markdown to edit them Pages : I\\'m not presented with the Edit button at all; I instead have to do it via the Dashboard, then click Customize, then click Pages, then scroll and find the page I wanna edit! horrible uptime I\\'m not sure if these problems will be fixed (I\\'ve reported one bug, without any real feedback). The collective of these problems makes me wanna search for another blog host. The challenge with the move is doing the laborious internal re-linking over again.","tags":"misc","title":"Tumblr suckage"},{"url":"http://tshepang.net/abusing-the-computer-genius","text":"Here's a part-fictional account of events that are largely my fault: Friend got a new laptop and I elect to install Debian (or whatever OS I find suitable at that moment) side-by-side with the pre-installed Windows. I show Friend around since he finds the interface unfamiliar, and I get a dry mouth explaining the advantages, while trying hard to avoid Windows bashing. He sort of agrees. I upgrade it later on (mainly because I'm hoping the new hotness will get their Wi-Fi hardware working). The upgrade breaks something else in the process, and I spend hours fixing it... Only to have them spend their computing lives in Windows since it's more familiar (as well as the fact the software that came with their cell-phone doesn't run anywhere else). We computer 'geniuses' all know that Windows has a nasty habit of overwriting the boot partition such that an already-installed OS is no longer bootable, so I gotta come over, to make it bootable again (and this is made worse by the fact that reinstalls are pretty commom when Windows gives trouble).","tags":"computing","title":"abusing the computer 'genius'"},{"url":"http://tshepang.net/great-honors-for-donald-knuth","text":"Such praise isn\\'t given everyday: I would say he is man of a stature similar to the stature of Leonard Euler in mathematics. Such men are not born every century... -- source","tags":"computing","title":"great honors for Donald Knuth"},{"url":"http://tshepang.net/wajig-2050-released","text":"Not sure, but I think this is my proudest release yet of wajig so far. Among other things: I cleaned up the Debian packaging with some great help . I promise that it was seriously ugly. I guess nobody was motivated enough to clean it up... including me. I added a fresh help system, and cleaned up the documentation machinery while at it. Increased the use of aptitude, where it makes sense. Made some commands redundant by introducing better ones. Some polishing (consistency fixes).","tags":"computing","title":"'wajig 2.0.50 released'"},{"url":"http://tshepang.net/a-talk-on-what-software-engineering-should-be","text":"I really enjoyed this humorous, eye-opening, and informative talk that draws parallels between software and traditional engineering disciplines. The presenter really did good research to prepare for the presentation (which he heartily enjoyed), but unfortunately flies too quick near the end when realizing he\\'s out of time, without properly explaining what he proposes as real software engineering.","tags":"computing","title":"a talk on what software engineering should be"},{"url":"http://tshepang.net/my-debian-package-management-setup","text":"Much of this is obsolete: I no longer use debmirror and no longer keep the entire binary repository of i386 arch. There\\'s a useful tool in Debian named debmirror. It\\'s function is to create and manage a partial copy of an official Debian repository, and I use it to create 2 repos: an entire i386 Debian repo for Squeeze an entire source Debian repo for Squeeze How this works is that I\\'d run the following command (an example for the source repo): /usr/bin/debmirror --verbose --progress --host=ftp.sun.ac.za --passive --dist=squeeze --root=ftp/debian --section=main --method=ftp --arch=none /home/wena/.repo_src (look at debmirror\\'s manpage to see what all those options mean) The result is that I\\'ll be having \\~30GB of Debian locally (for a comparison, see total Debian archive size ). That\\'s a lot of data, most of which I\\'ll never use, but: I do this as a matter of convenience; I want to be able to install anything when I\\'m having a fresh machine, and internet access is not yet fast and cheap in South Africa. I also like to mess around with the packaging system, deleting and reinstalling packages on a whim, and I don\\'t want to be waiting for some file to download when I do that kind of tinkering. Now, since it\\'s ridiculous to do this every time just to have the most recent packages (a weekly update is maybe >1GB of data), I\\'ve found another wonderful tool named reprepro. It\\'s purpose is to create a custom (unofficial) Debian repo. It\\'s a far more advanced tool than debmirror, and I think it can do what debmirror does (but I don\\'t yet care to learn how). Moving on, here\\'s the relevant entries from my /etc/apt/sources.list file: ``` {.sourceCode .sh} local repos (debmirror) deb file:/home/wena/.repo_bin sid main deb-src file:/home/wena/.repo_src sid main local repo (reprepro) deb file:/home/wena/.repo_local cache main remote repo deb ftp://ftp.sun.ac.za/ftp/debian/ sid main non-free contrib ``` So, what I do on a semi-regular basis is run: $ wajig update && wajig upgrade The newly-updated packages are stored in a cache so that a reinstall doesn\\'t have to fetch from network again. After this I run: $ reprepro -vv --basedir ~/.repo_local includedeb cache /var/cache/apt/archives/*deb This updates the local reprepro repo and after which I can then remove the cached packages: $ wajig clean I do that because they are now available in my reprepro-managed repo. That now means that I got a massive mirror managed by debmirror and a smaller one managed by reprepro, and I have these on an external drive for in case I want to install Debian anywhere. What else my reprepro repo has is some other packages like skype and oracle-xe , as well as an odd packages from Debian Experimental . Not so simple I guess... but works so well for my needs.","tags":"computing","title":"my Debian package management setup"},{"url":"http://tshepang.net/apt-get-vs-aptitude","text":"Did I mention that I love Stack Overflow ? It\\'s a Q&A site for anything that is related to computer programing, and the creators (luckily) didn\\'t just stop there. They went on to create a bunch of other sites using the same technology and branding, covering other topics (and they aggregate the best new content from those sites). Enough with background info. What prompted this post is the answer to the question, \\\" what\\'s the difference between apt-get and aptitude? \\\". This is from one of their sites, Unix and Linux , and the answer is really thorough. Part of the question was \\\"what the heck is wajig\\\" and I really liked how that part was handled as well. It serves as a nice reminder of why the heck I\\'m working on wajig in the first place... it rocks!","tags":"computing","title":"'apt-get vs. aptitude'"},{"url":"http://tshepang.net/on-anarchism","text":"There have been many great benefits I got from the Debian project , among the most important being an introduction to Anarchism, a radical political theory that opposes all forms of official hierarchy (capitalism, communism, religion, etc), arguing that such things tend to result in oppression. How I got access to that is via a package known as anarchism , a set of documents formally known as An Anarchist FAQ . It\\'s a very comprehensive coverage of the theory, and going through it brought both enlightenment and frustration, for it explained so many things that I took for granted, while pointing out the causes. The theory is basically presented as the best possible society humans could ever have. As for me, I\\'m not sure if it\\'s actually true, although I lean more towards it than alternatives (and I haven\\'t read anything extensive on competing theories, but intuition/experience tells me that capitalism, communism, and religion all suck tremendously). I need more study to be more sure, especially because the objections to Anarchism are heavy. To me it\\'s a scarier concept to introduce yourself as an anarchist than as an atheist or a homosexual, because the implications are greater. In fact, they are so great, that the word anarchy itself has been associated with chaos. That\\'s an expected knee-jerk reaction you\\'ll get when you punt things like \\\"I reject all forms of official authority, including all governments!\\\". But it would be nice if people who shudder at the concept to spend time with that great document . My attraction to the theory perhaps is due to my radically liberal tendencies (e.g., I don\\'t see anything wrong with fucking my biological mother, provided it\\'s consensual, and there\\'s no pregnancy). I don\\'t know where these tendencies originate, considering that I was a religious nut back in my early teens, scared of the concept of hell and similar forms of bullshit.","tags":"misc","title":"on Anarchism"},{"url":"http://tshepang.net/developer-of-note-martyn-russell","text":"Martyn Russell is Tracker \\'s release manager, and being a fan of the project since the early pre-1.0 days, I have quite familiar with his work. But what triggered this honor is his work on Tracker Needle (written in Vala), Tracker\\'s new GUI search tool, to replace the inadequate Tracker Search Tool (written in C). I\\'ve taken a look, and the design is pretty modern (check the video he gives in his announcement ). But Martyn has of course done far more for Tracker, and does a pretty damn good job managing the release. One thing he did outside of Tracker that I\\'m aware of is the re-design the http://gtk.org page, giving it a very modern look (which it desperately needed).","tags":"computing","title":"'developer of note: Martyn Russell'"},{"url":"http://tshepang.net/argument-from-beauty","text":"So there\\'s a bunch of arguments for the existence of God , and learning about them is actually fun for me. I find the Argument from beauty , though not the strongest of all, the most seductive. It\\'s ever so nice when I joke about it, like when I see a super-hot gal (the sort you\\'d be glad to eat her shit just to have a taste of her pussy) or enjoying a wonderful meal (like the one I enjoyed last weekend when visiting Botswana). I\\'d throw something like, \\\"How could such a gal have evolved to this form through blind forces of nature! God-did-it!\\\".","tags":"misc","title":"Argument from Beauty"},{"url":"http://tshepang.net/trusting-ones-feelings","text":"I never trusted my feelings. I always thought that feelings were the prejudices and bigotries that I was raised with, and were never to be given any weight unless I could put a solid foundation of reason underneath them. — Reflections on Rejected Moral Theories","tags":"misc","title":"trusting one's feelings"},{"url":"http://tshepang.net/developer-of-note-philip-van-hoof","text":"There hasn\\'t been anyone who has publicly talked about Tracker as hard as Phillip van Hoof ever since the project was started a few years ago. He has recently outlined the current improvements and future plans to make it rock even harder (and of course I understand very little of it, since there\\'s jargon all over the place, and Tracker actually covers new ground).","tags":"computing","title":"'developer of note: Philip van Hoof'"},{"url":"http://tshepang.net/developer-of-note-alexander-reichle-schmehl","text":"Debian got so many people doing what seem like thankless jobs in an effort to improve it. One of those guys is Alexander Reichle-Schmehl (look at my struggling tongue), who has for a number of months been pushing an initiative to fix a bunch of RC bugs weekly ( example ). This developer has been busy keeping track of RC bug counts , reducing the need for me to go check myself.","tags":"computing","title":"'developer of note: Alexander Reichle-Schmehl'"},{"url":"http://tshepang.net/nice-review-of-perl-best-practices","text":"I'm a sucker for humorous religious allegories: I always punctuate its disclosure with an outraged \"preposterous!\". Around mid-section, the initial refutation unavoidly [sic] morphs into a \"hmmm, I can see his point.. but it ain't for me. It just doesn't jive with my vibes\". By the time I've made it to the end, however, it is rare indeed that I haven't seen the light, donned the ritual sackcloth and ashes, sworn to atone for my sins and to walk the straight and narrow [path] from now on. — source","tags":"computing","title":"nice review of 'Perl Best Practices'"},{"url":"http://tshepang.net/more-on-wajig-development","text":"I was given commit access to wajig project, and did a heck of a lot of clean-ups, and in the process, learning much about unit testing. I aimed for a comprehensive solution, partly to avoid regressions, since I intend to do lot of code changes. I also looked at converting wajig\\'s GUI from Glade to GtkBuilder .","tags":"computing","title":"more on wajig development"},{"url":"http://tshepang.net/my-first-wajig-contribution","text":"Due to my love for the application Quod Libet , I have been contributing a bit to it. But due the complexity of the code, I looked elsewhere, and found a favorite tool package management tool, wajig , and was surprised to find that it\\'s not kept in a VCS. Useful as it is, it\\'s code looks like a collection of hacks, so I started by offering a PEP-8 fix. [ a day later ] Inspired by that offer, the nice guy that founded the project created a VCS repo for it, and even offered me commit rights . I was amazed by the trust.","tags":"computing","title":"my first wajig contribution"},{"url":"http://tshepang.net/my-pet-project","text":"I\\'ve been working on a personal (unofficial) project for some weeks now at work whose goal is automated testing of the system I maintain at work. The system involves interfacing with Oracle, and the UI I used for that is the retarded (blocky, and ugly UI, resource hog) Oracle SQL Developer. I couldn\\'t find any real alternatives after a cursory search, and had to live with this pain for too many months. I decided to write something in Python to achieve the common tasks of updating and viewing specific parts of the DB. Having succeeded, I decided to turn the script into a test suite that would eliminate the laborious and error-prone process of doing the testing manually, a process which, among other things, involves tweaking xml files, and using that damned SQL Developer! I\\'m not-so-many-hours away from completing this 200+ line masterpiece of mine, and here\\'s what I used: Python: 3.1 modules: xml.etree.ElementTree , configparser , sys , time 3rd party module: [cx_Oracle] (which prompted me to write instructions for installing and setting it up)","tags":"computing","title":"my pet project"},{"url":"http://tshepang.net/new-blogging-platform","text":"Blogger\\'s post editor is so bad that I\\'ve been promising myself to move elsewhere for quite a while. I checked on Super User what their recommendations are and they pointed mostly to Wordpress (which I found too ugly) but someone there also pointed to Tumblr , which I never heard of before. It really is more than a blogging platform (which was all I was actually looking for), and it does look good except for the fact that I miss the sidebar functionality which allows me to place things like favorite blogs, favorite posts, etc.","tags":"misc","title":"new blogging platform"},{"url":"http://tshepang.net/developer-of-note-aleksander-morgado","text":"The Tracker team got this new guy, Aleksander Morgado , doing fabulous work on Tracker\\'s extraction code. He does so while also providing thorough info on his activities. One thing that prompted me to honor him is his work on adding options to disable stop words, as well as to enable number indexing, fixing an old gripe of mine.","tags":"computing","title":"'developer of note: Aleksander Morgado'"},{"url":"http://tshepang.net/xfrun4-rocks","text":"The one desktop environment I live in is GNOME, which also happens to be my favorite too. It\\'s got quite a lot of things that can be better of course and one of them is its run dialog. I once bumped into that run dialog of Xfce 4 and have used it since I discovered it years ago . What I like about it is, unlike GNOME\\'s, it doesn\\'t auto-complete using a large list of possible commands (presumably on the shell\\'s PATH) but rather a smaller list consisting of commands I have actually run previously. What\\'s more is that it makes those commands persistently available as history (which GNOME\\'s does as well by the way). As if that\\'s not enough, it will store only commands that were successfully launched to avoid storing typos and failed commands in history. These features makes for a superb piece of software.","tags":"computing","title":"xfrun4 rocks"},{"url":"http://tshepang.net/i-love-the-debian-supermarket","text":"I love the fact that whenever someone mentions a piece of software, I can quickly do a aptitude search piece-of-software knowing that there\\'s a good chance that it\\'s somewhere in the Debian repository. That means I won\\'t have to get to the website looking for a download link, which, other than saving time, means I just have to deal with just one interface as well as the confidence that piece-of-software is well-integrated with Debian itself, given Debian\\'s exacting quality standards. Debian really is a gem! [ sidenote ] The term, supermarket , as used in this context, was coined by some Debian Developer, although I mean it in a different and more positive manner.","tags":"computing","title":"I love the Debian supermarket"},{"url":"http://tshepang.net/python-people-vs-java-people","text":"Now this is one heck of a controversial quote by the best computer programming blogger in my memory: ...when you choose a language, you\\'re also choosing a community. The programmers you\\'ll be able to hire to work on a Java project won\\'t be as smart as the ones you could get to work on a project written in Python.","tags":"computing","title":"'Python people vs. Java people'"},{"url":"http://tshepang.net/stack-overflow-rocks-hard","text":"I can't believe that I only now discovered Stack Overflow . It's an excellent programming Q&A site which also happens to possess the best user interface and design I've ever seen on the web (if memory serves well). [ update : this great design is shared by other sites in the family ] [ sidenote ] Within a few minutes of asking some question , I received a number of high-quality answers. It's amazing!","tags":"computing","title":"'Stack Overflow' rocks hard!"},{"url":"http://tshepang.net/developer-of-note-michael-biebl","text":"So I really do honor all Debian Developers especially when they are named Michael Biebl . This guy is the lone maintainer of Tracker and rsyslog in Debian (among others). Not just that but he is also a co-maintainer of a large number of GNOME technologies (gnome-session, dbus, avahi, gnome-power-manager, gvfs, hal, network-manager...). I love especially his role as some sorta QA for Tracker (he\\'s done a terrific job of it --- most recently offering a bunch of patches to fix some linking problems in the code). Oh, and I\\'m not the only one who noticed --- the great Josselin Mouette , did offer accolades too for Michael\\'s other work.","tags":"computing","title":"'developer of note: Michael Biebl'"},{"url":"http://tshepang.net/a-visit-to-botswana","text":"This past weekend, I finally went to this neighbouring country of ours, Botswana. This was the first time I ever left South Africa. I was welcomed by wonderful people, and the visit was limited to its largest city --- Gaborone --- which is beautiful, sparse, and vast, when compared to my country\\'s own cities. One of its residents got shocked when I argued that South Africa doesn\\'t have a unifying identity; I argued that the country is too diverse to have such. Instead she argued that such is country\\'s very strength which led to her pointing out the following wins: diverse (and therefore strong) economy; she stated Botswana is over-reliant on diamonds diverse tourist attractions; Botswana\\'s tourism is nearly non-existent in comparison diverse export market; Botswana is all diamonds, again press freedom - my input, which she agreed with high foreign investment diverse cultures high media production standards; Botswana has only one tv channel and the little exposure I got of it expresses amateurish levels of production passionate people (highlighting freedom fighters that enabled black rule; highlighting the toyi-toyi culture) The conversation opened my eyes a little bit, that there\\'s a lot to appreciate about South Africa. As I talked to more Botswana residents, and read one critical piece of journalistic writing, Botswana, despite being far more peaceful and having superior living standards (minimal crime, kindly people, minimal poverty, far-reaching welfare), has some serious smelly bits: abortion and homosexuality are illegal. I was shocked by these two, and most especially about the second one. What the fuck!","tags":"misc","title":"a visit to Botswana"},{"url":"http://tshepang.net/my-patches-committed","text":"So, two of the patches I created for Tracker have been committed (commit 1 , 2 )! I consumed much info (and time) during the process, which entailed looking at Git usage (branch, checkout, commit, format-patch, ...) through Philip van Hoof \\'s guidance. Philip van Hoof also fixed a hard-to-reproduce bug which was a pain for me. The fix is a workaround for a GTK+ bug.","tags":"computing","title":"my patches committed"},{"url":"http://tshepang.net/so-much-learned-via-tracker-bugfixing","text":"It\\'s been maybe over a year since I\\'ve submitted a patch to any FLOSS project and have done so three times today , all for Tracker , perhaps my most favorite of all pieces of code. This started with me nagging Martyn Russell , Release Manager for Tracker, about the suckage which was exposed by my usage of Tracker\\'s preferences GUI. He proceeded to encourage me to write a patch, which I did. Later on Michael Natterer of GIMP fame guided me on some UI polish work. I consumed much info (and time) during the process, which entailed looking at the following: GTK+ API Tracker\\'s configuration internals. 1st look at Vala , the language with which the preferences GUI is written. Tinkering with Glade , a RAD tool for quick GUI development, which makes things so much easier, especially considering that GTK+ isn\\'t so straightforward.","tags":"computing","title":"so much learned via Tracker bugfixing"},{"url":"http://tshepang.net/debate-mike-licona-vs-richard-carrier","text":"I recently listened to a 2.5 hour-long debate between two scholars, Richard Carrier and Mike Licona , which alerted me to the fact that Jesus\\' Resurrection is regarded, at least to Christian apologists, to be very central to the Christian faith (here\\'s an unsatisfactory review ). I became far more impressed with Richard\\'s performance than Mike\\'s: Mike was the only one who displayed some arrogance (a silly joke here and a chuckle there, unsuccessfully forcing his opponent to use the word delusion instead of hallucination, etc.). Richard was more convincing (and the knowledge he displayed of this topic is mind-numbing). He was more clear with his arguments. He was seemingly more prepared (his opponent probably thought he was going to be a walkover). Mike was a bit embarassing at times when mentioning The Passion of Christ, especially the time when he was praising Jesus (I cringed a bit there), and Richard, by the way, ignored references to that movie. Based on these points, I vote for Richard as the winner, with the disclaimer that the latter part of the debate was getting too technical for me to follow thoroughly. sidenotes : See Luke Muehlhauser \\'s well-argued take on the issue of the Resurrection. Luke\\'s blog, Common Sense Atheism ( praise ), apparently has [the largest collection of links to atheist vs theist debates] and is therefore a great resource.","tags":"misc","title":"'debate: Mike Licona vs Richard Carrier'"},{"url":"http://tshepang.net/common-sense-atheism-rocks","text":"I've read dozens of posts by Luke Muehlhauser at his Common Sense Atheism site, among the best blogs I've read ever, which also happens to be the first and only atheism blog I regularly read. The guy regularly manages to enthrall me with his thorough and very broad outlook on the topic, managing to put words where I'd fail (or even sub-topics I wouldn't expect anyone would write about), his intelligence (EG when debating some real smart theists), the courage of promoting some off-beat ideas , not to mention the quality of much of the commentary he receives from readers. What makes these even more impressive is that the guy is in the 1st half of his twenties. [ sidenote ] My favorite posts are too many, so here's his own links to what he deems most useful . He has also received serious praise from his other readers (check the comments here )","tags":"misc","title":"'Common Sense Atheism' rocks!"},{"url":"http://tshepang.net/my-deconversion","text":"One of the top atheism bloggers today, Luke Muehlhauser , posted a gorgeous snippet by a Christian who happens to be unhappy with the contents of the Bible, a story which is scarily similar to mine. Often people ask me when I became atheist, and I can\\'t answer them with a date since it was more of a process, and reading the Bible (the entire thing) was among the earliest steps towards that end... the God I imagined couldn\\'t have allowed things as horrendous as portrayed in the Old Testament. I kept praying, asking God to help me keep my faith, but no one answered :(","tags":"misc","title":"my deconversion"},{"url":"http://tshepang.net/tainted-teresa","text":"While I was thinking of the topic I covered in noble dreams , Mother Teresa appeared in my mind due the imagery of nobility that she possesses. I decided to go check out her story for inspiration, and came back disappointed and even shocked at much of her (alleged) shortcomings. Nevertheless, I was captivated by her words: [our mission is to take care of] the hungry, the naked, the homeless, the crippled, the blind, the lepers, all those people who feel unwanted, unloved, uncared for throughout society, people that have become a burden to the society and are shunned by everyone. -- source","tags":"misc","title":"tainted Teresa"},{"url":"http://tshepang.net/noble-dreams","text":"update : I am not running a business anymore (I gave up trying), and the major dream mentioned here died with it. So am keeping this here for its historical value... it\\'s also not bad writing. I was having a discussion with a colleague over chat software, asking her about her major dreams. After some deliberations, and after revealing my own dream of helping a million people, I was touched when she stated she wanted to open a clinic offering free services as well as a place to help unemployed mothers. I immediately wished I was rich enough to grant her the dream. One reason I asked this question is I\\'m actually interested in what\\'s in other people\\'s minds and am often looking for inspiration. Her dream reminds of a fantasy I once had, like if I had a billion Rands (divide by \\~8 to get US\\$), what I\\'d do is build a hospital and fund it for years on end. That\\'s largely because SA public hospitals generally stink, both literally and figuratively. And while on that topic, I was recently discussing with a friend that there were other issues that escalated the problem before we even talk of insufficient funding: efficiency and corruption. While still on the dreaming side of things, someone mentioned that a dream that truly drives a person is normally ego-driven. Reminds me of a great dream of becoming a DD (Debian Developer) which kinda died. An acquaintance also has an ego-driven dream of owning a private medical lab. He did however admitted that it was a negotiable dream, and that qualifies it as a fantasy. While still on medical things, there\\'s yet another acquaintance whose dream it is to build a clinic of some sort, but I actually forgot the details. What\\'s interesting however is that when I asked specific questions like how big it is and some such, she couldn\\'t answer, stating not having visualised it that far. I have learnt the importance of visualising a dream thoroughly because that solidifies it pretty well, helping it get further away from the fantasy category. Another friend also touched me when he mentioned one dream of setting up a soup kitchen for homeless people. Noble stuff that. Dreams are great because focusing on them help reduce the pain of hardship. They can be as simple as \\\"the salary will help me pay that debt, and maintain my lifestyle too\\\", and those are worthwhile dreams too, at least enough to have millions of displeased workers wake up every morning to get to work. I\\'ve also met quite a number of people whose main dream is retirement. It used to be my driving passion and motivator in building my business, but I\\'m now more driven by what I\\'ll do with the ample time I\\'ll have at my disposal after that moment, and even more than that, am driven my the million lives dream (helping a million people), most especially the ways in which I\\'ll make that happen: starting worker co-operatives, free IT training, FLOSS (Free/Libre an Open Source Software) development funding... Actually noble dreams, the \\\"I want to help improve the world\\\" sort, are my favorites and I always get excited when someone mentions such, not those of \\\"I want to have this house and that car\\\". I probably am dishonest with myself, but as much as I drool at the sight and thought of a Bentley Continental GT, pumping the retail cost of that beauty into feeding a 100 hungry kids for a month is more my thing. I do of course have non-noble dreams: travelling Africa and the world for fun, acquiring a decent entertainment system and a serious gaming PC (am I a sucker for hardware-pushing high-end games!), visit international film festivals (am I a sucker for movies!), and even produce some short movies, preferably animated, preferably with FLOSS (I am a politically-charged wannabe!). A friend of mine, a sports sucker, wants to sponsor one kid to go professional in that field. Having loved to have had such an opportunity as a kid, he wants to ensure some deserving kid doesn\\'t meet the same fate (and end up in career s/he dislikes). I know at least two other highly-gifted people who didn\\'t further their sporting careers due to lack of support (likely financial). That\\'s painful actually and shouldn\\'t happen to anyone. Another friend of mine wants to open a dancing facility to help get kids off the streets. I\\'m not sure if that\\'s a negotiable dream or not (it didn\\'t sound like a priority item, neither did the sports sponsorship thing by the way) but we are to find out in due time... A brother of mine, a gifted and multi-talented (composer, producer, arranger, mixer, vocalist, sound engineer, writer) musician, wants to help groom and promote a number of small-time artists. That would really help in an industry where talent isn\\'t enough to propel one further. Also, this is in an industry where too many lacking that talent are propelled forward regardless.","tags":"misc","title":"noble dreams"},{"url":"http://tshepang.net/there-had-better-not-be-life-out-there","text":"I thoroughly enjoyed re-reading an essay on why we better hope we don\\'t discover extra-terrestrial life. It\\'s 8 pages of superb writing and is pretty thorough (check how he explains the myriad possibilities, and how he challenges even those), and nearly as exciting as the 1st time I read Richard Feynman\\'s \\\" There\\'s Plenty of Room At the Bottom \\\". I consider this essential reading for any enquiring mind.","tags":"misc","title":"'there had better not be life out there!'"},{"url":"http://tshepang.net/illadelph-halflife-1996","text":"This is undoubtedly the best album by The Roots , and includes timeless acts like: Section Wot They Do Respond/React Push Up Ya Lighter No Alibi Ital (The Universal Side) Listening to Section is actually what prompted me to write this post, for I loved it so much that I wondered if Next Movement (from their later [Things Fall Apart album][]), which I have for a long time regarded as the best hip-hop track ever, deserves it\\'s position at the top of the group\\'s work, and therefore removing it from the list of hip-hop landmarks .","tags":"arts","title":"'Illadelph Halflife (1996)'"},{"url":"http://tshepang.net/python-perl-and-now-java","text":"I\\'m grateful that there\\'s so much I\\'m learning at my new job , stuff I wouldn\\'t really learn on my own, like Perl (this one out of curiosity, especially because it\\'s a major competitor of my favorite, Python). I write this post in response to the fact that now I will be learning Java, what I secretly swore I\\'d stay away from, not because it\\'s bad, but because it\\'s hard to find anyone favouring it in my world (Debian, GNOME, Python), a world that proclaim it to be a disgusting pile of shit. Anyways let\\'s see how the ride will pan out. As for Perl, I found its string-handling capabilities exceedingly powerful but its syntax ugly and over-varied --- too much of a free-form language. That\\'s bad for someone used to the gracious elegance of mighty Python. If I could stay away from it, I would!","tags":"computing","title":"'Python, Perl, and now Java'"},{"url":"http://tshepang.net/the-mighty-mitch-sala","text":"If ever you admire someone excessively to a point of nearly letting out a tear, you tend to get worried, perhaps due to pride, that you may be too obsessed. This was a case when Mitch Sala, an impossibly-successful Australian businessman, who undertook a job to inspire more people to be successful in Amway. He came through to South Africa and made a powerful presentation, \\\"and I even got to shake his hand!\\\"","tags":"misc","title":"the mighty Mitch Sala"},{"url":"http://tshepang.net/discarding-scribes-for-geany","text":"The version of Scribes in development didn\\'t prove too satisfactory after a while (black background which I didn\\'t care to investigate how to revert to normal, among whatever other trouble I don\\'t remember) and there was me also unloving the idea of switching text editors, so decided to get stuck with Geany , and am not complaining much. It\\'s been a year-and-a-half of pleasure and pain and it was well worth it.","tags":"computing","title":"discarding Scribes for Geany"},{"url":"http://tshepang.net/developer-of-note-manoj-srivastava","text":"Manoj Srivastava has for a number of years been Project Secretary, a very key role in Debian, a role where the incumbent runs project voting. What prompted this post is his recent resignation , which was encouraged by hostility towards the handling of the recent controversial ballot. As evidenced by the various supporters and my own experience, he happens to be among the wisest of all DD\\'s. He is also among the most senior of all, having been involved since 1995.","tags":"computing","title":"'developer of note: Manoj Srivastava'"},{"url":"http://tshepang.net/reprepro-saved-my-live","text":"Much of this is obsolete: I no longer build my own Debian packages. That\\'s a joke title, but that fabulous tool really did help me a lot. When doing package builds, all I need to run is the following after a build: {.sourceCode .sh} $ rm *udeb $ reprepro --basedir ~/.repo_directory includedeb sid *deb $ sudo apt-get update The first command removes debian-installer packages which I don\\'t need, the second takes the remaining packages and adds them into the reprepro-managed Debian repository while also making them available in the Packages file, and the third updates the system\\'s apt database in order to pick up the changes. Also, if I want to get rid of something from the repo, all I do is: $ reprepro --basedir ~/.repo_directory removesrc sid glibc I don\\'t know why anyone would love to remove glibc binary packages, but it\\'s that simple. Achieving this used to be painful before I discovered reprepro, for I did the whole thing manually, which was not scalable since old packages were sitting rotting in the repo, making it grow beyond 30GB (it now is about 10GB). This also meant that I ran \\'apt-ftparchive packages\\' on the entire .debs each time I wanted an updated Packages file, and that was dozens of minutes of heavy I/O. This painful life has been going on for a number of months, and am stupid that I didn\\'t search harder for a better solution. Before doing things this way, I was making use of the nifty APTonCD , but it started to become unusable due to excessive memory consumption after some system updates. It\\'s not clear where the bug lies, nor do I know if it\\'s a known problem, which I didn\\'t report because I was using Ubuntu\\'s package, a much improved and re-written 0.1.98, as opposed to Debian\\'s \\'bug-free\\' 0.1 (though I later discovered the bug to exist when running the package in Ubuntu 8.10 too). an update on how I do things now","tags":"computing","title":"reprepro saved my live"},{"url":"http://tshepang.net/gnome-killer-app","text":"GNOME system monitor applet it is. Many times when I\\'m thinking of using a different desktop suite, I know that I\\'m not gon have an equal of GNOME\\'s system monitor applet. In Debian, this applet defaults to displaying CPU usage but can be set to display more, including memory and hard disk usage. This is among the things I add to the panel on every fresh install (for I always am curious what\\'s up with my system). Given how useful it is, I now wonder why Debian doesn\\'t add it on the panel by default, especially that many new users won\\'t even be aware it exists in the first place. Clicking on that applet launches a more comprehensive system monitor which has 4 tabs (notebooks in GTK+ speak): a recently-added one that displays high-level system info (processor model, RAM capacity) which was a much-needed equivalent of Windows\\' own utility one that shows mounted filesystems (pretty handy really) one that displays live CPU, RAM, and network usage info, which recently (perhaps GNOME 2.22 released March this year) received a major facelift and last and least, the one that got a process monitor that feels like a painfully stripped-down top (from procps)","tags":"computing","title":"GNOME killer app"},{"url":"http://tshepang.net/scribes-satisfies-some-more","text":"I\\'m currently running development version of Scribes (from bzr repo) and it got fixes for two very annoying bugs: On opening a non-UTF8 file you\\'d get a message asking you to open it via the app\\'s file-selector, an uncomfortably long way around it; the version from bzr offers a choice of the encoding and then we live happily ever after. A worse problem that occurred when opening the file described above is that on closing the error dialogue, all other open Scribes windows would also close. All what this means is that Scribes remains installed on my machine(s). sidenote : Code-folding is still absent although I won\\'t need to use it since Geany does a nice job already.","tags":"computing","title":"Scribes satisfies some more"},{"url":"http://tshepang.net/1-more-machine-2-less","text":"Since I\\'ve departed from previous job, I\\'ve lost access to two machines , but more than made up for it by acquiring an Acer Travelmate 6592, a feature-rich laptop complete with wireless connectivity (802.11a/b/g), Bluetooth, card readers, fingerprint scanner, webcam, Firewire, and even age-old DB9 serial port, while also not being short on specs (Intel T7500 processor, 2GB DDR2, 250GB HDD). Even better, unlike those two machines, I also get to take it home.","tags":"computing","title":"'1 more machine, 2 less'"},{"url":"http://tshepang.net/ubuntu-810-impressions","text":"I haven\\'t ran Ubuntu since 7.04 and gave 8.10 a try recently, primarily for doing wireless web connection at new job, and also that our sysadmin showed it to me in action with its NetworkManager 0.7 glory in action and had the installer handy. As I\\'ve come to expect from Ubuntu, the defaults artwork just looks gorgeous and with an especially stunning desktop background. It was also the first time I actually got to experience the 3D desktop effects that people have been making noise about these past several months (I did try this before, on Debian, but it was a mess with me having to go see README.Debian thing and still not managing, while in Ubuntu\\'s case, it was mere clicks away which I found through the handy Ubuntu user manual, which is easily accessible on the GNOME panel, and that\\'s what Debian desktop needs). Me became happy with Firefox which remembered the previously-visited paths (via the back-button) on session-restore, a feature I often miss when working with Epiphany. Some warts I\\'ve seen so far: The installer\\'s insistence on running the whole desktop before installation sucks because it really prolongs installation, and made worse by a lack of a visible alternative option. The feature I once praised in debian-installer, which informs one of the limits whithin which one may resize existing hard drive partitions, is absent in Ubuntu\\'s installer. The graphical partitioner does however looks real slick. Does not remember running apps when session is restarted. And I\\'ve already experienced 2 system freezes after running some updates, and the sort where I have to force machine reset.","tags":"computing","title":"'Ubuntu 8.10 impressions'"},{"url":"http://tshepang.net/farewell-at-old-job","text":"I was yesterday honored with a farewell party at my company, at which I worked as integration technician (opto-electro-mechanical engineering industry) for nearly five years. And there was even chocolates for me to take home with, while having people throwing accolades at me like I was sort of useful... I really should be thankful for the accomodation (and monies) I was granted and am excited for the next challenge .","tags":"misc","title":"farewell at old job"},{"url":"http://tshepang.net/my-1st-python-tool","text":"A senior of mine at my current job has asked me to write a tool to convert from UFF format to csv for easy spreadsheet processing, producing results that proved most beneficial to me (the path towards code mastery). The tool is less than 200 lines of Python code, and I even got a peek at the necessary changes to have it run on Python 3 (and successfully doing so), as well as experiencing the relatively unchallenging problems of getting it to run on Windows XP (it was developed on Debian). Of course I would not have bothered had the requirement not been getting it to run on that most popular of end-user OSes. But Python\\'s cross-platform nature makes it easy, and their work on getting the supporting suite (installer, IDE, Python shell) easy to install and run on Windows deserves serious respect. By the way I haven\\'t so far learned the importance/use of classes so the entire thing is in functions. And the code is also extremely slow (and even slower on WinXP) and only does basic checks for the validity of the source file to be processed so will loudly crash on corrupted files. Other than that, the tool is pretty robust and made my \\'client\\' real happy, considering the previous tool was really broken by design (a pain to work with, being muddled with severe limitations) and also relied on Matlab being installed.","tags":"computing","title":"my 1st Python tool"},{"url":"http://tshepang.net/favorite-laptop","text":"The laptop that I previously mentioned is named Compaq/HP nx7010 and is the most favorite I\\'ve ever used (despite that it\\'s only the second laptop I\\'ve ever used heavily). I suspect I like it mostly because of the feel of the keyboard, and its 1.7GHz Pentium M is really more than adequate for the modest tasks I throw at it; and its only set-back is the placement of the 3 USB ports - at the back. It\\'s a pity that I\\'ll have to leave it behind since I\\'m changing jobs . I also use an external USB mouse, which also enhances the experience. [ update ]","tags":"computing","title":"favorite laptop"},{"url":"http://tshepang.net/me-got-meself-a-coding-job","text":"I had one of the most exciting moments in my life when I got offered a job at a software development company (the title is Analyst: Software Engineering). I don\\'t even know what my planned-for tasks are, and I was all the more surprised because I think I didn\\'t do well at the interview. Great news is I didn\\'t expect a coding job so soon, especially given I don\\'t have previous professional exposure. I am an electronic technician (lesser than an engineer) by trade and am pretty unhappy in my current job (testing, calibration, and fault-finding of gyro-stabilised airborne surveillance/observation systems). That\\'s partly because I don\\'t really get challenged since I\\'m on a production line. I do strongly doubt I\\'d be job-hunting was I in development/engineering. Best of all however is I\\'ll be working on software, a dream job really, considering I love computers and all, and specifically the software part of it. Electronics is fine too, but the last time I really got close to it was back in school, and I\\'m here talking of design, not \\\"testing, calibration...\\\". How lucky can one get!","tags":"misc","title":"me got meself a coding job"},{"url":"http://tshepang.net/ubuntu-810-looks-good","text":"Ubuntu 8.10 Beta has been released and, if the annoucement is to be relied upon, things look good. What stands out above all else for me is \\'guest sessions\\' which allows users who don\\'t have login credentials access to the system. It\\'s interesting that such a thing has been non-existent (or at least I don\\'t know how to set it up) in the distros I\\'ve used so far, and really is useful, EG when you just wanna play some music from a machine. Many a time I get glad when easily getting into a Microsoft system even though that compromises security, a problem easily fixed in this release\\'s inclusion of easy encryption of user folders, which I suppose should hide confidential data from prying eyes. That\\'s not to say I\\'m gon be running an Ubuntu system anytime soon, especially given that I\\'m rather happy here (okay, sometimes; I mean how long am I going to wait for GNOME 2.24 to reach Sid) in Debian-land of course, and can only wait for those features.","tags":"computing","title":"'Ubuntu 8.10 looks good'"},{"url":"http://tshepang.net/enjoying-net-connection-at-home-finally","text":"After suffering with being forced to access the net on Windows XP for over 2 weeks , I\\'m glad things turned out as I envisioned for I managed to get my device working on Debian with a lot of help . Here\\'s what went into my /etc/wvdial.conf: I had to run sudo modprobe usbserial vendor=0x1d09 product=0x4000 and then sudo wvdial neotel afterwards and then I lived happily for long... Now why is XP so uncomfortable? I\\'m used to many of the conveniences of Debian that are absent in XP or I\\'m not motivated to find replacements for stuff like workspaces, copy-text-on-highlight, Epiphany, Quod Libet, debmirror, Nautilus, ...","tags":"computing","title":"'enjoying net connection at home, finally'"},{"url":"http://tshepang.net/my-machines","text":"I have, since my first machine in 2004, owned 2 other complete systems: a Dell Inspiron desktop Core 2 Duo (Conroe) system boasting 2GB RAM and 160GB HDD a power-hungry and underperfoming Pentium 4 Prescott system (3.06GHz/1GB RAM) I currently primarily use the old P4 and it\\'s still pretty decent at 2.66GHz and 0.5GB of RAM. It also sports a DVD-Writer and 250GB HDD, all SATA. The other systems are used by those close to me for one reason or another. The Dell Inspiron is my most recent machine. It got 3-year warranty on it (which was quite a surprise) so I\\'m not touching its insides. This system currenly dual-boots with Windows XP which a relative of mine uses for music production, a task he claims FLOSS can\\'t satisfactorily fulfill. I should note the other systems I use at work: An HP Core 2 Duo Conroe 1.86GHz/1GB RAM desktop, my primary workhorse for building Debian, which dual-boots with Windows XP since it actually is a shared machine for those I work with in the area (about a dozen people), and of course a bit over-powered for what is claimed to be an \\'email-checking\\' and \\'printing\\' machine. I just manage to find time in-between these email/printing sessions to have it do the grunt-work. a recently-acquired Pentium M 1.7GHz/500MB RAM HP/Compaq laptop which provides quite decent performance too and a claimed battery life of 2+ hrs. This system also dual-boots with Windows XP since nearly all that we need at work uses it. It\\'s also the system where I do software/programming study and miscellaneous reading on since it\\'s the only system at work I have exclusive access to. [ expansion/update ] I\\'ve neglected to mention the other 2 systems I\\'m not interested in, which I use at work for some work tasks, both Windows-based (and going as far back as Windows 98!), and both under-powered but pretty well-suited to their specific tasks (except that I still have to use micro-floppy diskettes), and also uniteresting because they aren\\'t running my favorite operating system, Debian. That\\'s 6 systems in total all running Debian, 3 of which dual-boot with Windows XP, 1 dual-booting with Windows Vista (the Core 2 laptop), and 2 (including my primary system, mt first) purely Debian. Of these, the only one with internet access is the desktop HP system at work actually, mainly because web-access in SA isn\\'t nearly as affordable as I\\'d like.","tags":"computing","title":"my machines"},{"url":"http://tshepang.net/only-the-processor-survives","text":"I only recently realized that my oldest computer system, the first I ever bought, has all been renewed, bar the processor, an old-style P4 (Northwood) purchased July 2004. The original 80GB HDD, which I loved due to high reliability despite serious punishment (I did so much experimenting with it including multiple OS installations) until it failed earlier this year. The motherboard failed several months ago (difficult problems involving USB connectivity and lack of sound, all intermittent, all resulting in emotional pain). The SONY DVD-Writer which I loved due running reliably for years until it failed earlier this year. I also lost the power supply which kept resetting when, say for example I was inserting an optical disk and the HDD was doing much seeking (both of which must have induced unberable power spikes the PSU), an obvious sign of deterioration, and great source of emotional pain too. The replacement included a case as well, so yes, even the case ain\\'t original. Additionally, I was initially all PATA (with those fucking annoying IDE cables) and am all SATA now (luckily the replacement motherboard got 2 SATA ports, which is all I needed since I only got 1 optical drive and 1 HDD).","tags":"computing","title":"only the processor survives"},{"url":"http://tshepang.net/net-connection-at-home-finally","text":"I got internet connection at home on September 12th (access at work has been terminated). It\\'s a 10GB/month connection that goes for R600 (around \\$80). Not too cheap but it\\'s the cheapest (per MB) in the country though, as far as I know.","tags":"computing","title":"'net connection at home, finally'"},{"url":"http://tshepang.net/being-friendly-towards-customers","text":"I just a read a very interesting post on how to gain market share, and what prompted me to post is the following snippet which states the advantages of being friendly towards customers: ...It reminds me of independent booksellers, who said \\\"why should I make it comfortable for people to read books in my store? I want them to buy the books!\\\" And then one day Barnes and Nobles puts couches and cafes in the stores and practically begged people to read books in their store without buying them. Now you\\'ve got all these customers sitting in their stores for hours at a time, mittengrabben all the books with their filthy hands, and the probability that they find something they want to buy is linearly proportional to the amount of time they spend in the store, and even the dinkiest Barnes and Nobles superstore in Iowa City rakes in hundreds of dollars a minute while the independent booksellers are going out of business. Honey, Shakespeare and Company on Manhattan\\'s Upper West Side did not close because Barnes and Nobles had cheaper prices, it closed because Barnes and Nobles had more human beings in the building . I used to frequent some local book/magazine franchise whose merchandise I liked but just couldn\\'t afford. That made the experience uncomfortable, the risk of being told to leave.","tags":"misc","title":"being friendly towards customers"},{"url":"http://tshepang.net/developer-of-note-andreas-barth","text":"Andreas Barth is about as a great a Debian release manager as Steve Langasek, and though he recently stated the wish to reduce time on release management , he just did a thorough analysis on the status of the hppa port .","tags":"computing","title":"'developer of note: Andreas Barth'"},{"url":"http://tshepang.net/more-tracker-goodness","text":"Tracker \\'s applet has recently received a revamp which, when clicked, launches Tracker Search Tool instead of displaying the search box. That\\'s a minor detail considering the other work included in the 2 recent releases, most especially the option to auto-pause the daemon when X events (mouse movement, keyboard presses) are taking place, a feature which helps with system responsiveness. This shit rocks, absolutely!","tags":"computing","title":"more Tracker goodness"},{"url":"http://tshepang.net/wtc-twin-towers-and-the-bbc-documentary","text":"I normally dislike documentaries which tend to be dumbed-down, over-emphasizing certain concepts, and worse still, treated with over-dramatic music and other cinematic touches like re-enactments and camera play. That\\'s why Part 1 of Imagination: A Short History of Tall Buildings, happens to be quite a relief, since it turns to be of mild presentation with excellent use of music, apart from also being a very effective piece in its primary purpose of providing information. It actually brings again to life my love for high-rises which, in my memory, really began when I saw a tremendously gorgeous picture of the Manhattan skyline, with the twin towers at the center, an image I found in World Book Encyclopedia back in 1995. That image made me fall in love with those twin towers, which to me were the most interesting structures in all of New York, such that I still don\\'t understand why I hear that many didn\\'t like the structures, the reason for which I still have to find out.","tags":"misc","title":"WTC twin towers and the BBC documentary"},{"url":"http://tshepang.net/tracker-goodness","text":"Tracker hasn\\'t been around as long as Beagle has but seems more advanced, possessing various utilities like the applet which can be used to launch all Tracker GUI utilities (Tracker Search Tool, Tracker Preferences, and Tracker Statistics), displaying the daemon (trackerd) status, providing the functionality of pausing the Tracker daemon, as well as providing a (convenient) search dialogue [ update ]. I wonder if Beagle has lovely tools like this, but it\\'s main advantage is that it supports far more data formats that Tracker does, while it still is hungry for memory (version 0.3.2). One particular thing that encouraged this post however is Tracker Statistics, when I discovered that it actually is self-updating. This change, which I apparently missed, was committed October last year, and got me really impressed. Now if only all those advanced options were less buggy... While I\\'m at it I might as well mention how much I love the new Tracker Preferences feature which makes it restart/reindex user\\'s data depending on what preferences were changed. That\\'s gorgeous. Now if only it performed such restarting/reindex faster than it often does (especially when it is indexing), since one often has to wait \\'forever\\' for such to happen.","tags":"computing","title":"Tracker goodness"},{"url":"http://tshepang.net/games-in-debian","text":"Blob Wars , which resembles Mario, has become a serious hit with my 9-year-old brother and a number of friends, which makes me happy since it could very well become their GNU/Linux killer app. I came across it while looking for some Debian games on the request of that brother, who was then responsible for spreading its fame. Also, Ceferino , a more favorite of mine, seems to also be catching up with Blob Wars with that same game-lover crew.","tags":"computing","title":"games in Debian"},{"url":"http://tshepang.net/developer-of-note-alexander-larsson","text":"I could not keep away from admiring the tremendous amount of work she does, most recently GVFS and GIO (both of which have just been released ), and previously, GtkPrint.","tags":"computing","title":"'developer of note: Alexander Larsson'"},{"url":"http://tshepang.net/quod-libet-and-arrogance","text":"I\\'ve just seen, for the first time in memory, a concept of arrogant design stated publicly , a concept whose awareness previously existed only in my mind. This concept was brought up by my experiences with Quod Libet , my favorite audio player. It unfortunately doesn\\'t conform to some common standards: I can\\'t open a song directly from a file manager (Nautilus) requiring me to open the application itself first, as if it\\'s the standard operating environment, yet it\\'s folder view is less than perfect, in that it doesn\\'t automatically update the contents if changed externally. It doesn\\'t use well-known shortcuts like B for previous track and N for next track, and invents its own, and if there\\'s not enough already. It does not allow me to drag a folder containing tracks, meaning I have to use its own interface to open all tracks. As regards the first link here, someone else also stated that Scribes\\' design is arrogant too, though I don\\'t think so. Scribes is just excellent and I don\\'t see the need for another editor, except if it had code \\'folding\\' and started-up faster than the current Scribes\\' 10 seconds. [ update : such a replacement was eventually discovered!]","tags":"computing","title":"Quod Libet and arrogance"},{"url":"http://tshepang.net/anarchism-and-the-gpl","text":"I was reading some old Debian posts where there was an argument brewing regarding the existence of anarchy within Debian. A notable point raised was that the existence of the GPL, the leading FLOSS licence, would be impossible because a licence\\'s existence requires laws to exist. The argument was that, since anarchy is against law (due to the idea that law is designed to defend the elites and oppress the majority), then there can\\'t be free software. What\\'s notable about the argument is that it\\'s pretty dumb. Now since anarchy ain\\'t mainstream, it seems okay to use the current system to enforce some form of anarchy by law (use what little you have). GPL creator himself states that free software (subset of FLOSS) existed in MIT without requiring licences and then states that it\\'s companies which refused open access to code, forcing GPL creator (Richard Stallman) to start a project to develop a truly free Operating System. In an anarchistic society, there certainly seems to be no motivation to develop non-FLOSS, but in today\\'s rogue society, there\\'s plenty.","tags":"misc","title":"Anarchism and the GPL"},{"url":"http://tshepang.net/one-less-angel","text":"There are not that many people I know personally who are angels, and one of those died recently as a result of a car and truck collision. The other occupants in the car, all three of them, did not survive either. The tragedy is more notable because the guy, Yandisa Mfokazi, was among my greatest friends ever. This is the guy whose family treated me like royalty on a recent visit . Of all personal losses I have ever experienced, this is the greatest.","tags":"misc","title":"one less angel"},{"url":"http://tshepang.net/tracker-060","text":"6 months have passed since the previous Tracker release and it\\'s real great to have another fresh one . During development, its GUI interface (TST) has went through two revamps, each being an improvement on the previous one. This implies that those who have only ever used that January\\'s release have missed a TST which had categories (All Files, Documents, Images, ...) which were presented as tabs, which shouldn\\'t matter anyways since the current interface, which uses a sidebar instead, rocks like hell. Another highlight is the inclusion of tracker-preferences UI which allows for easy configuration.","tags":"computing","title":"'Tracker 0.6.0'"},{"url":"http://tshepang.net/developer-of-note-steve-langasek","text":"Steve Langasek has been Debian release manager for over two years and always managed to impress me with his technical knowledge of Debian packaging as well as relentless effort into getting this, the Debian system, into a releasable operating system. He is the definitive Debian watchdog, for I often pay attention when it\\'s his turn to talk on mailing lists, and he also happens to be among the most powerful of all DD\\'s (for it\\'s said that Debian release managers tend to be more powerful than Debian project leaders). Grandmaster!","tags":"computing","title":"'developer of note: Steve Langasek'"},{"url":"http://tshepang.net/anarchism-and-teen-sexuality","text":"There\\'s a well-researched document named The Anarchist FAQ (AFAQ) included in Debian which I spent some time reading. This wasn\\'t a first-time effort by the way, for the doc is very large. What prompted the post is the very radical idea contained therein that parents should encourage their teens to engage in sexual activity, defending such a position by pointing to evidence that much social decay owes to sexual taboos. It\\'s really amazing what I read and I haven\\'t been intrigued so much by a philosophical theory in such a long time. Oh, and by the way, anarchism is an extremely attractive theory, though I have very many questions still. I\\'ll keep studying to understand more.","tags":"misc","title":"Anarchism and teen sexuality"},{"url":"http://tshepang.net/nanotech-and-open-source","text":"I was fascinated to find that Christine Peterson of Nanotech fame coined the term Open Source (more or less, a business-friendly name for Free/Libre software, leading to a common compromise of calling the entire thing FLOSS for Free/Libre/Open Source Software). I remember Eric Drexler, possibly the greatest force in that most anticipated of technologies, mentioning something about FLOSS but I didn\\'t know that he was so closely-invoved as to personally interact with Bruce Perens, one of the key FLOSS representatives.","tags":"misc","title":"Nanotech and Open Source"},{"url":"http://tshepang.net/debian-and-linux","text":"There is a Debian history discussion among Debian old-timers where a point was raised that Ian Murdock , Debian founder, successfully transferred project leadership to someone else, a fact that Bdale Garbee stated to not yet have taken place with Linux, the poster child of FLOSS. It\\'s also interesting to see Murdock praise successive leadership as superior to his.","tags":"computing","title":"Debian and Linux"},{"url":"http://tshepang.net/a-visit-to-eastern-cape","text":"I enjoyed the beautiful countryside of Nyosini, a small (a few hundred households?) rural village nearby a buzzing Mount Frere, a town set atop a hill of the same name. This Eastern Cape village is the home of a friend of mine and the visit happened to be an excuse to see the province for the first time in my life, and the highlight was the amazing hospitality granted by the home we stayed during most of the visit, and the closeness of family I experienced here is unmatched in memory. Notable and positive mention ought be granted to 3 characters (Lwazi, Bongo, Siya) for reasons I\\'m too lazy to mention. ( another visit )","tags":"misc","title":"a visit to Eastern Cape"},{"url":"http://tshepang.net/developer-of-note-aurelien-jarno","text":"In celebration of the beginning of this exercise, I recognize Aurelien Jarno as a very notable developer. This is due to his tireless efforts as the number one GLibC co-maintainer in Debian since several months (if the package\\'s debian changelog is to be relied upon). Also, GLibC, together with GCC and Linux, ought to be regarded as the most important packages of any GNU/Linux system.","tags":"computing","title":"'developer of note: Aurelien Jarno'"},{"url":"http://tshepang.net/1st-usage-of-rss-feeds","text":"Browsing Debian Planet today led me to the usage of Google Reader. I\\'ve been ignoring this technology because I was too lazy to figure it out, but Google Reader makes it so easy it does not require me to think. Is kool.","tags":"computing","title":"1st usage of RSS feeds"},{"url":"http://tshepang.net/1st-floss-patch-contribution","text":"Back in January 2007, I sent a patch that slightly improved the README file found in the root directory of Tracker , an exciting project that is meant to be a data indexer (like Google Desktop ) and much more. This is what I consider the first ever FLOSS contribution I ever made. I went on to make some minor code patches which also taught me a few things, like GTK+ and GLib API .","tags":"computing","title":"1st FLOSS patch contribution"}]}